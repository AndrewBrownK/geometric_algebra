// AUTO-GENERATED - DO NOT MODIFY
//
// To contribute to this file, see the adjacent codegen package.
// https://github.com/AndrewBrownK/projective_ga/
//

use projective_ga::{simd::*, *};
use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Neg, Sub, SubAssign};

pub mod aspect_duals;
pub mod aspects;
pub mod characteristics;
pub mod involutions;
pub mod metrics;
pub mod norms;
pub mod shaders;
#[cfg(test)]
pub mod test;
pub mod unitize;
pub mod products {
    pub mod contractions;
    pub mod dot;
    pub mod expansions;
    pub mod exterior;
    pub mod geometric;
    pub mod isometries;
    pub mod projections;
    pub mod quotients;
    pub mod rejections;
    pub mod supports;
}

#[derive(Clone, Copy)]
struct ScalarGroups {
    /// 1
    g0: f32,
}

#[derive(Clone, Copy)]
pub union Scalar {
    groups: ScalarGroups,
    /// 1
    elements: [f32; 1],
}

impl Scalar {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(scalar: f32) -> Self {
        Self { elements: [scalar] }
    }
    pub const fn from_groups(g0: f32) -> Self {
        Self { groups: ScalarGroups { g0 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> f32 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut f32 {
        unsafe { &mut self.groups.g0 }
    }
}

const SCALAR_INDEX_REMAP: [usize; 1] = [0];

impl std::ops::Index<usize> for Scalar {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[SCALAR_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Scalar {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[SCALAR_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Scalar> for [f32; 1] {
    fn from(vector: Scalar) -> Self {
        unsafe { [vector.elements[0]] }
    }
}

impl std::convert::From<[f32; 1]> for Scalar {
    fn from(array: [f32; 1]) -> Self {
        Self { elements: [array[0]] }
    }
}

impl std::fmt::Debug for Scalar {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.debug_struct("Scalar").field("1", &self[0]).finish()
    }
}

#[derive(Clone, Copy)]
struct AntiScalarGroups {
    /// e12345
    g0: f32,
}

#[derive(Clone, Copy)]
pub union AntiScalar {
    groups: AntiScalarGroups,
    /// e12345
    elements: [f32; 1],
}

impl AntiScalar {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e12345: f32) -> Self {
        Self { elements: [e12345] }
    }
    pub const fn from_groups(g0: f32) -> Self {
        Self { groups: AntiScalarGroups { g0 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> f32 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut f32 {
        unsafe { &mut self.groups.g0 }
    }
}

const ANTISCALAR_INDEX_REMAP: [usize; 1] = [0];

impl std::ops::Index<usize> for AntiScalar {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[ANTISCALAR_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for AntiScalar {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[ANTISCALAR_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<AntiScalar> for [f32; 1] {
    fn from(vector: AntiScalar) -> Self {
        unsafe { [vector.elements[0]] }
    }
}

impl std::convert::From<[f32; 1]> for AntiScalar {
    fn from(array: [f32; 1]) -> Self {
        Self { elements: [array[0]] }
    }
}

impl std::fmt::Debug for AntiScalar {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.debug_struct("AntiScalar").field("e12345", &self[0]).finish()
    }
}

type Magnitude = DualNum;

#[derive(Clone, Copy)]
struct DualNumGroups {
    /// 1, e12345
    g0: Simd32x2,
}

#[derive(Clone, Copy)]
pub union DualNum {
    groups: DualNumGroups,
    /// 1, e12345, 0, 0
    elements: [f32; 4],
}

impl DualNum {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(scalar: f32, e12345: f32) -> Self {
        Self {
            elements: [scalar, e12345, 0.0, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x2) -> Self {
        Self { groups: DualNumGroups { g0 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x2 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x2 {
        unsafe { &mut self.groups.g0 }
    }
}

const DUALNUM_INDEX_REMAP: [usize; 2] = [0, 1];

impl std::ops::Index<usize> for DualNum {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[DUALNUM_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for DualNum {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[DUALNUM_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<DualNum> for [f32; 2] {
    fn from(vector: DualNum) -> Self {
        unsafe { [vector.elements[0], vector.elements[1]] }
    }
}

impl std::convert::From<[f32; 2]> for DualNum {
    fn from(array: [f32; 2]) -> Self {
        Self {
            elements: [array[0], array[1], 0.0, 0.0],
        }
    }
}

impl std::fmt::Debug for DualNum {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.debug_struct("DualNum").field("1", &self[0]).field("e12345", &self[1]).finish()
    }
}

#[derive(Clone, Copy)]
struct RoundPointGroups {
    /// e1, e2, e3
    g0: Simd32x3,
    /// e4, e5
    g1: Simd32x2,
}

#[derive(Clone, Copy)]
pub union RoundPoint {
    groups: RoundPointGroups,
    /// e1, e2, e3, 0, e4, e5, 0, 0
    elements: [f32; 8],
}

impl RoundPoint {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e1: f32, e2: f32, e3: f32, e4: f32, e5: f32) -> Self {
        Self {
            elements: [e1, e2, e3, 0.0, e4, e5, 0.0, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x2) -> Self {
        Self {
            groups: RoundPointGroups { g0, g1 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x2 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x2 {
        unsafe { &mut self.groups.g1 }
    }
}

const ROUNDPOINT_INDEX_REMAP: [usize; 5] = [0, 1, 2, 4, 5];

impl std::ops::Index<usize> for RoundPoint {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[ROUNDPOINT_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for RoundPoint {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[ROUNDPOINT_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<RoundPoint> for [f32; 5] {
    fn from(vector: RoundPoint) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5]] }
    }
}

impl std::convert::From<[f32; 5]> for RoundPoint {
    fn from(array: [f32; 5]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], 0.0, 0.0],
        }
    }
}

impl std::fmt::Debug for RoundPoint {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("RoundPoint")
            .field("e1", &self[0])
            .field("e2", &self[1])
            .field("e3", &self[2])
            .field("e4", &self[3])
            .field("e5", &self[4])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct OriginGroups {
    /// e4
    g0: f32,
}

#[derive(Clone, Copy)]
pub union Origin {
    groups: OriginGroups,
    /// e4
    elements: [f32; 1],
}

impl Origin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e4: f32) -> Self {
        Self { elements: [e4] }
    }
    pub const fn from_groups(g0: f32) -> Self {
        Self { groups: OriginGroups { g0 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> f32 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut f32 {
        unsafe { &mut self.groups.g0 }
    }
}

const ORIGIN_INDEX_REMAP: [usize; 1] = [0];

impl std::ops::Index<usize> for Origin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[ORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Origin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[ORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Origin> for [f32; 1] {
    fn from(vector: Origin) -> Self {
        unsafe { [vector.elements[0]] }
    }
}

impl std::convert::From<[f32; 1]> for Origin {
    fn from(array: [f32; 1]) -> Self {
        Self { elements: [array[0]] }
    }
}

impl std::fmt::Debug for Origin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.debug_struct("Origin").field("e4", &self[0]).finish()
    }
}

#[derive(Clone, Copy)]
struct InfinityGroups {
    /// e5
    g0: f32,
}

#[derive(Clone, Copy)]
pub union Infinity {
    groups: InfinityGroups,
    /// e5
    elements: [f32; 1],
}

impl Infinity {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e5: f32) -> Self {
        Self { elements: [e5] }
    }
    pub const fn from_groups(g0: f32) -> Self {
        Self { groups: InfinityGroups { g0 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> f32 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut f32 {
        unsafe { &mut self.groups.g0 }
    }
}

const INFINITY_INDEX_REMAP: [usize; 1] = [0];

impl std::ops::Index<usize> for Infinity {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[INFINITY_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Infinity {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[INFINITY_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Infinity> for [f32; 1] {
    fn from(vector: Infinity) -> Self {
        unsafe { [vector.elements[0]] }
    }
}

impl std::convert::From<[f32; 1]> for Infinity {
    fn from(array: [f32; 1]) -> Self {
        Self { elements: [array[0]] }
    }
}

impl std::fmt::Debug for Infinity {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.debug_struct("Infinity").field("e5", &self[0]).finish()
    }
}

#[derive(Clone, Copy)]
struct RoundPointAtOriginGroups {
    /// e4, e5
    g0: Simd32x2,
}

#[derive(Clone, Copy)]
pub union RoundPointAtOrigin {
    groups: RoundPointAtOriginGroups,
    /// e4, e5, 0, 0
    elements: [f32; 4],
}

impl RoundPointAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e4: f32, e5: f32) -> Self {
        Self { elements: [e4, e5, 0.0, 0.0] }
    }
    pub const fn from_groups(g0: Simd32x2) -> Self {
        Self {
            groups: RoundPointAtOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x2 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x2 {
        unsafe { &mut self.groups.g0 }
    }
}

const ROUNDPOINTATORIGIN_INDEX_REMAP: [usize; 2] = [0, 1];

impl std::ops::Index<usize> for RoundPointAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[ROUNDPOINTATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for RoundPointAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[ROUNDPOINTATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<RoundPointAtOrigin> for [f32; 2] {
    fn from(vector: RoundPointAtOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1]] }
    }
}

impl std::convert::From<[f32; 2]> for RoundPointAtOrigin {
    fn from(array: [f32; 2]) -> Self {
        Self {
            elements: [array[0], array[1], 0.0, 0.0],
        }
    }
}

impl std::fmt::Debug for RoundPointAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.debug_struct("RoundPointAtOrigin").field("e4", &self[0]).field("e5", &self[1]).finish()
    }
}

#[derive(Clone, Copy)]
struct AntiSphereOnOriginGroups {
    /// e1, e2, e3, e4
    g0: Simd32x4,
}

#[derive(Clone, Copy)]
pub union AntiSphereOnOrigin {
    groups: AntiSphereOnOriginGroups,
    /// e1, e2, e3, e4
    elements: [f32; 4],
}

impl AntiSphereOnOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e1: f32, e2: f32, e3: f32, e4: f32) -> Self {
        Self { elements: [e1, e2, e3, e4] }
    }
    pub const fn from_groups(g0: Simd32x4) -> Self {
        Self {
            groups: AntiSphereOnOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x4 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g0 }
    }
}

const ANTISPHEREONORIGIN_INDEX_REMAP: [usize; 4] = [0, 1, 2, 3];

impl std::ops::Index<usize> for AntiSphereOnOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[ANTISPHEREONORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for AntiSphereOnOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[ANTISPHEREONORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<AntiSphereOnOrigin> for [f32; 4] {
    fn from(vector: AntiSphereOnOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3]] }
    }
}

impl std::convert::From<[f32; 4]> for AntiSphereOnOrigin {
    fn from(array: [f32; 4]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3]],
        }
    }
}

impl std::fmt::Debug for AntiSphereOnOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("AntiSphereOnOrigin")
            .field("e1", &self[0])
            .field("e2", &self[1])
            .field("e3", &self[2])
            .field("e4", &self[3])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct AntiPlaneGroups {
    /// e1, e2, e3, e5
    g0: Simd32x4,
}

#[derive(Clone, Copy)]
pub union AntiPlane {
    groups: AntiPlaneGroups,
    /// e1, e2, e3, e5
    elements: [f32; 4],
}

impl AntiPlane {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e1: f32, e2: f32, e3: f32, e5: f32) -> Self {
        Self { elements: [e1, e2, e3, e5] }
    }
    pub const fn from_groups(g0: Simd32x4) -> Self {
        Self { groups: AntiPlaneGroups { g0 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x4 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g0 }
    }
}

const ANTIPLANE_INDEX_REMAP: [usize; 4] = [0, 1, 2, 3];

impl std::ops::Index<usize> for AntiPlane {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[ANTIPLANE_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for AntiPlane {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[ANTIPLANE_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<AntiPlane> for [f32; 4] {
    fn from(vector: AntiPlane) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3]] }
    }
}

impl std::convert::From<[f32; 4]> for AntiPlane {
    fn from(array: [f32; 4]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3]],
        }
    }
}

impl std::fmt::Debug for AntiPlane {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("AntiPlane")
            .field("e1", &self[0])
            .field("e2", &self[1])
            .field("e3", &self[2])
            .field("e5", &self[3])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct AntiPlaneAtOriginGroups {
    /// e1, e2, e3
    g0: Simd32x3,
}

#[derive(Clone, Copy)]
pub union AntiPlaneAtOrigin {
    groups: AntiPlaneAtOriginGroups,
    /// e1, e2, e3, 0
    elements: [f32; 4],
}

impl AntiPlaneAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e1: f32, e2: f32, e3: f32) -> Self {
        Self { elements: [e1, e2, e3, 0.0] }
    }
    pub const fn from_groups(g0: Simd32x3) -> Self {
        Self {
            groups: AntiPlaneAtOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
}

const ANTIPLANEATORIGIN_INDEX_REMAP: [usize; 3] = [0, 1, 2];

impl std::ops::Index<usize> for AntiPlaneAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[ANTIPLANEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for AntiPlaneAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[ANTIPLANEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<AntiPlaneAtOrigin> for [f32; 3] {
    fn from(vector: AntiPlaneAtOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2]] }
    }
}

impl std::convert::From<[f32; 3]> for AntiPlaneAtOrigin {
    fn from(array: [f32; 3]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0],
        }
    }
}

impl std::fmt::Debug for AntiPlaneAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.debug_struct("AntiPlaneAtOrigin").field("e1", &self[0]).field("e2", &self[1]).field("e3", &self[2]).finish()
    }
}

#[derive(Clone, Copy)]
struct DipoleGroups {
    /// -e14, -e24, -e34
    g0: Simd32x3,
    /// e23, -e13, e12
    g1: Simd32x3,
    /// e15, e25, e35, e45
    g2: Simd32x4,
}

#[derive(Clone, Copy)]
pub union Dipole {
    groups: DipoleGroups,
    /// -e14, -e24, -e34, 0, e23, -e13, e12, 0, e15, e25, e35, e45
    elements: [f32; 12],
}

impl Dipole {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e14: f32, neg_e24: f32, neg_e34: f32, e23: f32, neg_e13: f32, e12: f32, e15: f32, e25: f32, e35: f32, e45: f32) -> Self {
        Self {
            elements: [neg_e14, neg_e24, neg_e34, 0.0, e23, neg_e13, e12, 0.0, e15, e25, e35, e45],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x3, g2: Simd32x4) -> Self {
        Self {
            groups: DipoleGroups { g0, g1, g2 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x3 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g1 }
    }
    #[inline(always)]
    pub fn group2(&self) -> Simd32x4 {
        unsafe { self.groups.g2 }
    }
    #[inline(always)]
    pub fn group2_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g2 }
    }
}

const DIPOLE_INDEX_REMAP: [usize; 10] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 11];

impl std::ops::Index<usize> for Dipole {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[DIPOLE_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Dipole {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[DIPOLE_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Dipole> for [f32; 10] {
    fn from(vector: Dipole) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6], vector.elements[8], vector.elements[9],
                vector.elements[10], vector.elements[11],
            ]
        }
    }
}

impl std::convert::From<[f32; 10]> for Dipole {
    fn from(array: [f32; 10]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], 0.0, array[6], array[7], array[8], array[9]],
        }
    }
}

impl std::fmt::Debug for Dipole {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("Dipole")
            .field("-e14", &self[0])
            .field("-e24", &self[1])
            .field("-e34", &self[2])
            .field("e23", &self[3])
            .field("-e13", &self[4])
            .field("e12", &self[5])
            .field("e15", &self[6])
            .field("e25", &self[7])
            .field("e35", &self[8])
            .field("e45", &self[9])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct DipoleAtOriginGroups {
    /// -e14, -e24, -e34
    g0: Simd32x3,
    /// e15, e25, e35
    g1: Simd32x3,
}

#[derive(Clone, Copy)]
pub union DipoleAtOrigin {
    groups: DipoleAtOriginGroups,
    /// -e14, -e24, -e34, 0, e15, e25, e35, 0
    elements: [f32; 8],
}

impl DipoleAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e14: f32, neg_e24: f32, neg_e34: f32, e15: f32, e25: f32, e35: f32) -> Self {
        Self {
            elements: [neg_e14, neg_e24, neg_e34, 0.0, e15, e25, e35, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x3) -> Self {
        Self {
            groups: DipoleAtOriginGroups { g0, g1 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x3 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g1 }
    }
}

const DIPOLEATORIGIN_INDEX_REMAP: [usize; 6] = [0, 1, 2, 4, 5, 6];

impl std::ops::Index<usize> for DipoleAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[DIPOLEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for DipoleAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[DIPOLEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<DipoleAtOrigin> for [f32; 6] {
    fn from(vector: DipoleAtOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6]] }
    }
}

impl std::convert::From<[f32; 6]> for DipoleAtOrigin {
    fn from(array: [f32; 6]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], 0.0],
        }
    }
}

impl std::fmt::Debug for DipoleAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("DipoleAtOrigin")
            .field("-e14", &self[0])
            .field("-e24", &self[1])
            .field("-e34", &self[2])
            .field("e15", &self[3])
            .field("e25", &self[4])
            .field("e35", &self[5])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct DipoleOnOriginGroups {
    /// -e14, -e24, -e34, e45
    g0: Simd32x4,
}

#[derive(Clone, Copy)]
pub union DipoleOnOrigin {
    groups: DipoleOnOriginGroups,
    /// -e14, -e24, -e34, e45
    elements: [f32; 4],
}

impl DipoleOnOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e14: f32, neg_e24: f32, neg_e34: f32, e45: f32) -> Self {
        Self {
            elements: [neg_e14, neg_e24, neg_e34, e45],
        }
    }
    pub const fn from_groups(g0: Simd32x4) -> Self {
        Self {
            groups: DipoleOnOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x4 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g0 }
    }
}

const DIPOLEONORIGIN_INDEX_REMAP: [usize; 4] = [0, 1, 2, 3];

impl std::ops::Index<usize> for DipoleOnOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[DIPOLEONORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for DipoleOnOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[DIPOLEONORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<DipoleOnOrigin> for [f32; 4] {
    fn from(vector: DipoleOnOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3]] }
    }
}

impl std::convert::From<[f32; 4]> for DipoleOnOrigin {
    fn from(array: [f32; 4]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3]],
        }
    }
}

impl std::fmt::Debug for DipoleOnOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("DipoleOnOrigin")
            .field("-e14", &self[0])
            .field("-e24", &self[1])
            .field("-e34", &self[2])
            .field("e45", &self[3])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct DipoleAligningOriginGroups {
    /// -e14, -e24, -e34
    g0: Simd32x3,
    /// e15, e25, e35, e45
    g1: Simd32x4,
}

#[derive(Clone, Copy)]
pub union DipoleAligningOrigin {
    groups: DipoleAligningOriginGroups,
    /// -e14, -e24, -e34, 0, e15, e25, e35, e45
    elements: [f32; 8],
}

impl DipoleAligningOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e14: f32, neg_e24: f32, neg_e34: f32, e15: f32, e25: f32, e35: f32, e45: f32) -> Self {
        Self {
            elements: [neg_e14, neg_e24, neg_e34, 0.0, e15, e25, e35, e45],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x4) -> Self {
        Self {
            groups: DipoleAligningOriginGroups { g0, g1 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x4 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g1 }
    }
}

const DIPOLEALIGNINGORIGIN_INDEX_REMAP: [usize; 7] = [0, 1, 2, 4, 5, 6, 7];

impl std::ops::Index<usize> for DipoleAligningOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[DIPOLEALIGNINGORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for DipoleAligningOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[DIPOLEALIGNINGORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<DipoleAligningOrigin> for [f32; 7] {
    fn from(vector: DipoleAligningOrigin) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6], vector.elements[7],
            ]
        }
    }
}

impl std::convert::From<[f32; 7]> for DipoleAligningOrigin {
    fn from(array: [f32; 7]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], array[6]],
        }
    }
}

impl std::fmt::Debug for DipoleAligningOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("DipoleAligningOrigin")
            .field("-e14", &self[0])
            .field("-e24", &self[1])
            .field("-e34", &self[2])
            .field("e15", &self[3])
            .field("e25", &self[4])
            .field("e35", &self[5])
            .field("e45", &self[6])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct DipoleOrthogonalOriginGroups {
    /// -e14, -e24, -e34
    g0: Simd32x3,
    /// e23, -e13, e12
    g1: Simd32x3,
    /// e15, e25, e35
    g2: Simd32x3,
}

#[derive(Clone, Copy)]
pub union DipoleOrthogonalOrigin {
    groups: DipoleOrthogonalOriginGroups,
    /// -e14, -e24, -e34, 0, e23, -e13, e12, 0, e15, e25, e35, 0
    elements: [f32; 12],
}

impl DipoleOrthogonalOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e14: f32, neg_e24: f32, neg_e34: f32, e23: f32, neg_e13: f32, e12: f32, e15: f32, e25: f32, e35: f32) -> Self {
        Self {
            elements: [neg_e14, neg_e24, neg_e34, 0.0, e23, neg_e13, e12, 0.0, e15, e25, e35, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x3, g2: Simd32x3) -> Self {
        Self {
            groups: DipoleOrthogonalOriginGroups { g0, g1, g2 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x3 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g1 }
    }
    #[inline(always)]
    pub fn group2(&self) -> Simd32x3 {
        unsafe { self.groups.g2 }
    }
    #[inline(always)]
    pub fn group2_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g2 }
    }
}

const DIPOLEORTHOGONALORIGIN_INDEX_REMAP: [usize; 9] = [0, 1, 2, 4, 5, 6, 8, 9, 10];

impl std::ops::Index<usize> for DipoleOrthogonalOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[DIPOLEORTHOGONALORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for DipoleOrthogonalOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[DIPOLEORTHOGONALORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<DipoleOrthogonalOrigin> for [f32; 9] {
    fn from(vector: DipoleOrthogonalOrigin) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6], vector.elements[8], vector.elements[9],
                vector.elements[10],
            ]
        }
    }
}

impl std::convert::From<[f32; 9]> for DipoleOrthogonalOrigin {
    fn from(array: [f32; 9]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], 0.0, array[6], array[7], array[8], 0.0],
        }
    }
}

impl std::fmt::Debug for DipoleOrthogonalOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("DipoleOrthogonalOrigin")
            .field("-e14", &self[0])
            .field("-e24", &self[1])
            .field("-e34", &self[2])
            .field("e23", &self[3])
            .field("-e13", &self[4])
            .field("e12", &self[5])
            .field("e15", &self[6])
            .field("e25", &self[7])
            .field("e35", &self[8])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct DipoleAtInfinityGroups {
    /// e23, -e13, e12
    g0: Simd32x3,
    /// e15, e25, e35, e45
    g1: Simd32x4,
}

#[derive(Clone, Copy)]
pub union DipoleAtInfinity {
    groups: DipoleAtInfinityGroups,
    /// e23, -e13, e12, 0, e15, e25, e35, e45
    elements: [f32; 8],
}

impl DipoleAtInfinity {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e23: f32, neg_e13: f32, e12: f32, e15: f32, e25: f32, e35: f32, e45: f32) -> Self {
        Self {
            elements: [e23, neg_e13, e12, 0.0, e15, e25, e35, e45],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x4) -> Self {
        Self {
            groups: DipoleAtInfinityGroups { g0, g1 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x4 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g1 }
    }
}

const DIPOLEATINFINITY_INDEX_REMAP: [usize; 7] = [0, 1, 2, 4, 5, 6, 7];

impl std::ops::Index<usize> for DipoleAtInfinity {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[DIPOLEATINFINITY_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for DipoleAtInfinity {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[DIPOLEATINFINITY_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<DipoleAtInfinity> for [f32; 7] {
    fn from(vector: DipoleAtInfinity) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6], vector.elements[7],
            ]
        }
    }
}

impl std::convert::From<[f32; 7]> for DipoleAtInfinity {
    fn from(array: [f32; 7]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], array[6]],
        }
    }
}

impl std::fmt::Debug for DipoleAtInfinity {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("DipoleAtInfinity")
            .field("e23", &self[0])
            .field("-e13", &self[1])
            .field("e12", &self[2])
            .field("e15", &self[3])
            .field("e25", &self[4])
            .field("e35", &self[5])
            .field("e45", &self[6])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct NullDipoleAtOriginGroups {
    /// -e14, -e24, -e34
    g0: Simd32x3,
}

#[derive(Clone, Copy)]
pub union NullDipoleAtOrigin {
    groups: NullDipoleAtOriginGroups,
    /// -e14, -e24, -e34, 0
    elements: [f32; 4],
}

impl NullDipoleAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e14: f32, neg_e24: f32, neg_e34: f32) -> Self {
        Self {
            elements: [neg_e14, neg_e24, neg_e34, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3) -> Self {
        Self {
            groups: NullDipoleAtOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
}

const NULLDIPOLEATORIGIN_INDEX_REMAP: [usize; 3] = [0, 1, 2];

impl std::ops::Index<usize> for NullDipoleAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[NULLDIPOLEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for NullDipoleAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[NULLDIPOLEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<NullDipoleAtOrigin> for [f32; 3] {
    fn from(vector: NullDipoleAtOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2]] }
    }
}

impl std::convert::From<[f32; 3]> for NullDipoleAtOrigin {
    fn from(array: [f32; 3]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0],
        }
    }
}

impl std::fmt::Debug for NullDipoleAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("NullDipoleAtOrigin")
            .field("-e14", &self[0])
            .field("-e24", &self[1])
            .field("-e34", &self[2])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct AntiCircleOnOriginGroups {
    /// -e14, -e24, -e34
    g0: Simd32x3,
    /// e23, -e13, e12
    g1: Simd32x3,
}

#[derive(Clone, Copy)]
pub union AntiCircleOnOrigin {
    groups: AntiCircleOnOriginGroups,
    /// -e14, -e24, -e34, 0, e23, -e13, e12, 0
    elements: [f32; 8],
}

impl AntiCircleOnOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e14: f32, neg_e24: f32, neg_e34: f32, e23: f32, neg_e13: f32, e12: f32) -> Self {
        Self {
            elements: [neg_e14, neg_e24, neg_e34, 0.0, e23, neg_e13, e12, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x3) -> Self {
        Self {
            groups: AntiCircleOnOriginGroups { g0, g1 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x3 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g1 }
    }
}

const ANTICIRCLEONORIGIN_INDEX_REMAP: [usize; 6] = [0, 1, 2, 4, 5, 6];

impl std::ops::Index<usize> for AntiCircleOnOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[ANTICIRCLEONORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for AntiCircleOnOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[ANTICIRCLEONORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<AntiCircleOnOrigin> for [f32; 6] {
    fn from(vector: AntiCircleOnOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6]] }
    }
}

impl std::convert::From<[f32; 6]> for AntiCircleOnOrigin {
    fn from(array: [f32; 6]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], 0.0],
        }
    }
}

impl std::fmt::Debug for AntiCircleOnOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("AntiCircleOnOrigin")
            .field("-e14", &self[0])
            .field("-e24", &self[1])
            .field("-e34", &self[2])
            .field("e23", &self[3])
            .field("-e13", &self[4])
            .field("e12", &self[5])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct AntiLineAtOriginGroups {
    /// e23, -e13, e12
    g0: Simd32x3,
}

#[derive(Clone, Copy)]
pub union AntiLineAtOrigin {
    groups: AntiLineAtOriginGroups,
    /// e23, -e13, e12, 0
    elements: [f32; 4],
}

impl AntiLineAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e23: f32, neg_e13: f32, e12: f32) -> Self {
        Self {
            elements: [e23, neg_e13, e12, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3) -> Self {
        Self {
            groups: AntiLineAtOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
}

const ANTILINEATORIGIN_INDEX_REMAP: [usize; 3] = [0, 1, 2];

impl std::ops::Index<usize> for AntiLineAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[ANTILINEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for AntiLineAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[ANTILINEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<AntiLineAtOrigin> for [f32; 3] {
    fn from(vector: AntiLineAtOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2]] }
    }
}

impl std::convert::From<[f32; 3]> for AntiLineAtOrigin {
    fn from(array: [f32; 3]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0],
        }
    }
}

impl std::fmt::Debug for AntiLineAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("AntiLineAtOrigin")
            .field("e23", &self[0])
            .field("-e13", &self[1])
            .field("e12", &self[2])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct FlatPointGroups {
    /// e15, e25, e35, e45
    g0: Simd32x4,
}

#[derive(Clone, Copy)]
pub union FlatPoint {
    groups: FlatPointGroups,
    /// e15, e25, e35, e45
    elements: [f32; 4],
}

impl FlatPoint {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e15: f32, e25: f32, e35: f32, e45: f32) -> Self {
        Self { elements: [e15, e25, e35, e45] }
    }
    pub const fn from_groups(g0: Simd32x4) -> Self {
        Self { groups: FlatPointGroups { g0 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x4 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g0 }
    }
}

const FLATPOINT_INDEX_REMAP: [usize; 4] = [0, 1, 2, 3];

impl std::ops::Index<usize> for FlatPoint {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[FLATPOINT_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for FlatPoint {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[FLATPOINT_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<FlatPoint> for [f32; 4] {
    fn from(vector: FlatPoint) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3]] }
    }
}

impl std::convert::From<[f32; 4]> for FlatPoint {
    fn from(array: [f32; 4]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3]],
        }
    }
}

impl std::fmt::Debug for FlatPoint {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("FlatPoint")
            .field("e15", &self[0])
            .field("e25", &self[1])
            .field("e35", &self[2])
            .field("e45", &self[3])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct FlatPointAtOriginGroups {
    /// e45
    g0: f32,
}

#[derive(Clone, Copy)]
pub union FlatPointAtOrigin {
    groups: FlatPointAtOriginGroups,
    /// e45
    elements: [f32; 1],
}

impl FlatPointAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e45: f32) -> Self {
        Self { elements: [e45] }
    }
    pub const fn from_groups(g0: f32) -> Self {
        Self {
            groups: FlatPointAtOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> f32 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut f32 {
        unsafe { &mut self.groups.g0 }
    }
}

const FLATPOINTATORIGIN_INDEX_REMAP: [usize; 1] = [0];

impl std::ops::Index<usize> for FlatPointAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[FLATPOINTATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for FlatPointAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[FLATPOINTATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<FlatPointAtOrigin> for [f32; 1] {
    fn from(vector: FlatPointAtOrigin) -> Self {
        unsafe { [vector.elements[0]] }
    }
}

impl std::convert::From<[f32; 1]> for FlatPointAtOrigin {
    fn from(array: [f32; 1]) -> Self {
        Self { elements: [array[0]] }
    }
}

impl std::fmt::Debug for FlatPointAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.debug_struct("FlatPointAtOrigin").field("e45", &self[0]).finish()
    }
}

#[derive(Clone, Copy)]
struct FlatPointAtInfinityGroups {
    /// e15, e25, e35
    g0: Simd32x3,
}

#[derive(Clone, Copy)]
pub union FlatPointAtInfinity {
    groups: FlatPointAtInfinityGroups,
    /// e15, e25, e35, 0
    elements: [f32; 4],
}

impl FlatPointAtInfinity {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e15: f32, e25: f32, e35: f32) -> Self {
        Self { elements: [e15, e25, e35, 0.0] }
    }
    pub const fn from_groups(g0: Simd32x3) -> Self {
        Self {
            groups: FlatPointAtInfinityGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
}

const FLATPOINTATINFINITY_INDEX_REMAP: [usize; 3] = [0, 1, 2];

impl std::ops::Index<usize> for FlatPointAtInfinity {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[FLATPOINTATINFINITY_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for FlatPointAtInfinity {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[FLATPOINTATINFINITY_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<FlatPointAtInfinity> for [f32; 3] {
    fn from(vector: FlatPointAtInfinity) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2]] }
    }
}

impl std::convert::From<[f32; 3]> for FlatPointAtInfinity {
    fn from(array: [f32; 3]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0],
        }
    }
}

impl std::fmt::Debug for FlatPointAtInfinity {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("FlatPointAtInfinity")
            .field("e15", &self[0])
            .field("e25", &self[1])
            .field("e35", &self[2])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct CircleGroups {
    /// e234, -e134, e124
    g0: Simd32x3,
    /// -e145, -e245, -e345
    g1: Simd32x3,
    /// e235, -e135, e125, -e123
    g2: Simd32x4,
}

#[derive(Clone, Copy)]
pub union Circle {
    groups: CircleGroups,
    /// e234, -e134, e124, 0, -e145, -e245, -e345, 0, e235, -e135, e125, -e123
    elements: [f32; 12],
}

impl Circle {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e234: f32, neg_e134: f32, e124: f32, neg_e145: f32, neg_e245: f32, neg_e345: f32, e235: f32, neg_e135: f32, e125: f32, neg_e123: f32) -> Self {
        Self {
            elements: [e234, neg_e134, e124, 0.0, neg_e145, neg_e245, neg_e345, 0.0, e235, neg_e135, e125, neg_e123],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x3, g2: Simd32x4) -> Self {
        Self {
            groups: CircleGroups { g0, g1, g2 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x3 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g1 }
    }
    #[inline(always)]
    pub fn group2(&self) -> Simd32x4 {
        unsafe { self.groups.g2 }
    }
    #[inline(always)]
    pub fn group2_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g2 }
    }
}

const CIRCLE_INDEX_REMAP: [usize; 10] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 11];

impl std::ops::Index<usize> for Circle {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[CIRCLE_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Circle {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[CIRCLE_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Circle> for [f32; 10] {
    fn from(vector: Circle) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6], vector.elements[8], vector.elements[9],
                vector.elements[10], vector.elements[11],
            ]
        }
    }
}

impl std::convert::From<[f32; 10]> for Circle {
    fn from(array: [f32; 10]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], 0.0, array[6], array[7], array[8], array[9]],
        }
    }
}

impl std::fmt::Debug for Circle {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("Circle")
            .field("e234", &self[0])
            .field("-e134", &self[1])
            .field("e124", &self[2])
            .field("-e145", &self[3])
            .field("-e245", &self[4])
            .field("-e345", &self[5])
            .field("e235", &self[6])
            .field("-e135", &self[7])
            .field("e125", &self[8])
            .field("-e123", &self[9])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct CircleAtOriginGroups {
    /// e234, -e134, e124
    g0: Simd32x3,
    /// e235, -e135, e125
    g1: Simd32x3,
}

#[derive(Clone, Copy)]
pub union CircleAtOrigin {
    groups: CircleAtOriginGroups,
    /// e234, -e134, e124, 0, e235, -e135, e125, 0
    elements: [f32; 8],
}

impl CircleAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e234: f32, neg_e134: f32, e124: f32, e235: f32, neg_e135: f32, e125: f32) -> Self {
        Self {
            elements: [e234, neg_e134, e124, 0.0, e235, neg_e135, e125, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x3) -> Self {
        Self {
            groups: CircleAtOriginGroups { g0, g1 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x3 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g1 }
    }
}

const CIRCLEATORIGIN_INDEX_REMAP: [usize; 6] = [0, 1, 2, 4, 5, 6];

impl std::ops::Index<usize> for CircleAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[CIRCLEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for CircleAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[CIRCLEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<CircleAtOrigin> for [f32; 6] {
    fn from(vector: CircleAtOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6]] }
    }
}

impl std::convert::From<[f32; 6]> for CircleAtOrigin {
    fn from(array: [f32; 6]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], 0.0],
        }
    }
}

impl std::fmt::Debug for CircleAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("CircleAtOrigin")
            .field("e234", &self[0])
            .field("-e134", &self[1])
            .field("e124", &self[2])
            .field("e235", &self[3])
            .field("-e135", &self[4])
            .field("e125", &self[5])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct CircleOnOriginGroups {
    /// e234, -e134, e124
    g0: Simd32x3,
    /// -e145, -e245, -e345
    g1: Simd32x3,
}

#[derive(Clone, Copy)]
pub union CircleOnOrigin {
    groups: CircleOnOriginGroups,
    /// e234, -e134, e124, 0, -e145, -e245, -e345, 0
    elements: [f32; 8],
}

impl CircleOnOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e234: f32, neg_e134: f32, e124: f32, neg_e145: f32, neg_e245: f32, neg_e345: f32) -> Self {
        Self {
            elements: [e234, neg_e134, e124, 0.0, neg_e145, neg_e245, neg_e345, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x3) -> Self {
        Self {
            groups: CircleOnOriginGroups { g0, g1 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x3 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g1 }
    }
}

const CIRCLEONORIGIN_INDEX_REMAP: [usize; 6] = [0, 1, 2, 4, 5, 6];

impl std::ops::Index<usize> for CircleOnOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[CIRCLEONORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for CircleOnOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[CIRCLEONORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<CircleOnOrigin> for [f32; 6] {
    fn from(vector: CircleOnOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6]] }
    }
}

impl std::convert::From<[f32; 6]> for CircleOnOrigin {
    fn from(array: [f32; 6]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], 0.0],
        }
    }
}

impl std::fmt::Debug for CircleOnOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("CircleOnOrigin")
            .field("e234", &self[0])
            .field("-e134", &self[1])
            .field("e124", &self[2])
            .field("-e145", &self[3])
            .field("-e245", &self[4])
            .field("-e345", &self[5])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct CircleAligningOriginGroups {
    /// e234, -e134, e124
    g0: Simd32x3,
    /// -e145, -e245, -e345
    g1: Simd32x3,
    /// e235, -e135, e125
    g2: Simd32x3,
}

#[derive(Clone, Copy)]
pub union CircleAligningOrigin {
    groups: CircleAligningOriginGroups,
    /// e234, -e134, e124, 0, -e145, -e245, -e345, 0, e235, -e135, e125, 0
    elements: [f32; 12],
}

impl CircleAligningOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e234: f32, neg_e134: f32, e124: f32, neg_e145: f32, neg_e245: f32, neg_e345: f32, e235: f32, neg_e135: f32, e125: f32) -> Self {
        Self {
            elements: [e234, neg_e134, e124, 0.0, neg_e145, neg_e245, neg_e345, 0.0, e235, neg_e135, e125, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x3, g2: Simd32x3) -> Self {
        Self {
            groups: CircleAligningOriginGroups { g0, g1, g2 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x3 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g1 }
    }
    #[inline(always)]
    pub fn group2(&self) -> Simd32x3 {
        unsafe { self.groups.g2 }
    }
    #[inline(always)]
    pub fn group2_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g2 }
    }
}

const CIRCLEALIGNINGORIGIN_INDEX_REMAP: [usize; 9] = [0, 1, 2, 4, 5, 6, 8, 9, 10];

impl std::ops::Index<usize> for CircleAligningOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[CIRCLEALIGNINGORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for CircleAligningOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[CIRCLEALIGNINGORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<CircleAligningOrigin> for [f32; 9] {
    fn from(vector: CircleAligningOrigin) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6], vector.elements[8], vector.elements[9],
                vector.elements[10],
            ]
        }
    }
}

impl std::convert::From<[f32; 9]> for CircleAligningOrigin {
    fn from(array: [f32; 9]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], 0.0, array[6], array[7], array[8], 0.0],
        }
    }
}

impl std::fmt::Debug for CircleAligningOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("CircleAligningOrigin")
            .field("e234", &self[0])
            .field("-e134", &self[1])
            .field("e124", &self[2])
            .field("-e145", &self[3])
            .field("-e245", &self[4])
            .field("-e345", &self[5])
            .field("e235", &self[6])
            .field("-e135", &self[7])
            .field("e125", &self[8])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct CircleOrthogonalOriginGroups {
    /// e234, -e134, e124
    g0: Simd32x3,
    /// e235, -e135, e125, -e123
    g1: Simd32x4,
}

#[derive(Clone, Copy)]
pub union CircleOrthogonalOrigin {
    groups: CircleOrthogonalOriginGroups,
    /// e234, -e134, e124, 0, e235, -e135, e125, -e123
    elements: [f32; 8],
}

impl CircleOrthogonalOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e234: f32, neg_e134: f32, e124: f32, e235: f32, neg_e135: f32, e125: f32, neg_e123: f32) -> Self {
        Self {
            elements: [e234, neg_e134, e124, 0.0, e235, neg_e135, e125, neg_e123],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x4) -> Self {
        Self {
            groups: CircleOrthogonalOriginGroups { g0, g1 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x4 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g1 }
    }
}

const CIRCLEORTHOGONALORIGIN_INDEX_REMAP: [usize; 7] = [0, 1, 2, 4, 5, 6, 7];

impl std::ops::Index<usize> for CircleOrthogonalOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[CIRCLEORTHOGONALORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for CircleOrthogonalOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[CIRCLEORTHOGONALORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<CircleOrthogonalOrigin> for [f32; 7] {
    fn from(vector: CircleOrthogonalOrigin) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6], vector.elements[7],
            ]
        }
    }
}

impl std::convert::From<[f32; 7]> for CircleOrthogonalOrigin {
    fn from(array: [f32; 7]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], array[6]],
        }
    }
}

impl std::fmt::Debug for CircleOrthogonalOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("CircleOrthogonalOrigin")
            .field("e234", &self[0])
            .field("-e134", &self[1])
            .field("e124", &self[2])
            .field("e235", &self[3])
            .field("-e135", &self[4])
            .field("e125", &self[5])
            .field("-e123", &self[6])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct CircleAtInfinityGroups {
    /// -e145, -e245, -e345
    g0: Simd32x3,
    /// e235, -e135, e125, -e123
    g1: Simd32x4,
}

#[derive(Clone, Copy)]
pub union CircleAtInfinity {
    groups: CircleAtInfinityGroups,
    /// -e145, -e245, -e345, 0, e235, -e135, e125, -e123
    elements: [f32; 8],
}

impl CircleAtInfinity {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e145: f32, neg_e245: f32, neg_e345: f32, e235: f32, neg_e135: f32, e125: f32, neg_e123: f32) -> Self {
        Self {
            elements: [neg_e145, neg_e245, neg_e345, 0.0, e235, neg_e135, e125, neg_e123],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x4) -> Self {
        Self {
            groups: CircleAtInfinityGroups { g0, g1 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x4 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g1 }
    }
}

const CIRCLEATINFINITY_INDEX_REMAP: [usize; 7] = [0, 1, 2, 4, 5, 6, 7];

impl std::ops::Index<usize> for CircleAtInfinity {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[CIRCLEATINFINITY_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for CircleAtInfinity {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[CIRCLEATINFINITY_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<CircleAtInfinity> for [f32; 7] {
    fn from(vector: CircleAtInfinity) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6], vector.elements[7],
            ]
        }
    }
}

impl std::convert::From<[f32; 7]> for CircleAtInfinity {
    fn from(array: [f32; 7]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], array[6]],
        }
    }
}

impl std::fmt::Debug for CircleAtInfinity {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("CircleAtInfinity")
            .field("-e145", &self[0])
            .field("-e245", &self[1])
            .field("-e345", &self[2])
            .field("e235", &self[3])
            .field("-e135", &self[4])
            .field("e125", &self[5])
            .field("-e123", &self[6])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct NullCircleAtOriginGroups {
    /// e234, -e134, e124
    g0: Simd32x3,
}

#[derive(Clone, Copy)]
pub union NullCircleAtOrigin {
    groups: NullCircleAtOriginGroups,
    /// e234, -e134, e124, 0
    elements: [f32; 4],
}

impl NullCircleAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e234: f32, neg_e134: f32, e124: f32) -> Self {
        Self {
            elements: [e234, neg_e134, e124, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3) -> Self {
        Self {
            groups: NullCircleAtOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
}

const NULLCIRCLEATORIGIN_INDEX_REMAP: [usize; 3] = [0, 1, 2];

impl std::ops::Index<usize> for NullCircleAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[NULLCIRCLEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for NullCircleAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[NULLCIRCLEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<NullCircleAtOrigin> for [f32; 3] {
    fn from(vector: NullCircleAtOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2]] }
    }
}

impl std::convert::From<[f32; 3]> for NullCircleAtOrigin {
    fn from(array: [f32; 3]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0],
        }
    }
}

impl std::fmt::Debug for NullCircleAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("NullCircleAtOrigin")
            .field("e234", &self[0])
            .field("-e134", &self[1])
            .field("e124", &self[2])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct AntiDipoleOnOriginGroups {
    /// e234, -e134, e124, -e123
    g0: Simd32x4,
}

#[derive(Clone, Copy)]
pub union AntiDipoleOnOrigin {
    groups: AntiDipoleOnOriginGroups,
    /// e234, -e134, e124, -e123
    elements: [f32; 4],
}

impl AntiDipoleOnOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e234: f32, neg_e134: f32, e124: f32, neg_e123: f32) -> Self {
        Self {
            elements: [e234, neg_e134, e124, neg_e123],
        }
    }
    pub const fn from_groups(g0: Simd32x4) -> Self {
        Self {
            groups: AntiDipoleOnOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x4 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g0 }
    }
}

const ANTIDIPOLEONORIGIN_INDEX_REMAP: [usize; 4] = [0, 1, 2, 3];

impl std::ops::Index<usize> for AntiDipoleOnOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[ANTIDIPOLEONORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for AntiDipoleOnOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[ANTIDIPOLEONORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<AntiDipoleOnOrigin> for [f32; 4] {
    fn from(vector: AntiDipoleOnOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3]] }
    }
}

impl std::convert::From<[f32; 4]> for AntiDipoleOnOrigin {
    fn from(array: [f32; 4]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3]],
        }
    }
}

impl std::fmt::Debug for AntiDipoleOnOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("AntiDipoleOnOrigin")
            .field("e234", &self[0])
            .field("-e134", &self[1])
            .field("e124", &self[2])
            .field("-e123", &self[3])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct AntiFlatPointAtOriginGroups {
    /// -e123
    g0: f32,
}

#[derive(Clone, Copy)]
pub union AntiFlatPointAtOrigin {
    groups: AntiFlatPointAtOriginGroups,
    /// -e123
    elements: [f32; 1],
}

impl AntiFlatPointAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e123: f32) -> Self {
        Self { elements: [neg_e123] }
    }
    pub const fn from_groups(g0: f32) -> Self {
        Self {
            groups: AntiFlatPointAtOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> f32 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut f32 {
        unsafe { &mut self.groups.g0 }
    }
}

const ANTIFLATPOINTATORIGIN_INDEX_REMAP: [usize; 1] = [0];

impl std::ops::Index<usize> for AntiFlatPointAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[ANTIFLATPOINTATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for AntiFlatPointAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[ANTIFLATPOINTATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<AntiFlatPointAtOrigin> for [f32; 1] {
    fn from(vector: AntiFlatPointAtOrigin) -> Self {
        unsafe { [vector.elements[0]] }
    }
}

impl std::convert::From<[f32; 1]> for AntiFlatPointAtOrigin {
    fn from(array: [f32; 1]) -> Self {
        Self { elements: [array[0]] }
    }
}

impl std::fmt::Debug for AntiFlatPointAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.debug_struct("AntiFlatPointAtOrigin").field("-e123", &self[0]).finish()
    }
}

#[derive(Clone, Copy)]
struct LineGroups {
    /// -e145, -e245, -e345
    g0: Simd32x3,
    /// e235, -e135, e125
    g1: Simd32x3,
}

#[derive(Clone, Copy)]
pub union Line {
    groups: LineGroups,
    /// -e145, -e245, -e345, 0, e235, -e135, e125, 0
    elements: [f32; 8],
}

impl Line {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e145: f32, neg_e245: f32, neg_e345: f32, e235: f32, neg_e135: f32, e125: f32) -> Self {
        Self {
            elements: [neg_e145, neg_e245, neg_e345, 0.0, e235, neg_e135, e125, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x3) -> Self {
        Self { groups: LineGroups { g0, g1 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x3 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g1 }
    }
}

const LINE_INDEX_REMAP: [usize; 6] = [0, 1, 2, 4, 5, 6];

impl std::ops::Index<usize> for Line {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[LINE_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Line {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[LINE_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Line> for [f32; 6] {
    fn from(vector: Line) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6]] }
    }
}

impl std::convert::From<[f32; 6]> for Line {
    fn from(array: [f32; 6]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], 0.0],
        }
    }
}

impl std::fmt::Debug for Line {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("Line")
            .field("-e145", &self[0])
            .field("-e245", &self[1])
            .field("-e345", &self[2])
            .field("e235", &self[3])
            .field("-e135", &self[4])
            .field("e125", &self[5])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct LineAtOriginGroups {
    /// -e145, -e245, -e345
    g0: Simd32x3,
}

#[derive(Clone, Copy)]
pub union LineAtOrigin {
    groups: LineAtOriginGroups,
    /// -e145, -e245, -e345, 0
    elements: [f32; 4],
}

impl LineAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e145: f32, neg_e245: f32, neg_e345: f32) -> Self {
        Self {
            elements: [neg_e145, neg_e245, neg_e345, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3) -> Self {
        Self {
            groups: LineAtOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
}

const LINEATORIGIN_INDEX_REMAP: [usize; 3] = [0, 1, 2];

impl std::ops::Index<usize> for LineAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[LINEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for LineAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[LINEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<LineAtOrigin> for [f32; 3] {
    fn from(vector: LineAtOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2]] }
    }
}

impl std::convert::From<[f32; 3]> for LineAtOrigin {
    fn from(array: [f32; 3]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0],
        }
    }
}

impl std::fmt::Debug for LineAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("LineAtOrigin")
            .field("-e145", &self[0])
            .field("-e245", &self[1])
            .field("-e345", &self[2])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct LineAtInfinityGroups {
    /// e235, -e135, e125
    g0: Simd32x3,
}

#[derive(Clone, Copy)]
pub union LineAtInfinity {
    groups: LineAtInfinityGroups,
    /// e235, -e135, e125, 0
    elements: [f32; 4],
}

impl LineAtInfinity {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e235: f32, neg_e135: f32, e125: f32) -> Self {
        Self {
            elements: [e235, neg_e135, e125, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3) -> Self {
        Self {
            groups: LineAtInfinityGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
}

const LINEATINFINITY_INDEX_REMAP: [usize; 3] = [0, 1, 2];

impl std::ops::Index<usize> for LineAtInfinity {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[LINEATINFINITY_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for LineAtInfinity {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[LINEATINFINITY_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<LineAtInfinity> for [f32; 3] {
    fn from(vector: LineAtInfinity) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2]] }
    }
}

impl std::convert::From<[f32; 3]> for LineAtInfinity {
    fn from(array: [f32; 3]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0],
        }
    }
}

impl std::fmt::Debug for LineAtInfinity {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("LineAtInfinity")
            .field("e235", &self[0])
            .field("-e135", &self[1])
            .field("e125", &self[2])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct SphereGroups {
    /// e2345, -e1345, e1245
    g0: Simd32x3,
    /// e1234, -e1235
    g1: Simd32x2,
}

#[derive(Clone, Copy)]
pub union Sphere {
    groups: SphereGroups,
    /// e2345, -e1345, e1245, 0, e1234, -e1235, 0, 0
    elements: [f32; 8],
}

impl Sphere {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e2345: f32, neg_e1345: f32, e1245: f32, e1234: f32, neg_e1235: f32) -> Self {
        Self {
            elements: [e2345, neg_e1345, e1245, 0.0, e1234, neg_e1235, 0.0, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x2) -> Self {
        Self { groups: SphereGroups { g0, g1 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x2 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x2 {
        unsafe { &mut self.groups.g1 }
    }
}

const SPHERE_INDEX_REMAP: [usize; 5] = [0, 1, 2, 4, 5];

impl std::ops::Index<usize> for Sphere {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[SPHERE_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Sphere {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[SPHERE_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Sphere> for [f32; 5] {
    fn from(vector: Sphere) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5]] }
    }
}

impl std::convert::From<[f32; 5]> for Sphere {
    fn from(array: [f32; 5]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], 0.0, 0.0],
        }
    }
}

impl std::fmt::Debug for Sphere {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("Sphere")
            .field("e2345", &self[0])
            .field("-e1345", &self[1])
            .field("e1245", &self[2])
            .field("e1234", &self[3])
            .field("-e1235", &self[4])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct NullSphereAtOriginGroups {
    /// e1234
    g0: f32,
}

#[derive(Clone, Copy)]
pub union NullSphereAtOrigin {
    groups: NullSphereAtOriginGroups,
    /// e1234
    elements: [f32; 1],
}

impl NullSphereAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e1234: f32) -> Self {
        Self { elements: [e1234] }
    }
    pub const fn from_groups(g0: f32) -> Self {
        Self {
            groups: NullSphereAtOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> f32 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut f32 {
        unsafe { &mut self.groups.g0 }
    }
}

const NULLSPHEREATORIGIN_INDEX_REMAP: [usize; 1] = [0];

impl std::ops::Index<usize> for NullSphereAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[NULLSPHEREATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for NullSphereAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[NULLSPHEREATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<NullSphereAtOrigin> for [f32; 1] {
    fn from(vector: NullSphereAtOrigin) -> Self {
        unsafe { [vector.elements[0]] }
    }
}

impl std::convert::From<[f32; 1]> for NullSphereAtOrigin {
    fn from(array: [f32; 1]) -> Self {
        Self { elements: [array[0]] }
    }
}

impl std::fmt::Debug for NullSphereAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.debug_struct("NullSphereAtOrigin").field("e1234", &self[0]).finish()
    }
}

type PlaneAtInfinity = Horizon;

#[derive(Clone, Copy)]
struct HorizonGroups {
    /// -e1235
    g0: f32,
}

#[derive(Clone, Copy)]
pub union Horizon {
    groups: HorizonGroups,
    /// -e1235
    elements: [f32; 1],
}

impl Horizon {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e1235: f32) -> Self {
        Self { elements: [neg_e1235] }
    }
    pub const fn from_groups(g0: f32) -> Self {
        Self { groups: HorizonGroups { g0 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> f32 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut f32 {
        unsafe { &mut self.groups.g0 }
    }
}

const HORIZON_INDEX_REMAP: [usize; 1] = [0];

impl std::ops::Index<usize> for Horizon {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[HORIZON_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Horizon {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[HORIZON_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Horizon> for [f32; 1] {
    fn from(vector: Horizon) -> Self {
        unsafe { [vector.elements[0]] }
    }
}

impl std::convert::From<[f32; 1]> for Horizon {
    fn from(array: [f32; 1]) -> Self {
        Self { elements: [array[0]] }
    }
}

impl std::fmt::Debug for Horizon {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.debug_struct("Horizon").field("-e1235", &self[0]).finish()
    }
}

#[derive(Clone, Copy)]
struct SphereAtOriginGroups {
    /// e1234, -e1235
    g0: Simd32x2,
}

#[derive(Clone, Copy)]
pub union SphereAtOrigin {
    groups: SphereAtOriginGroups,
    /// e1234, -e1235, 0, 0
    elements: [f32; 4],
}

impl SphereAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e1234: f32, neg_e1235: f32) -> Self {
        Self {
            elements: [e1234, neg_e1235, 0.0, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x2) -> Self {
        Self {
            groups: SphereAtOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x2 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x2 {
        unsafe { &mut self.groups.g0 }
    }
}

const SPHEREATORIGIN_INDEX_REMAP: [usize; 2] = [0, 1];

impl std::ops::Index<usize> for SphereAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[SPHEREATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for SphereAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[SPHEREATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<SphereAtOrigin> for [f32; 2] {
    fn from(vector: SphereAtOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1]] }
    }
}

impl std::convert::From<[f32; 2]> for SphereAtOrigin {
    fn from(array: [f32; 2]) -> Self {
        Self {
            elements: [array[0], array[1], 0.0, 0.0],
        }
    }
}

impl std::fmt::Debug for SphereAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.debug_struct("SphereAtOrigin").field("e1234", &self[0]).field("-e1235", &self[1]).finish()
    }
}

#[derive(Clone, Copy)]
struct SphereOnOriginGroups {
    /// e2345, -e1345, e1245, e1234
    g0: Simd32x4,
}

#[derive(Clone, Copy)]
pub union SphereOnOrigin {
    groups: SphereOnOriginGroups,
    /// e2345, -e1345, e1245, e1234
    elements: [f32; 4],
}

impl SphereOnOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e2345: f32, neg_e1345: f32, e1245: f32, e1234: f32) -> Self {
        Self {
            elements: [e2345, neg_e1345, e1245, e1234],
        }
    }
    pub const fn from_groups(g0: Simd32x4) -> Self {
        Self {
            groups: SphereOnOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x4 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g0 }
    }
}

const SPHEREONORIGIN_INDEX_REMAP: [usize; 4] = [0, 1, 2, 3];

impl std::ops::Index<usize> for SphereOnOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[SPHEREONORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for SphereOnOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[SPHEREONORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<SphereOnOrigin> for [f32; 4] {
    fn from(vector: SphereOnOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3]] }
    }
}

impl std::convert::From<[f32; 4]> for SphereOnOrigin {
    fn from(array: [f32; 4]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3]],
        }
    }
}

impl std::fmt::Debug for SphereOnOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("SphereOnOrigin")
            .field("e2345", &self[0])
            .field("-e1345", &self[1])
            .field("e1245", &self[2])
            .field("e1234", &self[3])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct PlaneGroups {
    /// e2345, -e1345, e1245, -e1235
    g0: Simd32x4,
}

#[derive(Clone, Copy)]
pub union Plane {
    groups: PlaneGroups,
    /// e2345, -e1345, e1245, -e1235
    elements: [f32; 4],
}

impl Plane {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e2345: f32, neg_e1345: f32, e1245: f32, neg_e1235: f32) -> Self {
        Self {
            elements: [e2345, neg_e1345, e1245, neg_e1235],
        }
    }
    pub const fn from_groups(g0: Simd32x4) -> Self {
        Self { groups: PlaneGroups { g0 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x4 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g0 }
    }
}

const PLANE_INDEX_REMAP: [usize; 4] = [0, 1, 2, 3];

impl std::ops::Index<usize> for Plane {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[PLANE_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Plane {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[PLANE_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Plane> for [f32; 4] {
    fn from(vector: Plane) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3]] }
    }
}

impl std::convert::From<[f32; 4]> for Plane {
    fn from(array: [f32; 4]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3]],
        }
    }
}

impl std::fmt::Debug for Plane {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("Plane")
            .field("e2345", &self[0])
            .field("-e1345", &self[1])
            .field("e1245", &self[2])
            .field("-e1235", &self[3])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct PlaneAtOriginGroups {
    /// e2345, -e1345, e1245
    g0: Simd32x3,
}

#[derive(Clone, Copy)]
pub union PlaneAtOrigin {
    groups: PlaneAtOriginGroups,
    /// e2345, -e1345, e1245, 0
    elements: [f32; 4],
}

impl PlaneAtOrigin {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e2345: f32, neg_e1345: f32, e1245: f32) -> Self {
        Self {
            elements: [e2345, neg_e1345, e1245, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x3) -> Self {
        Self {
            groups: PlaneAtOriginGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
}

const PLANEATORIGIN_INDEX_REMAP: [usize; 3] = [0, 1, 2];

impl std::ops::Index<usize> for PlaneAtOrigin {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[PLANEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for PlaneAtOrigin {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[PLANEATORIGIN_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<PlaneAtOrigin> for [f32; 3] {
    fn from(vector: PlaneAtOrigin) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2]] }
    }
}

impl std::convert::From<[f32; 3]> for PlaneAtOrigin {
    fn from(array: [f32; 3]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0],
        }
    }
}

impl std::fmt::Debug for PlaneAtOrigin {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("PlaneAtOrigin")
            .field("e2345", &self[0])
            .field("-e1345", &self[1])
            .field("e1245", &self[2])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct MotorGroups {
    /// -e145, -e245, -e345, e12345
    g0: Simd32x4,
    /// e235, -e135, e125
    g1: Simd32x3,
}

#[derive(Clone, Copy)]
pub union Motor {
    groups: MotorGroups,
    /// -e145, -e245, -e345, e12345, e235, -e135, e125, 0
    elements: [f32; 8],
}

impl Motor {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e145: f32, neg_e245: f32, neg_e345: f32, e12345: f32, e235: f32, neg_e135: f32, e125: f32) -> Self {
        Self {
            elements: [neg_e145, neg_e245, neg_e345, e12345, e235, neg_e135, e125, 0.0],
        }
    }
    pub const fn from_groups(g0: Simd32x4, g1: Simd32x3) -> Self {
        Self { groups: MotorGroups { g0, g1 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x4 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x3 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g1 }
    }
}

const MOTOR_INDEX_REMAP: [usize; 7] = [0, 1, 2, 3, 4, 5, 6];

impl std::ops::Index<usize> for Motor {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[MOTOR_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Motor {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[MOTOR_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Motor> for [f32; 7] {
    fn from(vector: Motor) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3], vector.elements[4], vector.elements[5], vector.elements[6],
            ]
        }
    }
}

impl std::convert::From<[f32; 7]> for Motor {
    fn from(array: [f32; 7]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3], array[4], array[5], array[6], 0.0],
        }
    }
}

impl std::fmt::Debug for Motor {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("Motor")
            .field("-e145", &self[0])
            .field("-e245", &self[1])
            .field("-e345", &self[2])
            .field("e12345", &self[3])
            .field("e235", &self[4])
            .field("-e135", &self[5])
            .field("e125", &self[6])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct RotorGroups {
    /// -e145, -e245, -e345, e12345
    g0: Simd32x4,
}

#[derive(Clone, Copy)]
pub union Rotor {
    groups: RotorGroups,
    /// -e145, -e245, -e345, e12345
    elements: [f32; 4],
}

impl Rotor {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(neg_e145: f32, neg_e245: f32, neg_e345: f32, e12345: f32) -> Self {
        Self {
            elements: [neg_e145, neg_e245, neg_e345, e12345],
        }
    }
    pub const fn from_groups(g0: Simd32x4) -> Self {
        Self { groups: RotorGroups { g0 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x4 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g0 }
    }
}

const ROTOR_INDEX_REMAP: [usize; 4] = [0, 1, 2, 3];

impl std::ops::Index<usize> for Rotor {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[ROTOR_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Rotor {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[ROTOR_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Rotor> for [f32; 4] {
    fn from(vector: Rotor) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3]] }
    }
}

impl std::convert::From<[f32; 4]> for Rotor {
    fn from(array: [f32; 4]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3]],
        }
    }
}

impl std::fmt::Debug for Rotor {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("Rotor")
            .field("-e145", &self[0])
            .field("-e245", &self[1])
            .field("-e345", &self[2])
            .field("e12345", &self[3])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct TranslatorGroups {
    /// e235, -e135, e125, e12345
    g0: Simd32x4,
}

#[derive(Clone, Copy)]
pub union Translator {
    groups: TranslatorGroups,
    /// e235, -e135, e125, e12345
    elements: [f32; 4],
}

impl Translator {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e235: f32, neg_e135: f32, e125: f32, e12345: f32) -> Self {
        Self {
            elements: [e235, neg_e135, e125, e12345],
        }
    }
    pub const fn from_groups(g0: Simd32x4) -> Self {
        Self { groups: TranslatorGroups { g0 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x4 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g0 }
    }
}

const TRANSLATOR_INDEX_REMAP: [usize; 4] = [0, 1, 2, 3];

impl std::ops::Index<usize> for Translator {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[TRANSLATOR_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Translator {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[TRANSLATOR_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Translator> for [f32; 4] {
    fn from(vector: Translator) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3]] }
    }
}

impl std::convert::From<[f32; 4]> for Translator {
    fn from(array: [f32; 4]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3]],
        }
    }
}

impl std::fmt::Debug for Translator {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("Translator")
            .field("e235", &self[0])
            .field("-e135", &self[1])
            .field("e125", &self[2])
            .field("e12345", &self[3])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct FlectorGroups {
    /// e15, e25, e35, e45
    g0: Simd32x4,
    /// e2345, -e1345, e1245, -e1235
    g1: Simd32x4,
}

#[derive(Clone, Copy)]
pub union Flector {
    groups: FlectorGroups,
    /// e15, e25, e35, e45, e2345, -e1345, e1245, -e1235
    elements: [f32; 8],
}

impl Flector {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e15: f32, e25: f32, e35: f32, e45: f32, e2345: f32, neg_e1345: f32, e1245: f32, neg_e1235: f32) -> Self {
        Self {
            elements: [e15, e25, e35, e45, e2345, neg_e1345, e1245, neg_e1235],
        }
    }
    pub const fn from_groups(g0: Simd32x4, g1: Simd32x4) -> Self {
        Self { groups: FlectorGroups { g0, g1 } }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x4 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x4 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g1 }
    }
}

const FLECTOR_INDEX_REMAP: [usize; 8] = [0, 1, 2, 3, 4, 5, 6, 7];

impl std::ops::Index<usize> for Flector {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[FLECTOR_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Flector {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[FLECTOR_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Flector> for [f32; 8] {
    fn from(vector: Flector) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3], vector.elements[4], vector.elements[5], vector.elements[6], vector.elements[7],
            ]
        }
    }
}

impl std::convert::From<[f32; 8]> for Flector {
    fn from(array: [f32; 8]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3], array[4], array[5], array[6], array[7]],
        }
    }
}

impl std::fmt::Debug for Flector {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("Flector")
            .field("e15", &self[0])
            .field("e25", &self[1])
            .field("e35", &self[2])
            .field("e45", &self[3])
            .field("e2345", &self[4])
            .field("-e1345", &self[5])
            .field("e1245", &self[6])
            .field("-e1235", &self[7])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct TransflectorGroups {
    /// e15, e25, e35
    g0: Simd32x3,
    /// e2345, -e1345, e1245, -e1235
    g1: Simd32x4,
}

#[derive(Clone, Copy)]
pub union Transflector {
    groups: TransflectorGroups,
    /// e15, e25, e35, 0, e2345, -e1345, e1245, -e1235
    elements: [f32; 8],
}

impl Transflector {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e15: f32, e25: f32, e35: f32, e2345: f32, neg_e1345: f32, e1245: f32, neg_e1235: f32) -> Self {
        Self {
            elements: [e15, e25, e35, 0.0, e2345, neg_e1345, e1245, neg_e1235],
        }
    }
    pub const fn from_groups(g0: Simd32x3, g1: Simd32x4) -> Self {
        Self {
            groups: TransflectorGroups { g0, g1 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x3 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x4 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g1 }
    }
}

const TRANSFLECTOR_INDEX_REMAP: [usize; 7] = [0, 1, 2, 4, 5, 6, 7];

impl std::ops::Index<usize> for Transflector {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[TRANSFLECTOR_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Transflector {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[TRANSFLECTOR_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Transflector> for [f32; 7] {
    fn from(vector: Transflector) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[4], vector.elements[5], vector.elements[6], vector.elements[7],
            ]
        }
    }
}

impl std::convert::From<[f32; 7]> for Transflector {
    fn from(array: [f32; 7]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], 0.0, array[3], array[4], array[5], array[6]],
        }
    }
}

impl std::fmt::Debug for Transflector {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("Transflector")
            .field("e15", &self[0])
            .field("e25", &self[1])
            .field("e35", &self[2])
            .field("e2345", &self[3])
            .field("-e1345", &self[4])
            .field("e1245", &self[5])
            .field("-e1235", &self[6])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct FlectorAtInfinityGroups {
    /// e15, e25, e35, -e1235
    g0: Simd32x4,
}

#[derive(Clone, Copy)]
pub union FlectorAtInfinity {
    groups: FlectorAtInfinityGroups,
    /// e15, e25, e35, -e1235
    elements: [f32; 4],
}

impl FlectorAtInfinity {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e15: f32, e25: f32, e35: f32, neg_e1235: f32) -> Self {
        Self {
            elements: [e15, e25, e35, neg_e1235],
        }
    }
    pub const fn from_groups(g0: Simd32x4) -> Self {
        Self {
            groups: FlectorAtInfinityGroups { g0 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x4 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g0 }
    }
}

const FLECTORATINFINITY_INDEX_REMAP: [usize; 4] = [0, 1, 2, 3];

impl std::ops::Index<usize> for FlectorAtInfinity {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[FLECTORATINFINITY_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for FlectorAtInfinity {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[FLECTORATINFINITY_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<FlectorAtInfinity> for [f32; 4] {
    fn from(vector: FlectorAtInfinity) -> Self {
        unsafe { [vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3]] }
    }
}

impl std::convert::From<[f32; 4]> for FlectorAtInfinity {
    fn from(array: [f32; 4]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3]],
        }
    }
}

impl std::fmt::Debug for FlectorAtInfinity {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("FlectorAtInfinity")
            .field("e15", &self[0])
            .field("e25", &self[1])
            .field("e35", &self[2])
            .field("-e1235", &self[3])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct DilatorGroups {
    /// e12345
    g0: f32,
    /// e234, -e134, e124
    g1: Simd32x3,
    /// -e145, -e245, -e345
    g2: Simd32x3,
    /// e235, -e135, e125, -e123
    g3: Simd32x4,
}

#[derive(Clone, Copy)]
pub union Dilator {
    groups: DilatorGroups,
    /// e12345, e234, -e134, e124, 0, -e145, -e245, -e345, 0, e235, -e135, e125, -e123
    elements: [f32; 13],
}

impl Dilator {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(e12345: f32, e234: f32, neg_e134: f32, e124: f32, neg_e145: f32, neg_e245: f32, neg_e345: f32, e235: f32, neg_e135: f32, e125: f32, neg_e123: f32) -> Self {
        Self {
            elements: [e12345, e234, neg_e134, e124, 0.0, neg_e145, neg_e245, neg_e345, 0.0, e235, neg_e135, e125, neg_e123],
        }
    }
    pub const fn from_groups(g0: f32, g1: Simd32x3, g2: Simd32x3, g3: Simd32x4) -> Self {
        Self {
            groups: DilatorGroups { g0, g1, g2, g3 },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> f32 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut f32 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x3 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g1 }
    }
    #[inline(always)]
    pub fn group2(&self) -> Simd32x3 {
        unsafe { self.groups.g2 }
    }
    #[inline(always)]
    pub fn group2_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g2 }
    }
    #[inline(always)]
    pub fn group3(&self) -> Simd32x4 {
        unsafe { self.groups.g3 }
    }
    #[inline(always)]
    pub fn group3_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g3 }
    }
}

const DILATOR_INDEX_REMAP: [usize; 11] = [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12];

impl std::ops::Index<usize> for Dilator {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[DILATOR_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for Dilator {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[DILATOR_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<Dilator> for [f32; 11] {
    fn from(vector: Dilator) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[2], vector.elements[3], vector.elements[5], vector.elements[6], vector.elements[7], vector.elements[9],
                vector.elements[10], vector.elements[11], vector.elements[12],
            ]
        }
    }
}

impl std::convert::From<[f32; 11]> for Dilator {
    fn from(array: [f32; 11]) -> Self {
        Self {
            elements: [array[0], array[1], array[2], array[3], 0.0, array[4], array[5], array[6], 0.0, array[7], array[8], array[9], array[10]],
        }
    }
}

impl std::fmt::Debug for Dilator {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("Dilator")
            .field("e12345", &self[0])
            .field("e234", &self[1])
            .field("-e134", &self[2])
            .field("e124", &self[3])
            .field("-e145", &self[4])
            .field("-e245", &self[5])
            .field("-e345", &self[6])
            .field("e235", &self[7])
            .field("-e135", &self[8])
            .field("e125", &self[9])
            .field("-e123", &self[10])
            .finish()
    }
}

#[derive(Clone, Copy)]
struct MultiVectorGroups {
    /// 1, e12345
    g0: Simd32x2,
    /// e1, e2, e3
    g1: Simd32x3,
    /// e4, e5
    g2: Simd32x2,
    /// -e14, -e24, -e34, e45
    g3: Simd32x4,
    /// e23, -e13, e12
    g4: Simd32x3,
    /// e15, e25, e35
    g5: Simd32x3,
    /// e234, -e134, e124
    g6: Simd32x3,
    /// -e145, -e245, -e345
    g7: Simd32x3,
    /// e235, -e135, e125, -e123
    g8: Simd32x4,
    /// e2345, -e1345, e1245
    g9: Simd32x3,
    /// e1234, -e1235
    g10: Simd32x2,
}

#[derive(Clone, Copy)]
pub union MultiVector {
    groups: MultiVectorGroups,
    /// 1, e12345, 0, 0, e1, e2, e3, 0, e4, e5, 0, 0, -e14, -e24, -e34, e45, e23, -e13, e12, 0, e15, e25, e35, 0, e234, -e134, e124, 0, -e145, -e245, -e345, 0, e235, -e135, e125, -e123, e2345, -e1345, e1245, 0, e1234, -e1235, 0, 0
    elements: [f32; 44],
}

impl MultiVector {
    #[allow(clippy::too_many_arguments)]
    pub const fn new(
        scalar: f32,
        e12345: f32,
        e1: f32,
        e2: f32,
        e3: f32,
        e4: f32,
        e5: f32,
        neg_e14: f32,
        neg_e24: f32,
        neg_e34: f32,
        e45: f32,
        e23: f32,
        neg_e13: f32,
        e12: f32,
        e15: f32,
        e25: f32,
        e35: f32,
        e234: f32,
        neg_e134: f32,
        e124: f32,
        neg_e145: f32,
        neg_e245: f32,
        neg_e345: f32,
        e235: f32,
        neg_e135: f32,
        e125: f32,
        neg_e123: f32,
        e2345: f32,
        neg_e1345: f32,
        e1245: f32,
        e1234: f32,
        neg_e1235: f32,
    ) -> Self {
        Self {
            elements: [
                scalar, e12345, 0.0, 0.0, e1, e2, e3, 0.0, e4, e5, 0.0, 0.0, neg_e14, neg_e24, neg_e34, e45, e23, neg_e13, e12, 0.0, e15, e25, e35, 0.0, e234, neg_e134, e124, 0.0,
                neg_e145, neg_e245, neg_e345, 0.0, e235, neg_e135, e125, neg_e123, e2345, neg_e1345, e1245, 0.0, e1234, neg_e1235, 0.0, 0.0,
            ],
        }
    }
    pub const fn from_groups(
        g0: Simd32x2,
        g1: Simd32x3,
        g2: Simd32x2,
        g3: Simd32x4,
        g4: Simd32x3,
        g5: Simd32x3,
        g6: Simd32x3,
        g7: Simd32x3,
        g8: Simd32x4,
        g9: Simd32x3,
        g10: Simd32x2,
    ) -> Self {
        Self {
            groups: MultiVectorGroups {
                g0,
                g1,
                g2,
                g3,
                g4,
                g5,
                g6,
                g7,
                g8,
                g9,
                g10,
            },
        }
    }
    #[inline(always)]
    pub fn group0(&self) -> Simd32x2 {
        unsafe { self.groups.g0 }
    }
    #[inline(always)]
    pub fn group0_mut(&mut self) -> &mut Simd32x2 {
        unsafe { &mut self.groups.g0 }
    }
    #[inline(always)]
    pub fn group1(&self) -> Simd32x3 {
        unsafe { self.groups.g1 }
    }
    #[inline(always)]
    pub fn group1_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g1 }
    }
    #[inline(always)]
    pub fn group2(&self) -> Simd32x2 {
        unsafe { self.groups.g2 }
    }
    #[inline(always)]
    pub fn group2_mut(&mut self) -> &mut Simd32x2 {
        unsafe { &mut self.groups.g2 }
    }
    #[inline(always)]
    pub fn group3(&self) -> Simd32x4 {
        unsafe { self.groups.g3 }
    }
    #[inline(always)]
    pub fn group3_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g3 }
    }
    #[inline(always)]
    pub fn group4(&self) -> Simd32x3 {
        unsafe { self.groups.g4 }
    }
    #[inline(always)]
    pub fn group4_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g4 }
    }
    #[inline(always)]
    pub fn group5(&self) -> Simd32x3 {
        unsafe { self.groups.g5 }
    }
    #[inline(always)]
    pub fn group5_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g5 }
    }
    #[inline(always)]
    pub fn group6(&self) -> Simd32x3 {
        unsafe { self.groups.g6 }
    }
    #[inline(always)]
    pub fn group6_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g6 }
    }
    #[inline(always)]
    pub fn group7(&self) -> Simd32x3 {
        unsafe { self.groups.g7 }
    }
    #[inline(always)]
    pub fn group7_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g7 }
    }
    #[inline(always)]
    pub fn group8(&self) -> Simd32x4 {
        unsafe { self.groups.g8 }
    }
    #[inline(always)]
    pub fn group8_mut(&mut self) -> &mut Simd32x4 {
        unsafe { &mut self.groups.g8 }
    }
    #[inline(always)]
    pub fn group9(&self) -> Simd32x3 {
        unsafe { self.groups.g9 }
    }
    #[inline(always)]
    pub fn group9_mut(&mut self) -> &mut Simd32x3 {
        unsafe { &mut self.groups.g9 }
    }
    #[inline(always)]
    pub fn group10(&self) -> Simd32x2 {
        unsafe { self.groups.g10 }
    }
    #[inline(always)]
    pub fn group10_mut(&mut self) -> &mut Simd32x2 {
        unsafe { &mut self.groups.g10 }
    }
}

const MULTIVECTOR_INDEX_REMAP: [usize; 32] = [0, 1, 4, 5, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41];

impl std::ops::Index<usize> for MultiVector {
    type Output = f32;

    fn index(&self, index: usize) -> &Self::Output {
        unsafe { &self.elements[MULTIVECTOR_INDEX_REMAP[index]] }
    }
}

impl std::ops::IndexMut<usize> for MultiVector {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        unsafe { &mut self.elements[MULTIVECTOR_INDEX_REMAP[index]] }
    }
}

impl std::convert::From<MultiVector> for [f32; 32] {
    fn from(vector: MultiVector) -> Self {
        unsafe {
            [
                vector.elements[0], vector.elements[1], vector.elements[4], vector.elements[5], vector.elements[6], vector.elements[8], vector.elements[9], vector.elements[12],
                vector.elements[13], vector.elements[14], vector.elements[15], vector.elements[16], vector.elements[17], vector.elements[18], vector.elements[20],
                vector.elements[21], vector.elements[22], vector.elements[24], vector.elements[25], vector.elements[26], vector.elements[28], vector.elements[29],
                vector.elements[30], vector.elements[32], vector.elements[33], vector.elements[34], vector.elements[35], vector.elements[36], vector.elements[37],
                vector.elements[38], vector.elements[40], vector.elements[41],
            ]
        }
    }
}

impl std::convert::From<[f32; 32]> for MultiVector {
    fn from(array: [f32; 32]) -> Self {
        Self {
            elements: [
                array[0], array[1], 0.0, 0.0, array[2], array[3], array[4], 0.0, array[5], array[6], 0.0, 0.0, array[7], array[8], array[9], array[10], array[11], array[12],
                array[13], 0.0, array[14], array[15], array[16], 0.0, array[17], array[18], array[19], 0.0, array[20], array[21], array[22], 0.0, array[23], array[24], array[25],
                array[26], array[27], array[28], array[29], 0.0, array[30], array[31], 0.0, 0.0,
            ],
        }
    }
}

impl std::fmt::Debug for MultiVector {
    fn fmt(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter
            .debug_struct("MultiVector")
            .field("1", &self[0])
            .field("e12345", &self[1])
            .field("e1", &self[2])
            .field("e2", &self[3])
            .field("e3", &self[4])
            .field("e4", &self[5])
            .field("e5", &self[6])
            .field("-e14", &self[7])
            .field("-e24", &self[8])
            .field("-e34", &self[9])
            .field("e45", &self[10])
            .field("e23", &self[11])
            .field("-e13", &self[12])
            .field("e12", &self[13])
            .field("e15", &self[14])
            .field("e25", &self[15])
            .field("e35", &self[16])
            .field("e234", &self[17])
            .field("-e134", &self[18])
            .field("e124", &self[19])
            .field("-e145", &self[20])
            .field("-e245", &self[21])
            .field("-e345", &self[22])
            .field("e235", &self[23])
            .field("-e135", &self[24])
            .field("e125", &self[25])
            .field("-e123", &self[26])
            .field("e2345", &self[27])
            .field("-e1345", &self[28])
            .field("e1245", &self[29])
            .field("e1234", &self[30])
            .field("-e1235", &self[31])
            .finish()
    }
}

impl One for AntiCircleOnOrigin {
    fn one() -> Self {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
            },
        }
    }
}

impl One for AntiDipoleOnOrigin {
    fn one() -> Self {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl One for AntiFlatPointAtOrigin {
    fn one() -> Self {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups { g0: 0.0 },
        }
    }
}

impl One for AntiLineAtOrigin {
    fn one() -> Self {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl One for AntiPlane {
    fn one() -> Self {
        AntiPlane {
            groups: AntiPlaneGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl One for AntiPlaneAtOrigin {
    fn one() -> Self {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl One for AntiScalar {
    fn one() -> Self {
        AntiScalar {
            groups: AntiScalarGroups { g0: 0.0 },
        }
    }
}

impl One for AntiSphereOnOrigin {
    fn one() -> Self {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl One for Circle {
    fn one() -> Self {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x4::from(0.0),
            },
        }
    }
}

impl One for CircleAligningOrigin {
    fn one() -> Self {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
            },
        }
    }
}

impl One for CircleAtInfinity {
    fn one() -> Self {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0),
            },
        }
    }
}

impl One for CircleAtOrigin {
    fn one() -> Self {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
            },
        }
    }
}

impl One for CircleOnOrigin {
    fn one() -> Self {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
            },
        }
    }
}

impl One for CircleOrthogonalOrigin {
    fn one() -> Self {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0),
            },
        }
    }
}

impl One for Dilator {
    fn one() -> Self {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0,
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl One for Dipole {
    fn one() -> Self {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x4::from(0.0),
            },
        }
    }
}

impl One for DipoleAligningOrigin {
    fn one() -> Self {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0),
            },
        }
    }
}

impl One for DipoleAtInfinity {
    fn one() -> Self {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0),
            },
        }
    }
}

impl One for DipoleAtOrigin {
    fn one() -> Self {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
            },
        }
    }
}

impl One for DipoleOnOrigin {
    fn one() -> Self {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl One for DipoleOrthogonalOrigin {
    fn one() -> Self {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
            },
        }
    }
}

impl One for DualNum {
    fn one() -> Self {
        DualNum {
            groups: DualNumGroups { g0: Simd32x2::from([1.0, 0.0]) },
        }
    }
}

impl One for FlatPoint {
    fn one() -> Self {
        FlatPoint {
            groups: FlatPointGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl One for FlatPointAtInfinity {
    fn one() -> Self {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl One for FlatPointAtOrigin {
    fn one() -> Self {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups { g0: 0.0 },
        }
    }
}

impl One for Flector {
    fn one() -> Self {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(0.0),
                g1: Simd32x4::from(0.0),
            },
        }
    }
}

impl One for FlectorAtInfinity {
    fn one() -> Self {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl One for Horizon {
    fn one() -> Self {
        Horizon {
            groups: HorizonGroups { g0: 0.0 },
        }
    }
}

impl One for Infinity {
    fn one() -> Self {
        Infinity {
            groups: InfinityGroups { g0: 0.0 },
        }
    }
}

impl One for Line {
    fn one() -> Self {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
            },
        }
    }
}

impl One for LineAtInfinity {
    fn one() -> Self {
        LineAtInfinity {
            groups: LineAtInfinityGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl One for LineAtOrigin {
    fn one() -> Self {
        LineAtOrigin {
            groups: LineAtOriginGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl One for Motor {
    fn one() -> Self {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(0.0),
                g1: Simd32x3::from(0.0),
            },
        }
    }
}

impl One for MultiVector {
    fn one() -> Self {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([1.0, 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl One for NullCircleAtOrigin {
    fn one() -> Self {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl One for NullDipoleAtOrigin {
    fn one() -> Self {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl One for NullSphereAtOrigin {
    fn one() -> Self {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups { g0: 0.0 },
        }
    }
}

impl One for Origin {
    fn one() -> Self {
        Origin { groups: OriginGroups { g0: 0.0 } }
    }
}

impl One for Plane {
    fn one() -> Self {
        Plane {
            groups: PlaneGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl One for PlaneAtOrigin {
    fn one() -> Self {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl One for Rotor {
    fn one() -> Self {
        Rotor {
            groups: RotorGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl One for RoundPoint {
    fn one() -> Self {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x2::from(0.0),
            },
        }
    }
}

impl One for RoundPointAtOrigin {
    fn one() -> Self {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups { g0: Simd32x2::from(0.0) },
        }
    }
}

impl One for Scalar {
    fn one() -> Self {
        Scalar { groups: ScalarGroups { g0: 1.0 } }
    }
}

impl One for Sphere {
    fn one() -> Self {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x2::from(0.0),
            },
        }
    }
}

impl One for SphereAtOrigin {
    fn one() -> Self {
        SphereAtOrigin {
            groups: SphereAtOriginGroups { g0: Simd32x2::from(0.0) },
        }
    }
}

impl One for SphereOnOrigin {
    fn one() -> Self {
        SphereOnOrigin {
            groups: SphereOnOriginGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl One for Transflector {
    fn one() -> Self {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0),
            },
        }
    }
}

impl One for Translator {
    fn one() -> Self {
        Translator {
            groups: TranslatorGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl Unit for AntiCircleOnOrigin {
    fn unit() -> Self {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x3::from(1.0),
            },
        }
    }
}

impl Unit for AntiDipoleOnOrigin {
    fn unit() -> Self {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups { g0: Simd32x4::from(1.0) },
        }
    }
}

impl Unit for AntiFlatPointAtOrigin {
    fn unit() -> Self {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups { g0: 1.0 },
        }
    }
}

impl Unit for AntiLineAtOrigin {
    fn unit() -> Self {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups { g0: Simd32x3::from(1.0) },
        }
    }
}

impl Unit for AntiPlane {
    fn unit() -> Self {
        AntiPlane {
            groups: AntiPlaneGroups { g0: Simd32x4::from(1.0) },
        }
    }
}

impl Unit for AntiPlaneAtOrigin {
    fn unit() -> Self {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups { g0: Simd32x3::from(1.0) },
        }
    }
}

impl Unit for AntiScalar {
    fn unit() -> Self {
        AntiScalar {
            groups: AntiScalarGroups { g0: 1.0 },
        }
    }
}

impl Unit for AntiSphereOnOrigin {
    fn unit() -> Self {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups { g0: Simd32x4::from(1.0) },
        }
    }
}

impl Unit for Circle {
    fn unit() -> Self {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x3::from(1.0),
                g2: Simd32x4::from(1.0),
            },
        }
    }
}

impl Unit for CircleAligningOrigin {
    fn unit() -> Self {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x3::from(1.0),
                g2: Simd32x3::from(1.0),
            },
        }
    }
}

impl Unit for CircleAtInfinity {
    fn unit() -> Self {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x4::from(1.0),
            },
        }
    }
}

impl Unit for CircleAtOrigin {
    fn unit() -> Self {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x3::from(1.0),
            },
        }
    }
}

impl Unit for CircleOnOrigin {
    fn unit() -> Self {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x3::from(1.0),
            },
        }
    }
}

impl Unit for CircleOrthogonalOrigin {
    fn unit() -> Self {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x4::from(1.0),
            },
        }
    }
}

impl Unit for Dilator {
    fn unit() -> Self {
        Dilator {
            groups: DilatorGroups {
                g0: 1.0,
                g1: Simd32x3::from(1.0),
                g2: Simd32x3::from(1.0),
                g3: Simd32x4::from(1.0),
            },
        }
    }
}

impl Unit for Dipole {
    fn unit() -> Self {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x3::from(1.0),
                g2: Simd32x4::from(1.0),
            },
        }
    }
}

impl Unit for DipoleAligningOrigin {
    fn unit() -> Self {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x4::from(1.0),
            },
        }
    }
}

impl Unit for DipoleAtInfinity {
    fn unit() -> Self {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x4::from(1.0),
            },
        }
    }
}

impl Unit for DipoleAtOrigin {
    fn unit() -> Self {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x3::from(1.0),
            },
        }
    }
}

impl Unit for DipoleOnOrigin {
    fn unit() -> Self {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups { g0: Simd32x4::from(1.0) },
        }
    }
}

impl Unit for DipoleOrthogonalOrigin {
    fn unit() -> Self {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x3::from(1.0),
                g2: Simd32x3::from(1.0),
            },
        }
    }
}

impl Unit for DualNum {
    fn unit() -> Self {
        DualNum {
            groups: DualNumGroups { g0: Simd32x2::from(1.0) },
        }
    }
}

impl Unit for FlatPoint {
    fn unit() -> Self {
        FlatPoint {
            groups: FlatPointGroups { g0: Simd32x4::from(1.0) },
        }
    }
}

impl Unit for FlatPointAtInfinity {
    fn unit() -> Self {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups { g0: Simd32x3::from(1.0) },
        }
    }
}

impl Unit for FlatPointAtOrigin {
    fn unit() -> Self {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups { g0: 1.0 },
        }
    }
}

impl Unit for Flector {
    fn unit() -> Self {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(1.0),
                g1: Simd32x4::from(1.0),
            },
        }
    }
}

impl Unit for FlectorAtInfinity {
    fn unit() -> Self {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups { g0: Simd32x4::from(1.0) },
        }
    }
}

impl Unit for Horizon {
    fn unit() -> Self {
        Horizon {
            groups: HorizonGroups { g0: 1.0 },
        }
    }
}

impl Unit for Infinity {
    fn unit() -> Self {
        Infinity {
            groups: InfinityGroups { g0: 1.0 },
        }
    }
}

impl Unit for Line {
    fn unit() -> Self {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x3::from(1.0),
            },
        }
    }
}

impl Unit for LineAtInfinity {
    fn unit() -> Self {
        LineAtInfinity {
            groups: LineAtInfinityGroups { g0: Simd32x3::from(1.0) },
        }
    }
}

impl Unit for LineAtOrigin {
    fn unit() -> Self {
        LineAtOrigin {
            groups: LineAtOriginGroups { g0: Simd32x3::from(1.0) },
        }
    }
}

impl Unit for Motor {
    fn unit() -> Self {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(1.0),
                g1: Simd32x3::from(1.0),
            },
        }
    }
}

impl Unit for MultiVector {
    fn unit() -> Self {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(1.0),
                g1: Simd32x3::from(1.0),
                g2: Simd32x2::from(1.0),
                g3: Simd32x4::from(1.0),
                g4: Simd32x3::from(1.0),
                g5: Simd32x3::from(1.0),
                g6: Simd32x3::from(1.0),
                g7: Simd32x3::from(1.0),
                g8: Simd32x4::from(1.0),
                g9: Simd32x3::from(1.0),
                g10: Simd32x2::from(1.0),
            },
        }
    }
}

impl Unit for NullCircleAtOrigin {
    fn unit() -> Self {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups { g0: Simd32x3::from(1.0) },
        }
    }
}

impl Unit for NullDipoleAtOrigin {
    fn unit() -> Self {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups { g0: Simd32x3::from(1.0) },
        }
    }
}

impl Unit for NullSphereAtOrigin {
    fn unit() -> Self {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups { g0: 1.0 },
        }
    }
}

impl Unit for Origin {
    fn unit() -> Self {
        Origin { groups: OriginGroups { g0: 1.0 } }
    }
}

impl Unit for Plane {
    fn unit() -> Self {
        Plane {
            groups: PlaneGroups { g0: Simd32x4::from(1.0) },
        }
    }
}

impl Unit for PlaneAtOrigin {
    fn unit() -> Self {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups { g0: Simd32x3::from(1.0) },
        }
    }
}

impl Unit for Rotor {
    fn unit() -> Self {
        Rotor {
            groups: RotorGroups { g0: Simd32x4::from(1.0) },
        }
    }
}

impl Unit for RoundPoint {
    fn unit() -> Self {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x2::from(1.0),
            },
        }
    }
}

impl Unit for RoundPointAtOrigin {
    fn unit() -> Self {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups { g0: Simd32x2::from(1.0) },
        }
    }
}

impl Unit for Scalar {
    fn unit() -> Self {
        Scalar { groups: ScalarGroups { g0: 1.0 } }
    }
}

impl Unit for Sphere {
    fn unit() -> Self {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x2::from(1.0),
            },
        }
    }
}

impl Unit for SphereAtOrigin {
    fn unit() -> Self {
        SphereAtOrigin {
            groups: SphereAtOriginGroups { g0: Simd32x2::from(1.0) },
        }
    }
}

impl Unit for SphereOnOrigin {
    fn unit() -> Self {
        SphereOnOrigin {
            groups: SphereOnOriginGroups { g0: Simd32x4::from(1.0) },
        }
    }
}

impl Unit for Transflector {
    fn unit() -> Self {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(1.0),
                g1: Simd32x4::from(1.0),
            },
        }
    }
}

impl Unit for Translator {
    fn unit() -> Self {
        Translator {
            groups: TranslatorGroups { g0: Simd32x4::from(1.0) },
        }
    }
}

impl Zero for AntiCircleOnOrigin {
    fn zero() -> Self {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
            },
        }
    }
}

impl Zero for AntiDipoleOnOrigin {
    fn zero() -> Self {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl Zero for AntiFlatPointAtOrigin {
    fn zero() -> Self {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups { g0: 0.0 },
        }
    }
}

impl Zero for AntiLineAtOrigin {
    fn zero() -> Self {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl Zero for AntiPlane {
    fn zero() -> Self {
        AntiPlane {
            groups: AntiPlaneGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl Zero for AntiPlaneAtOrigin {
    fn zero() -> Self {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl Zero for AntiScalar {
    fn zero() -> Self {
        AntiScalar {
            groups: AntiScalarGroups { g0: 0.0 },
        }
    }
}

impl Zero for AntiSphereOnOrigin {
    fn zero() -> Self {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl Zero for Circle {
    fn zero() -> Self {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x4::from(0.0),
            },
        }
    }
}

impl Zero for CircleAligningOrigin {
    fn zero() -> Self {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
            },
        }
    }
}

impl Zero for CircleAtInfinity {
    fn zero() -> Self {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0),
            },
        }
    }
}

impl Zero for CircleAtOrigin {
    fn zero() -> Self {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
            },
        }
    }
}

impl Zero for CircleOnOrigin {
    fn zero() -> Self {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
            },
        }
    }
}

impl Zero for CircleOrthogonalOrigin {
    fn zero() -> Self {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0),
            },
        }
    }
}

impl Zero for Dilator {
    fn zero() -> Self {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0,
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Zero for Dipole {
    fn zero() -> Self {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x4::from(0.0),
            },
        }
    }
}

impl Zero for DipoleAligningOrigin {
    fn zero() -> Self {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0),
            },
        }
    }
}

impl Zero for DipoleAtInfinity {
    fn zero() -> Self {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0),
            },
        }
    }
}

impl Zero for DipoleAtOrigin {
    fn zero() -> Self {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
            },
        }
    }
}

impl Zero for DipoleOnOrigin {
    fn zero() -> Self {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl Zero for DipoleOrthogonalOrigin {
    fn zero() -> Self {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
            },
        }
    }
}

impl Zero for DualNum {
    fn zero() -> Self {
        DualNum {
            groups: DualNumGroups { g0: Simd32x2::from(0.0) },
        }
    }
}

impl Zero for FlatPoint {
    fn zero() -> Self {
        FlatPoint {
            groups: FlatPointGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl Zero for FlatPointAtInfinity {
    fn zero() -> Self {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl Zero for FlatPointAtOrigin {
    fn zero() -> Self {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups { g0: 0.0 },
        }
    }
}

impl Zero for Flector {
    fn zero() -> Self {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(0.0),
                g1: Simd32x4::from(0.0),
            },
        }
    }
}

impl Zero for FlectorAtInfinity {
    fn zero() -> Self {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl Zero for Horizon {
    fn zero() -> Self {
        Horizon {
            groups: HorizonGroups { g0: 0.0 },
        }
    }
}

impl Zero for Infinity {
    fn zero() -> Self {
        Infinity {
            groups: InfinityGroups { g0: 0.0 },
        }
    }
}

impl Zero for Line {
    fn zero() -> Self {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x3::from(0.0),
            },
        }
    }
}

impl Zero for LineAtInfinity {
    fn zero() -> Self {
        LineAtInfinity {
            groups: LineAtInfinityGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl Zero for LineAtOrigin {
    fn zero() -> Self {
        LineAtOrigin {
            groups: LineAtOriginGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl Zero for Motor {
    fn zero() -> Self {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(0.0),
                g1: Simd32x3::from(0.0),
            },
        }
    }
}

impl Zero for MultiVector {
    fn zero() -> Self {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Zero for NullCircleAtOrigin {
    fn zero() -> Self {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl Zero for NullDipoleAtOrigin {
    fn zero() -> Self {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl Zero for NullSphereAtOrigin {
    fn zero() -> Self {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups { g0: 0.0 },
        }
    }
}

impl Zero for Origin {
    fn zero() -> Self {
        Origin { groups: OriginGroups { g0: 0.0 } }
    }
}

impl Zero for Plane {
    fn zero() -> Self {
        Plane {
            groups: PlaneGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl Zero for PlaneAtOrigin {
    fn zero() -> Self {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups { g0: Simd32x3::from(0.0) },
        }
    }
}

impl Zero for Rotor {
    fn zero() -> Self {
        Rotor {
            groups: RotorGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl Zero for RoundPoint {
    fn zero() -> Self {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x2::from(0.0),
            },
        }
    }
}

impl Zero for RoundPointAtOrigin {
    fn zero() -> Self {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups { g0: Simd32x2::from(0.0) },
        }
    }
}

impl Zero for Scalar {
    fn zero() -> Self {
        Scalar { groups: ScalarGroups { g0: 0.0 } }
    }
}

impl Zero for Sphere {
    fn zero() -> Self {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x2::from(0.0),
            },
        }
    }
}

impl Zero for SphereAtOrigin {
    fn zero() -> Self {
        SphereAtOrigin {
            groups: SphereAtOriginGroups { g0: Simd32x2::from(0.0) },
        }
    }
}

impl Zero for SphereOnOrigin {
    fn zero() -> Self {
        SphereOnOrigin {
            groups: SphereOnOriginGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl Zero for Transflector {
    fn zero() -> Self {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0),
            },
        }
    }
}

impl Zero for Translator {
    fn zero() -> Self {
        Translator {
            groups: TranslatorGroups { g0: Simd32x4::from(0.0) },
        }
    }
}

impl Neg for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn neg(self) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn neg(self) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn neg(self) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups { g0: -self.group0() },
        }
    }
}

impl Neg for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn neg(self) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for AntiPlane {
    type Output = AntiPlane;

    fn neg(self) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn neg(self) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for AntiScalar {
    type Output = AntiScalar;

    fn neg(self) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups { g0: -self.group0() },
        }
    }
}

impl Neg for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn neg(self) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for Circle {
    type Output = Circle;

    fn neg(self) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x3::from(-1.0),
                g2: self.group2() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn neg(self) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x3::from(-1.0),
                g2: self.group2() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn neg(self) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn neg(self) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn neg(self) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn neg(self) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for Dilator {
    type Output = Dilator;

    fn neg(self) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: -self.group0(),
                g1: self.group1() * Simd32x3::from(-1.0),
                g2: self.group2() * Simd32x3::from(-1.0),
                g3: self.group3() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for Dipole {
    type Output = Dipole;

    fn neg(self) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x3::from(-1.0),
                g2: self.group2() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn neg(self) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn neg(self) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn neg(self) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn neg(self) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn neg(self) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x3::from(-1.0),
                g2: self.group2() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for DualNum {
    type Output = DualNum;

    fn neg(self) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() * Simd32x2::from(-1.0),
            },
        }
    }
}

impl Neg for FlatPoint {
    type Output = FlatPoint;

    fn neg(self) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn neg(self) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn neg(self) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups { g0: -self.group0() },
        }
    }
}

impl Neg for Flector {
    type Output = Flector;

    fn neg(self) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(-1.0),
                g1: self.group1() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn neg(self) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for Horizon {
    type Output = Horizon;

    fn neg(self) -> Horizon {
        Horizon {
            groups: HorizonGroups { g0: -self.group0() },
        }
    }
}

impl Neg for Infinity {
    type Output = Infinity;

    fn neg(self) -> Infinity {
        Infinity {
            groups: InfinityGroups { g0: -self.group0() },
        }
    }
}

impl Neg for Line {
    type Output = Line;

    fn neg(self) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for LineAtInfinity {
    type Output = LineAtInfinity;

    fn neg(self) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for LineAtOrigin {
    type Output = LineAtOrigin;

    fn neg(self) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for Motor {
    type Output = Motor;

    fn neg(self) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() * Simd32x4::from(-1.0),
                g1: self.group1() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for MultiVector {
    type Output = MultiVector;

    fn neg(self) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(-1.0),
                g1: self.group1() * Simd32x3::from(-1.0),
                g2: self.group2() * Simd32x2::from(-1.0),
                g3: self.group3() * Simd32x4::from(-1.0),
                g4: self.group4() * Simd32x3::from(-1.0),
                g5: self.group5() * Simd32x3::from(-1.0),
                g6: self.group6() * Simd32x3::from(-1.0),
                g7: self.group7() * Simd32x3::from(-1.0),
                g8: self.group8() * Simd32x4::from(-1.0),
                g9: self.group9() * Simd32x3::from(-1.0),
                g10: self.group10() * Simd32x2::from(-1.0),
            },
        }
    }
}

impl Neg for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn neg(self) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn neg(self) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn neg(self) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups { g0: -self.group0() },
        }
    }
}

impl Neg for Origin {
    type Output = Origin;

    fn neg(self) -> Origin {
        Origin {
            groups: OriginGroups { g0: -self.group0() },
        }
    }
}

impl Neg for Plane {
    type Output = Plane;

    fn neg(self) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn neg(self) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
            },
        }
    }
}

impl Neg for Rotor {
    type Output = Rotor;

    fn neg(self) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for RoundPoint {
    type Output = RoundPoint;

    fn neg(self) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x2::from(-1.0),
            },
        }
    }
}

impl Neg for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn neg(self) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(-1.0),
            },
        }
    }
}

impl Neg for Scalar {
    type Output = Scalar;

    fn neg(self) -> Scalar {
        Scalar {
            groups: ScalarGroups { g0: -self.group0() },
        }
    }
}

impl Neg for Sphere {
    type Output = Sphere;

    fn neg(self) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x2::from(-1.0),
            },
        }
    }
}

impl Neg for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn neg(self) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() * Simd32x2::from(-1.0),
            },
        }
    }
}

impl Neg for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn neg(self) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for Transflector {
    type Output = Transflector;

    fn neg(self) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() * Simd32x3::from(-1.0),
                g1: self.group1() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Neg for Translator {
    type Output = Translator;

    fn neg(self) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() * Simd32x4::from(-1.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn add(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<AntiCircleOnOrigin> for AntiCircleOnOrigin {
    fn add_assign(&mut self, other: AntiCircleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiDipoleOnOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn add(self, other: AntiLineAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
            },
        }
    }
}

impl AddAssign<AntiLineAtOrigin> for AntiCircleOnOrigin {
    fn add_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiPlane> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for AntiCircleOnOrigin {
    type Output = Dipole;

    fn add(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: other.group2(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for AntiCircleOnOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for AntiCircleOnOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for AntiCircleOnOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: DipoleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for AntiCircleOnOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: other.group2(),
            },
        }
    }
}

impl Add<DualNum> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for AntiCircleOnOrigin {
    type Output = Dipole;

    fn add(self, other: FlatPoint) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: other.group0(),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for AntiCircleOnOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: FlatPointAtInfinity) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: other.group0(),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for AntiCircleOnOrigin {
    type Output = Dipole;

    fn add(self, other: FlatPointAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Flector> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group3(),
                g4: self.group1() + other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn add(self, other: NullDipoleAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<NullDipoleAtOrigin> for AntiCircleOnOrigin {
    fn add_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullSphereAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn add(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<AntiDipoleOnOrigin> for AntiDipoleOnOrigin {
    fn add_assign(&mut self, other: AntiDipoleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiFlatPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn add(self, other: AntiFlatPointAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<AntiFlatPointAtOrigin> for AntiDipoleOnOrigin {
    fn add_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiLineAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for AntiDipoleOnOrigin {
    type Output = Dilator;

    fn add(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for AntiDipoleOnOrigin {
    type Output = Circle;

    fn add(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = Circle;

    fn add(self, other: CircleAligningOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for AntiDipoleOnOrigin {
    type Output = Circle;

    fn add(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: other.group0(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for AntiDipoleOnOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: CircleAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for AntiDipoleOnOrigin {
    type Output = Circle;

    fn add(self, other: CircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group1(),
            },
        }
    }
}

impl Add<Dilator> for AntiDipoleOnOrigin {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group3(),
            },
        }
    }
}

impl Add<Dipole> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for AntiDipoleOnOrigin {
    type Output = Circle;

    fn add(self, other: Line) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: other.group0(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<LineAtInfinity> for AntiDipoleOnOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: LineAtInfinity) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<LineAtOrigin> for AntiDipoleOnOrigin {
    type Output = Circle;

    fn add(self, other: LineAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: other.group0(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Motor> for AntiDipoleOnOrigin {
    type Output = Dilator;

    fn add(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<MultiVector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group6(),
                g7: other.group7(),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn add(self, other: NullCircleAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<NullCircleAtOrigin> for AntiDipoleOnOrigin {
    fn add_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullDipoleAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for AntiDipoleOnOrigin {
    type Output = Dilator;

    fn add(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<RoundPoint> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for AntiDipoleOnOrigin {
    type Output = Dilator;

    fn add(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn add(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn add(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<AntiFlatPointAtOrigin> for AntiFlatPointAtOrigin {
    fn add_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiLineAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for AntiFlatPointAtOrigin {
    type Output = Dilator;

    fn add(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for AntiFlatPointAtOrigin {
    type Output = Circle;

    fn add(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for AntiFlatPointAtOrigin {
    type Output = Circle;

    fn add(self, other: CircleAligningOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for AntiFlatPointAtOrigin {
    type Output = CircleAtInfinity;

    fn add(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for AntiFlatPointAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: CircleAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = Circle;

    fn add(self, other: CircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for AntiFlatPointAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group1(),
            },
        }
    }
}

impl Add<Dilator> for AntiFlatPointAtOrigin {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group3(),
            },
        }
    }
}

impl Add<Dipole> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for AntiFlatPointAtOrigin {
    type Output = CircleAtInfinity;

    fn add(self, other: Line) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<LineAtInfinity> for AntiFlatPointAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: LineAtInfinity) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<LineAtOrigin> for AntiFlatPointAtOrigin {
    type Output = CircleAtInfinity;

    fn add(self, other: LineAtOrigin) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Add<Motor> for AntiFlatPointAtOrigin {
    type Output = Dilator;

    fn add(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<MultiVector> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn add(self, other: NullCircleAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for AntiFlatPointAtOrigin {
    type Output = Dilator;

    fn add(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Add<RoundPoint> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for AntiFlatPointAtOrigin {
    type Output = Dilator;

    fn add(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for AntiLineAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn add(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn add(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<AntiLineAtOrigin> for AntiLineAtOrigin {
    fn add_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiPlane> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for AntiLineAtOrigin {
    type Output = Dipole;

    fn add(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: other.group2(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for AntiLineAtOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for AntiLineAtOrigin {
    type Output = DipoleAtInfinity;

    fn add(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for AntiLineAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: DipoleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for AntiLineAtOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for AntiLineAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: other.group2(),
            },
        }
    }
}

impl Add<DualNum> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for AntiLineAtOrigin {
    type Output = DipoleAtInfinity;

    fn add(self, other: FlatPoint) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0(),
                g1: other.group0(),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for AntiLineAtOrigin {
    type Output = DipoleAtInfinity;

    fn add(self, other: FlatPointAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0(),
                g1: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for AntiLineAtOrigin {
    type Output = DipoleAtInfinity;

    fn add(self, other: FlatPointAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Flector> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: self.group0() + other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for AntiLineAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn add(self, other: NullDipoleAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for AntiPlane {
    type Output = AntiPlane;

    fn add(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<AntiPlane> for AntiPlane {
    fn add_assign(&mut self, other: AntiPlane) {
        *self = (*self).add(other);
    }
}

impl Add<AntiPlaneAtOrigin> for AntiPlane {
    type Output = AntiPlane;

    fn add(self, other: AntiPlaneAtOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<AntiPlaneAtOrigin> for AntiPlane {
    fn add_assign(&mut self, other: AntiPlaneAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiScalar> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for AntiPlane {
    type Output = RoundPoint;

    fn add(self, other: AntiSphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()[3]]) + Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Circle> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for AntiPlane {
    type Output = AntiPlane;

    fn add(self, other: Infinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<Infinity> for AntiPlane {
    fn add_assign(&mut self, other: Infinity) {
        *self = (*self).add(other);
    }
}

impl Add<Line> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
                g2: Simd32x2::from([0.0, self.group0()[3]]) + other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for AntiPlane {
    type Output = RoundPoint;

    fn add(self, other: Origin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()[3]]) + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Plane> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for AntiPlane {
    type Output = RoundPoint;

    fn add(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: Simd32x2::from([0.0, self.group0()[3]]) + other.group1(),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for AntiPlane {
    type Output = RoundPoint;

    fn add(self, other: RoundPointAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()[3]]) + other.group0(),
            },
        }
    }
}

impl Add<Scalar> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for AntiPlane {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for AntiPlaneAtOrigin {
    type Output = AntiPlane;

    fn add(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn add(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<AntiPlaneAtOrigin> for AntiPlaneAtOrigin {
    fn add_assign(&mut self, other: AntiPlaneAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiScalar> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for AntiPlaneAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn add(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<Circle> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for AntiPlaneAtOrigin {
    type Output = AntiPlane;

    fn add(self, other: Infinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Line> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for AntiPlaneAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn add(self, other: Origin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Plane> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for AntiPlaneAtOrigin {
    type Output = RoundPoint;

    fn add(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for AntiPlaneAtOrigin {
    type Output = RoundPoint;

    fn add(self, other: RoundPointAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0(),
                g1: other.group0(),
            },
        }
    }
}

impl Add<Scalar> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for AntiScalar {
    type Output = Dilator;

    fn add(self, other: AntiDipoleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for AntiScalar {
    type Output = Dilator;

    fn add(self, other: AntiFlatPointAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for AntiScalar {
    type Output = AntiScalar;

    fn add(self, other: AntiScalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<AntiScalar> for AntiScalar {
    fn add_assign(&mut self, other: AntiScalar) {
        *self = (*self).add(other);
    }
}

impl Add<AntiSphereOnOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for AntiScalar {
    type Output = Dilator;

    fn add(self, other: Circle) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: other.group1(),
                g3: other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for AntiScalar {
    type Output = Dilator;

    fn add(self, other: CircleAligningOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for AntiScalar {
    type Output = Dilator;

    fn add(self, other: CircleAtInfinity) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for AntiScalar {
    type Output = Dilator;

    fn add(self, other: CircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for AntiScalar {
    type Output = Dilator;

    fn add(self, other: CircleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for AntiScalar {
    type Output = Dilator;

    fn add(self, other: CircleOrthogonalOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: Simd32x3::from(0.0),
                g3: other.group1(),
            },
        }
    }
}

impl Add<Dilator> for AntiScalar {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
            },
        }
    }
}

impl Add<Dipole> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for AntiScalar {
    type Output = DualNum;

    fn add(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from([0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<FlatPoint> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for AntiScalar {
    type Output = Motor;

    fn add(self, other: Line) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: other.group1(),
            },
        }
    }
}

impl Add<LineAtInfinity> for AntiScalar {
    type Output = Translator;

    fn add(self, other: LineAtInfinity) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<LineAtOrigin> for AntiScalar {
    type Output = Rotor;

    fn add(self, other: LineAtOrigin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<Motor> for AntiScalar {
    type Output = Motor;

    fn add(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<MultiVector> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]) + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for AntiScalar {
    type Output = Dilator;

    fn add(self, other: NullCircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for AntiScalar {
    type Output = Rotor;

    fn add(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<RoundPoint> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for AntiScalar {
    type Output = DualNum;

    fn add(self, other: Scalar) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from([0.0, self.group0()]) + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Sphere> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for AntiScalar {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for AntiScalar {
    type Output = Translator;

    fn add(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for AntiSphereOnOrigin {
    type Output = RoundPoint;

    fn add(self, other: AntiPlane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([self.group0()[3], 0.0]) + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn add(self, other: AntiPlaneAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<AntiPlaneAtOrigin> for AntiSphereOnOrigin {
    fn add_assign(&mut self, other: AntiPlaneAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiScalar> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn add(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<AntiSphereOnOrigin> for AntiSphereOnOrigin {
    fn add_assign(&mut self, other: AntiSphereOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Circle> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for AntiSphereOnOrigin {
    type Output = RoundPoint;

    fn add(self, other: Infinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([self.group0()[3], 0.0]) + Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Line> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
                g2: Simd32x2::from([self.group0()[3], 0.0]) + other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn add(self, other: Origin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<Origin> for AntiSphereOnOrigin {
    fn add_assign(&mut self, other: Origin) {
        *self = (*self).add(other);
    }
}

impl Add<Plane> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for AntiSphereOnOrigin {
    type Output = RoundPoint;

    fn add(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: Simd32x2::from([self.group0()[3], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for AntiSphereOnOrigin {
    type Output = RoundPoint;

    fn add(self, other: RoundPointAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([self.group0()[3], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<Scalar> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Circle {
    type Output = Circle;

    fn add(self, other: AntiDipoleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1(),
                g2: self.group2() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl AddAssign<AntiDipoleOnOrigin> for Circle {
    fn add_assign(&mut self, other: AntiDipoleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiFlatPointAtOrigin> for Circle {
    type Output = Circle;

    fn add(self, other: AntiFlatPointAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<AntiFlatPointAtOrigin> for Circle {
    fn add_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiLineAtOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for Circle {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for Circle {
    type Output = Dilator;

    fn add(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: self.group1(),
                g3: self.group2(),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for Circle {
    type Output = Circle;

    fn add(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: self.group2() + other.group2(),
            },
        }
    }
}

impl AddAssign<Circle> for Circle {
    fn add_assign(&mut self, other: Circle) {
        *self = (*self).add(other);
    }
}

impl Add<CircleAligningOrigin> for Circle {
    type Output = Circle;

    fn add(self, other: CircleAligningOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: self.group2() + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<CircleAligningOrigin> for Circle {
    fn add_assign(&mut self, other: CircleAligningOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleAtInfinity> for Circle {
    type Output = Circle;

    fn add(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2() + other.group1(),
            },
        }
    }
}

impl AddAssign<CircleAtInfinity> for Circle {
    fn add_assign(&mut self, other: CircleAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<CircleAtOrigin> for Circle {
    type Output = Circle;

    fn add(self, other: CircleAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: self.group2() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<CircleAtOrigin> for Circle {
    fn add_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleOnOrigin> for Circle {
    type Output = Circle;

    fn add(self, other: CircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl AddAssign<CircleOnOrigin> for Circle {
    fn add_assign(&mut self, other: CircleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleOrthogonalOrigin> for Circle {
    type Output = Circle;

    fn add(self, other: CircleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: self.group2() + other.group1(),
            },
        }
    }
}

impl AddAssign<CircleOrthogonalOrigin> for Circle {
    fn add_assign(&mut self, other: CircleOrthogonalOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Dilator> for Circle {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: self.group1() + other.group2(),
                g3: self.group2() + other.group3(),
            },
        }
    }
}

impl Add<Dipole> for Circle {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Circle {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for Circle {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for Circle {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Circle {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for Circle {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Circle {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for Circle {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for Circle {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for Circle {
    type Output = Circle;

    fn add(self, other: Line) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<Line> for Circle {
    fn add_assign(&mut self, other: Line) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtInfinity> for Circle {
    type Output = Circle;

    fn add(self, other: LineAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<LineAtInfinity> for Circle {
    fn add_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtOrigin> for Circle {
    type Output = Circle;

    fn add(self, other: LineAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2(),
            },
        }
    }
}

impl AddAssign<LineAtOrigin> for Circle {
    fn add_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Motor> for Circle {
    type Output = Dilator;

    fn add(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group2() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<MultiVector> for Circle {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: self.group0() + other.group6(),
                g7: self.group1() + other.group7(),
                g8: self.group2() + other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Circle {
    type Output = Circle;

    fn add(self, other: NullCircleAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl AddAssign<NullCircleAtOrigin> for Circle {
    fn add_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullDipoleAtOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Circle {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for Circle {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for Circle {
    type Output = Dilator;

    fn add(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group2(),
            },
        }
    }
}

impl Add<RoundPoint> for Circle {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for Circle {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for Circle {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Circle {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Circle {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for Circle {
    type Output = Dilator;

    fn add(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: self.group1(),
                g3: self.group2() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for CircleAligningOrigin {
    type Output = Circle;

    fn add(self, other: AntiDipoleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for CircleAligningOrigin {
    type Output = Circle;

    fn add(self, other: AntiFlatPointAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for CircleAligningOrigin {
    type Output = Dilator;

    fn add(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for CircleAligningOrigin {
    type Output = Circle;

    fn add(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: self.group2() + other.group2(),
            },
        }
    }
}

impl AddAssign<CircleAligningOrigin> for CircleAligningOrigin {
    fn add_assign(&mut self, other: CircleAligningOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleAtInfinity> for CircleAligningOrigin {
    type Output = Circle;

    fn add(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: self.group2() + other.group1(),
            },
        }
    }
}

impl AddAssign<CircleAtOrigin> for CircleAligningOrigin {
    fn add_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleOnOrigin> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl AddAssign<CircleOnOrigin> for CircleAligningOrigin {
    fn add_assign(&mut self, other: CircleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = Circle;

    fn add(self, other: CircleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<Dilator> for CircleAligningOrigin {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: self.group1() + other.group2(),
                g3: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + other.group3(),
            },
        }
    }
}

impl Add<Dipole> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: Line) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2() + other.group1(),
            },
        }
    }
}

impl AddAssign<Line> for CircleAligningOrigin {
    fn add_assign(&mut self, other: Line) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtInfinity> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: LineAtInfinity) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + other.group0(),
            },
        }
    }
}

impl AddAssign<LineAtInfinity> for CircleAligningOrigin {
    fn add_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtOrigin> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: LineAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2(),
            },
        }
    }
}

impl AddAssign<LineAtOrigin> for CircleAligningOrigin {
    fn add_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Motor> for CircleAligningOrigin {
    type Output = Dilator;

    fn add(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<MultiVector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: self.group0() + other.group6(),
                g7: self.group1() + other.group7(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: NullCircleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl AddAssign<NullCircleAtOrigin> for CircleAligningOrigin {
    fn add_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullDipoleAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for CircleAligningOrigin {
    type Output = Dilator;

    fn add(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<RoundPoint> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for CircleAligningOrigin {
    type Output = Dilator;

    fn add(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for CircleAtInfinity {
    type Output = Circle;

    fn add(self, other: AntiDipoleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0(),
                g2: self.group1() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn add(self, other: AntiFlatPointAtOrigin) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<AntiFlatPointAtOrigin> for CircleAtInfinity {
    fn add_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiLineAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for CircleAtInfinity {
    type Output = Dilator;

    fn add(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: self.group1(),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for CircleAtInfinity {
    type Output = Circle;

    fn add(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: self.group1() + other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for CircleAtInfinity {
    type Output = Circle;

    fn add(self, other: CircleAligningOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: self.group1() + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn add(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<CircleAtInfinity> for CircleAtInfinity {
    fn add_assign(&mut self, other: CircleAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<CircleAtOrigin> for CircleAtInfinity {
    type Output = Circle;

    fn add(self, other: CircleAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: self.group1() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for CircleAtInfinity {
    type Output = Circle;

    fn add(self, other: CircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for CircleAtInfinity {
    type Output = Circle;

    fn add(self, other: CircleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: self.group1() + other.group1(),
            },
        }
    }
}

impl Add<Dilator> for CircleAtInfinity {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: self.group0() + other.group2(),
                g3: self.group1() + other.group3(),
            },
        }
    }
}

impl Add<Dipole> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn add(self, other: Line) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<Line> for CircleAtInfinity {
    fn add_assign(&mut self, other: Line) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtInfinity> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn add(self, other: LineAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<LineAtInfinity> for CircleAtInfinity {
    fn add_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtOrigin> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn add(self, other: LineAtOrigin) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<LineAtOrigin> for CircleAtInfinity {
    fn add_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Motor> for CircleAtInfinity {
    type Output = Dilator;

    fn add(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group1() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<MultiVector> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: self.group0() + other.group7(),
                g8: self.group1() + other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for CircleAtInfinity {
    type Output = Circle;

    fn add(self, other: NullCircleAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for CircleAtInfinity {
    type Output = Dilator;

    fn add(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group1(),
            },
        }
    }
}

impl Add<RoundPoint> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for CircleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for CircleAtInfinity {
    type Output = Dilator;

    fn add(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: self.group1() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for CircleAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: AntiDipoleOnOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for CircleAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: AntiFlatPointAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for CircleAtOrigin {
    type Output = Dilator;

    fn add(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for CircleAtOrigin {
    type Output = Circle;

    fn add(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for CircleAtOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: self.group1() + other.group2(),
            },
        }
    }
}

impl Add<CircleAtInfinity> for CircleAtOrigin {
    type Output = Circle;

    fn add(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn add(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<CircleAtOrigin> for CircleAtOrigin {
    fn add_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleOnOrigin> for CircleAtOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for CircleAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<Dilator> for CircleAtOrigin {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group3(),
            },
        }
    }
}

impl Add<Dipole> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for CircleAtOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: Line) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: self.group1() + other.group1(),
            },
        }
    }
}

impl Add<LineAtInfinity> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn add(self, other: LineAtInfinity) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
            },
        }
    }
}

impl AddAssign<LineAtInfinity> for CircleAtOrigin {
    fn add_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtOrigin> for CircleAtOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: LineAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<Motor> for CircleAtOrigin {
    type Output = Dilator;

    fn add(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<MultiVector> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: self.group0() + other.group6(),
                g7: other.group7(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn add(self, other: NullCircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<NullCircleAtOrigin> for CircleAtOrigin {
    fn add_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullDipoleAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for CircleAtOrigin {
    type Output = Dilator;

    fn add(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<RoundPoint> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for CircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for CircleAtOrigin {
    type Output = Dilator;

    fn add(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for CircleOnOrigin {
    type Output = Circle;

    fn add(self, other: AntiDipoleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for CircleOnOrigin {
    type Output = Circle;

    fn add(self, other: AntiFlatPointAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for CircleOnOrigin {
    type Output = Dilator;

    fn add(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for CircleOnOrigin {
    type Output = Circle;

    fn add(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for CircleOnOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: other.group2(),
            },
        }
    }
}

impl Add<CircleAtInfinity> for CircleOnOrigin {
    type Output = Circle;

    fn add(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for CircleOnOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<CircleOnOrigin> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn add(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<CircleOnOrigin> for CircleOnOrigin {
    fn add_assign(&mut self, other: CircleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleOrthogonalOrigin> for CircleOnOrigin {
    type Output = Circle;

    fn add(self, other: CircleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<Dilator> for CircleOnOrigin {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: self.group1() + other.group2(),
                g3: other.group3(),
            },
        }
    }
}

impl Add<Dipole> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for CircleOnOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: Line) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<LineAtInfinity> for CircleOnOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: LineAtInfinity) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: other.group0(),
            },
        }
    }
}

impl Add<LineAtOrigin> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn add(self, other: LineAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
            },
        }
    }
}

impl AddAssign<LineAtOrigin> for CircleOnOrigin {
    fn add_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Motor> for CircleOnOrigin {
    type Output = Dilator;

    fn add(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<MultiVector> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: self.group0() + other.group6(),
                g7: self.group1() + other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn add(self, other: NullCircleAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<NullCircleAtOrigin> for CircleOnOrigin {
    fn add_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullDipoleAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for CircleOnOrigin {
    type Output = Dilator;

    fn add(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for CircleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for CircleOnOrigin {
    type Output = Dilator;

    fn add(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: AntiDipoleOnOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl AddAssign<AntiDipoleOnOrigin> for CircleOrthogonalOrigin {
    fn add_assign(&mut self, other: AntiDipoleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiFlatPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: AntiFlatPointAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<AntiFlatPointAtOrigin> for CircleOrthogonalOrigin {
    fn add_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiLineAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for CircleOrthogonalOrigin {
    type Output = Dilator;

    fn add(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: Simd32x3::from(0.0),
                g3: self.group1(),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for CircleOrthogonalOrigin {
    type Output = Circle;

    fn add(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: self.group1() + other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = Circle;

    fn add(self, other: CircleAligningOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: self.group1() + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for CircleOrthogonalOrigin {
    type Output = Circle;

    fn add(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: self.group1() + other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: CircleAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<CircleAtOrigin> for CircleOrthogonalOrigin {
    fn add_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = Circle;

    fn add(self, other: CircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<CircleOrthogonalOrigin> for CircleOrthogonalOrigin {
    fn add_assign(&mut self, other: CircleOrthogonalOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Dilator> for CircleOrthogonalOrigin {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: other.group2(),
                g3: self.group1() + other.group3(),
            },
        }
    }
}

impl Add<Dipole> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for CircleOrthogonalOrigin {
    type Output = Circle;

    fn add(self, other: Line) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: self.group1() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<LineAtInfinity> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: LineAtInfinity) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<LineAtInfinity> for CircleOrthogonalOrigin {
    fn add_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtOrigin> for CircleOrthogonalOrigin {
    type Output = Circle;

    fn add(self, other: LineAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<Motor> for CircleOrthogonalOrigin {
    type Output = Dilator;

    fn add(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group1() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<MultiVector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: self.group0() + other.group6(),
                g7: other.group7(),
                g8: self.group1() + other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: NullCircleAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<NullCircleAtOrigin> for CircleOrthogonalOrigin {
    fn add_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullDipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for CircleOrthogonalOrigin {
    type Output = Dilator;

    fn add(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group1(),
            },
        }
    }
}

impl Add<RoundPoint> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for CircleOrthogonalOrigin {
    type Output = Dilator;

    fn add(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from(0.0),
                g3: self.group1() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Dilator {
    type Output = Dilator;

    fn add(self, other: AntiDipoleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl AddAssign<AntiDipoleOnOrigin> for Dilator {
    fn add_assign(&mut self, other: AntiDipoleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiFlatPointAtOrigin> for Dilator {
    type Output = Dilator;

    fn add(self, other: AntiFlatPointAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<AntiFlatPointAtOrigin> for Dilator {
    fn add_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiLineAtOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for Dilator {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for Dilator {
    type Output = Dilator;

    fn add(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
            },
        }
    }
}

impl AddAssign<AntiScalar> for Dilator {
    fn add_assign(&mut self, other: AntiScalar) {
        *self = (*self).add(other);
    }
}

impl Add<AntiSphereOnOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for Dilator {
    type Output = Dilator;

    fn add(self, other: Circle) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2() + other.group1(),
                g3: self.group3() + other.group2(),
            },
        }
    }
}

impl AddAssign<Circle> for Dilator {
    fn add_assign(&mut self, other: Circle) {
        *self = (*self).add(other);
    }
}

impl Add<CircleAligningOrigin> for Dilator {
    type Output = Dilator;

    fn add(self, other: CircleAligningOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2() + other.group1(),
                g3: self.group3() + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<CircleAligningOrigin> for Dilator {
    fn add_assign(&mut self, other: CircleAligningOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleAtInfinity> for Dilator {
    type Output = Dilator;

    fn add(self, other: CircleAtInfinity) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + other.group0(),
                g3: self.group3() + other.group1(),
            },
        }
    }
}

impl AddAssign<CircleAtInfinity> for Dilator {
    fn add_assign(&mut self, other: CircleAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<CircleAtOrigin> for Dilator {
    type Output = Dilator;

    fn add(self, other: CircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<CircleAtOrigin> for Dilator {
    fn add_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleOnOrigin> for Dilator {
    type Output = Dilator;

    fn add(self, other: CircleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2() + other.group1(),
                g3: self.group3(),
            },
        }
    }
}

impl AddAssign<CircleOnOrigin> for Dilator {
    fn add_assign(&mut self, other: CircleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleOrthogonalOrigin> for Dilator {
    type Output = Dilator;

    fn add(self, other: CircleOrthogonalOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2(),
                g3: self.group3() + other.group1(),
            },
        }
    }
}

impl AddAssign<CircleOrthogonalOrigin> for Dilator {
    fn add_assign(&mut self, other: CircleOrthogonalOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Dilator> for Dilator {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: self.group2() + other.group2(),
                g3: self.group3() + other.group3(),
            },
        }
    }
}

impl AddAssign<Dilator> for Dilator {
    fn add_assign(&mut self, other: Dilator) {
        *self = (*self).add(other);
    }
}

impl Add<Dipole> for Dilator {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Dilator {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for Dilator {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]) + other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for Dilator {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Dilator {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for Dilator {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Dilator {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for Dilator {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for Dilator {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for Dilator {
    type Output = Dilator;

    fn add(self, other: Line) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + other.group0(),
                g3: self.group3() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<Line> for Dilator {
    fn add_assign(&mut self, other: Line) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtInfinity> for Dilator {
    type Output = Dilator;

    fn add(self, other: LineAtInfinity) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<LineAtInfinity> for Dilator {
    fn add_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtOrigin> for Dilator {
    type Output = Dilator;

    fn add(self, other: LineAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + other.group0(),
                g3: self.group3(),
            },
        }
    }
}

impl AddAssign<LineAtOrigin> for Dilator {
    fn add_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Motor> for Dilator {
    type Output = Dilator;

    fn add(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() + other.group0()[3],
                g1: self.group1(),
                g2: self.group2() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group3() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<Motor> for Dilator {
    fn add_assign(&mut self, other: Motor) {
        *self = (*self).add(other);
    }
}

impl Add<MultiVector> for Dilator {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]) + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: self.group1() + other.group6(),
                g7: self.group2() + other.group7(),
                g8: self.group3() + other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Dilator {
    type Output = Dilator;

    fn add(self, other: NullCircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2(),
                g3: self.group3(),
            },
        }
    }
}

impl AddAssign<NullCircleAtOrigin> for Dilator {
    fn add_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullDipoleAtOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for Dilator {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for Dilator {
    type Output = Dilator;

    fn add(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() + other.group0()[3],
                g1: self.group1(),
                g2: self.group2() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group3(),
            },
        }
    }
}

impl AddAssign<Rotor> for Dilator {
    fn add_assign(&mut self, other: Rotor) {
        *self = (*self).add(other);
    }
}

impl Add<RoundPoint> for Dilator {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for Dilator {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]) + Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for Dilator {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Dilator {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Dilator {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for Dilator {
    type Output = Dilator;

    fn add(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() + other.group0()[3],
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<Translator> for Dilator {
    fn add_assign(&mut self, other: Translator) {
        *self = (*self).add(other);
    }
}

impl Add<AntiCircleOnOrigin> for Dipole {
    type Output = Dipole;

    fn add(self, other: AntiCircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl AddAssign<AntiCircleOnOrigin> for Dipole {
    fn add_assign(&mut self, other: AntiCircleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiDipoleOnOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Dipole {
    type Output = Dipole;

    fn add(self, other: AntiLineAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2(),
            },
        }
    }
}

impl AddAssign<AntiLineAtOrigin> for Dipole {
    fn add_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiPlane> for Dipole {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for Dipole {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Dipole {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for Dipole {
    type Output = Dipole;

    fn add(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: self.group2() + other.group2(),
            },
        }
    }
}

impl AddAssign<Dipole> for Dipole {
    fn add_assign(&mut self, other: Dipole) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleAligningOrigin> for Dipole {
    type Output = Dipole;

    fn add(self, other: DipoleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: self.group2() + other.group1(),
            },
        }
    }
}

impl AddAssign<DipoleAligningOrigin> for Dipole {
    fn add_assign(&mut self, other: DipoleAligningOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleAtInfinity> for Dipole {
    type Output = Dipole;

    fn add(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2() + other.group1(),
            },
        }
    }
}

impl AddAssign<DipoleAtInfinity> for Dipole {
    fn add_assign(&mut self, other: DipoleAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleAtOrigin> for Dipole {
    type Output = Dipole;

    fn add(self, other: DipoleAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: self.group2() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<DipoleAtOrigin> for Dipole {
    fn add_assign(&mut self, other: DipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleOnOrigin> for Dipole {
    type Output = Dipole;

    fn add(self, other: DipoleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1(),
                g2: self.group2() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl AddAssign<DipoleOnOrigin> for Dipole {
    fn add_assign(&mut self, other: DipoleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleOrthogonalOrigin> for Dipole {
    type Output = Dipole;

    fn add(self, other: DipoleOrthogonalOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: self.group2() + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<DipoleOrthogonalOrigin> for Dipole {
    fn add_assign(&mut self, other: DipoleOrthogonalOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DualNum> for Dipole {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for Dipole {
    type Output = Dipole;

    fn add(self, other: FlatPoint) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + other.group0(),
            },
        }
    }
}

impl AddAssign<FlatPoint> for Dipole {
    fn add_assign(&mut self, other: FlatPoint) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtInfinity> for Dipole {
    type Output = Dipole;

    fn add(self, other: FlatPointAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<FlatPointAtInfinity> for Dipole {
    fn add_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtOrigin> for Dipole {
    type Output = Dipole;

    fn add(self, other: FlatPointAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<FlatPointAtOrigin> for Dipole {
    fn add_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Flector> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Dipole {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for Dipole {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for Dipole {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) + other.group3(),
                g4: self.group1() + other.group4(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) + other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Dipole {
    type Output = Dipole;

    fn add(self, other: NullDipoleAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl AddAssign<NullDipoleAtOrigin> for Dipole {
    fn add_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullSphereAtOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for Dipole {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Dipole {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) + other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for Dipole {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for DipoleAligningOrigin {
    type Output = Dipole;

    fn add(self, other: AntiCircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for DipoleAligningOrigin {
    type Output = Dipole;

    fn add(self, other: AntiLineAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<AntiPlane> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for DipoleAligningOrigin {
    type Output = Dipole;

    fn add(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: self.group1() + other.group2(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<DipoleAligningOrigin> for DipoleAligningOrigin {
    fn add_assign(&mut self, other: DipoleAligningOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleAtInfinity> for DipoleAligningOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: self.group1() + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<DipoleAtOrigin> for DipoleAligningOrigin {
    fn add_assign(&mut self, other: DipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleOnOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleOnOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl AddAssign<DipoleOnOrigin> for DipoleAligningOrigin {
    fn add_assign(&mut self, other: DipoleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleOrthogonalOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: self.group1() + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<DualNum> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: FlatPoint) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
            },
        }
    }
}

impl AddAssign<FlatPoint> for DipoleAligningOrigin {
    fn add_assign(&mut self, other: FlatPoint) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtInfinity> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: FlatPointAtInfinity) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<FlatPointAtInfinity> for DipoleAligningOrigin {
    fn add_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: FlatPointAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<FlatPointAtOrigin> for DipoleAligningOrigin {
    fn add_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Flector> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) + other.group3(),
                g4: other.group4(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: NullDipoleAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<NullDipoleAtOrigin> for DipoleAligningOrigin {
    fn add_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullSphereAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for DipoleAtInfinity {
    type Output = Dipole;

    fn add(self, other: AntiCircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn add(self, other: AntiLineAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<AntiLineAtOrigin> for DipoleAtInfinity {
    fn add_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiPlane> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for DipoleAtInfinity {
    type Output = Dipole;

    fn add(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: self.group1() + other.group2(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for DipoleAtInfinity {
    type Output = Dipole;

    fn add(self, other: DipoleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: self.group1() + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn add(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<DipoleAtInfinity> for DipoleAtInfinity {
    fn add_assign(&mut self, other: DipoleAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleAtOrigin> for DipoleAtInfinity {
    type Output = Dipole;

    fn add(self, other: DipoleAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: self.group1() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for DipoleAtInfinity {
    type Output = Dipole;

    fn add(self, other: DipoleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0(),
                g2: self.group1() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = Dipole;

    fn add(self, other: DipoleOrthogonalOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: self.group1() + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<DualNum> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn add(self, other: FlatPoint) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
            },
        }
    }
}

impl AddAssign<FlatPoint> for DipoleAtInfinity {
    fn add_assign(&mut self, other: FlatPoint) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtInfinity> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn add(self, other: FlatPointAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<FlatPointAtInfinity> for DipoleAtInfinity {
    fn add_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtOrigin> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn add(self, other: FlatPointAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<FlatPointAtOrigin> for DipoleAtInfinity {
    fn add_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Flector> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]) + other.group3(),
                g4: self.group0() + other.group4(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for DipoleAtInfinity {
    type Output = Dipole;

    fn add(self, other: NullDipoleAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for DipoleAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for DipoleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: AntiCircleOnOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for DipoleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: AntiLineAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<AntiPlane> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for DipoleAtOrigin {
    type Output = Dipole;

    fn add(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group2(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for DipoleAtOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for DipoleAtOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn add(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<DipoleAtOrigin> for DipoleAtOrigin {
    fn add_assign(&mut self, other: DipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleOnOrigin> for DipoleAtOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleOnOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: self.group1() + other.group2(),
            },
        }
    }
}

impl Add<DualNum> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for DipoleAtOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: FlatPoint) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn add(self, other: FlatPointAtInfinity) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
            },
        }
    }
}

impl AddAssign<FlatPointAtInfinity> for DipoleAtOrigin {
    fn add_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtOrigin> for DipoleAtOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: FlatPointAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Flector> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group3(),
                g4: other.group4(),
                g5: self.group1() + other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn add(self, other: NullDipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<NullDipoleAtOrigin> for DipoleAtOrigin {
    fn add_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullSphereAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() + other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for DipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for DipoleOnOrigin {
    type Output = Dipole;

    fn add(self, other: AntiCircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for DipoleOnOrigin {
    type Output = Dipole;

    fn add(self, other: AntiLineAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: other.group0(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiPlane> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for DipoleOnOrigin {
    type Output = Dipole;

    fn add(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group2(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for DipoleOnOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for DipoleOnOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: other.group0(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for DipoleOnOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn add(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<DipoleOnOrigin> for DipoleOnOrigin {
    fn add_assign(&mut self, other: DipoleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleOrthogonalOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<DualNum> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for DipoleOnOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: FlatPoint) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group0(),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for DipoleOnOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: FlatPointAtInfinity) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn add(self, other: FlatPointAtOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<FlatPointAtOrigin> for DipoleOnOrigin {
    fn add_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Flector> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: self.group0() + other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn add(self, other: NullDipoleAtOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<NullDipoleAtOrigin> for DipoleOnOrigin {
    fn add_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullSphereAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for DipoleOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: AntiCircleOnOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl AddAssign<AntiCircleOnOrigin> for DipoleOrthogonalOrigin {
    fn add_assign(&mut self, other: AntiCircleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiDipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: AntiLineAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2(),
            },
        }
    }
}

impl AddAssign<AntiLineAtOrigin> for DipoleOrthogonalOrigin {
    fn add_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiPlane> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for DipoleOrthogonalOrigin {
    type Output = Dipole;

    fn add(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + other.group2(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: DipoleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: self.group2() + other.group1(),
            },
        }
    }
}

impl AddAssign<DipoleAtOrigin> for DipoleOrthogonalOrigin {
    fn add_assign(&mut self, other: DipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: self.group2() + other.group2(),
            },
        }
    }
}

impl AddAssign<DipoleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    fn add_assign(&mut self, other: DipoleOrthogonalOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DualNum> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for DipoleOrthogonalOrigin {
    type Output = Dipole;

    fn add(self, other: FlatPoint) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: FlatPointAtInfinity) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + other.group0(),
            },
        }
    }
}

impl AddAssign<FlatPointAtInfinity> for DipoleOrthogonalOrigin {
    fn add_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Dipole;

    fn add(self, other: FlatPointAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Flector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group1(),
                g5: self.group2() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group3(),
                g4: self.group1() + other.group4(),
                g5: self.group2() + other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: NullDipoleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl AddAssign<NullDipoleAtOrigin> for DipoleOrthogonalOrigin {
    fn add_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullSphereAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2() + other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for DualNum {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for DualNum {
    type Output = DualNum;

    fn add(self, other: AntiScalar) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() + Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<AntiScalar> for DualNum {
    fn add_assign(&mut self, other: AntiScalar) {
        *self = (*self).add(other);
    }
}

impl Add<AntiSphereOnOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for DualNum {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for DualNum {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for DualNum {
    type Output = DualNum;

    fn add(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<DualNum> for DualNum {
    fn add_assign(&mut self, other: DualNum) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPoint> for DualNum {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for DualNum {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for DualNum {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for DualNum {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for DualNum {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for DualNum {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for DualNum {
    type Output = DualNum;

    fn add(self, other: Scalar) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl AddAssign<Scalar> for DualNum {
    fn add_assign(&mut self, other: Scalar) {
        *self = (*self).add(other);
    }
}

impl Add<Sphere> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for DualNum {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for DualNum {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for FlatPoint {
    type Output = Dipole;

    fn add(self, other: AntiCircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: self.group0(),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for FlatPoint {
    type Output = DipoleAtInfinity;

    fn add(self, other: AntiLineAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Add<AntiPlane> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for FlatPoint {
    type Output = Dipole;

    fn add(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: self.group0() + other.group2(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for FlatPoint {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for FlatPoint {
    type Output = DipoleAtInfinity;

    fn add(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for FlatPoint {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: other.group0(),
                g1: self.group0() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for FlatPoint {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleOnOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for FlatPoint {
    type Output = Dipole;

    fn add(self, other: DipoleOrthogonalOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: self.group0() + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<DualNum> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for FlatPoint {
    type Output = FlatPoint;

    fn add(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<FlatPoint> for FlatPoint {
    fn add_assign(&mut self, other: FlatPoint) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtInfinity> for FlatPoint {
    type Output = FlatPoint;

    fn add(self, other: FlatPointAtInfinity) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<FlatPointAtInfinity> for FlatPoint {
    fn add_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtOrigin> for FlatPoint {
    type Output = FlatPoint;

    fn add(self, other: FlatPointAtOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<FlatPointAtOrigin> for FlatPoint {
    fn add_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Flector> for FlatPoint {
    type Output = Flector;

    fn add(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for FlatPoint {
    type Output = Flector;

    fn add(self, other: FlectorAtInfinity) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for FlatPoint {
    type Output = Flector;

    fn add(self, other: Horizon) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group3(),
                g4: other.group4(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for FlatPoint {
    type Output = DipoleAligningOrigin;

    fn add(self, other: NullDipoleAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for FlatPoint {
    type Output = Flector;

    fn add(self, other: Plane) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0(),
                g1: other.group0(),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for FlatPoint {
    type Output = Flector;

    fn add(self, other: PlaneAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0(),
                g1: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<Rotor> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for FlatPoint {
    type Output = Flector;

    fn add(self, other: Transflector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: other.group1(),
            },
        }
    }
}

impl Add<Translator> for FlatPoint {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for FlatPointAtInfinity {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: AntiCircleOnOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: self.group0(),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for FlatPointAtInfinity {
    type Output = DipoleAtInfinity;

    fn add(self, other: AntiLineAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiPlane> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for FlatPointAtInfinity {
    type Output = Dipole;

    fn add(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group2(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for FlatPointAtInfinity {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for FlatPointAtInfinity {
    type Output = DipoleAtInfinity;

    fn add(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for FlatPointAtInfinity {
    type Output = DipoleAtOrigin;

    fn add(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for FlatPointAtInfinity {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleOnOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: self.group0() + other.group2(),
            },
        }
    }
}

impl Add<DualNum> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for FlatPointAtInfinity {
    type Output = FlatPoint;

    fn add(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn add(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<FlatPointAtInfinity> for FlatPointAtInfinity {
    fn add_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtOrigin> for FlatPointAtInfinity {
    type Output = FlatPoint;

    fn add(self, other: FlatPointAtOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Flector> for FlatPointAtInfinity {
    type Output = Flector;

    fn add(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for FlatPointAtInfinity {
    type Output = FlectorAtInfinity;

    fn add(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<Horizon> for FlatPointAtInfinity {
    type Output = FlectorAtInfinity;

    fn add(self, other: Horizon) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: self.group0() + other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for FlatPointAtInfinity {
    type Output = DipoleAtOrigin;

    fn add(self, other: NullDipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for FlatPointAtInfinity {
    type Output = Transflector;

    fn add(self, other: Plane) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0(),
                g1: other.group0(),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for FlatPointAtInfinity {
    type Output = Transflector;

    fn add(self, other: PlaneAtOrigin) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0(),
                g1: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<Rotor> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for FlatPointAtInfinity {
    type Output = Transflector;

    fn add(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<Translator> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for FlatPointAtOrigin {
    type Output = Dipole;

    fn add(self, other: AntiCircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for FlatPointAtOrigin {
    type Output = DipoleAtInfinity;

    fn add(self, other: AntiLineAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Add<AntiPlane> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for FlatPointAtOrigin {
    type Output = Dipole;

    fn add(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group2(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for FlatPointAtOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for FlatPointAtOrigin {
    type Output = DipoleAtInfinity;

    fn add(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group1(),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for FlatPointAtOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for FlatPointAtOrigin {
    type Output = DipoleOnOrigin;

    fn add(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for FlatPointAtOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleOrthogonalOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<DualNum> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for FlatPointAtOrigin {
    type Output = FlatPoint;

    fn add(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for FlatPointAtOrigin {
    type Output = FlatPoint;

    fn add(self, other: FlatPointAtInfinity) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn add(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<FlatPointAtOrigin> for FlatPointAtOrigin {
    fn add_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Flector> for FlatPointAtOrigin {
    type Output = Flector;

    fn add(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for FlatPointAtOrigin {
    type Output = Flector;

    fn add(self, other: FlectorAtInfinity) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for FlatPointAtOrigin {
    type Output = Flector;

    fn add(self, other: Horizon) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for FlatPointAtOrigin {
    type Output = DipoleOnOrigin;

    fn add(self, other: NullDipoleAtOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for FlatPointAtOrigin {
    type Output = Flector;

    fn add(self, other: Plane) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g1: other.group0(),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for FlatPointAtOrigin {
    type Output = Flector;

    fn add(self, other: PlaneAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g1: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<Rotor> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for FlatPointAtOrigin {
    type Output = Flector;

    fn add(self, other: Transflector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: other.group1(),
            },
        }
    }
}

impl Add<Translator> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiPlane> for Flector {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiScalar> for Flector {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Circle> for Flector {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Flector {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Dilator> for Flector {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Dipole> for Flector {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Flector {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<DualNum> for Flector {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<FlatPoint> for Flector {
    type Output = Flector;

    fn add(self, other: FlatPoint) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<FlatPoint> for Flector {
    fn add_assign(&mut self, other: FlatPoint) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtInfinity> for Flector {
    type Output = Flector;

    fn add(self, other: FlatPointAtInfinity) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<FlatPointAtInfinity> for Flector {
    fn add_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtOrigin> for Flector {
    type Output = Flector;

    fn add(self, other: FlatPointAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<FlatPointAtOrigin> for Flector {
    fn add_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Flector> for Flector {
    type Output = Flector;

    fn add(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<Flector> for Flector {
    fn add_assign(&mut self, other: Flector) {
        *self = (*self).add(other);
    }
}

impl Add<FlectorAtInfinity> for Flector {
    type Output = Flector;

    fn add(self, other: FlectorAtInfinity) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl AddAssign<FlectorAtInfinity> for Flector {
    fn add_assign(&mut self, other: FlectorAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<Horizon> for Flector {
    type Output = Flector;

    fn add(self, other: Horizon) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<Horizon> for Flector {
    fn add_assign(&mut self, other: Horizon) {
        *self = (*self).add(other);
    }
}

impl Add<Infinity> for Flector {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Line> for Flector {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<LineAtInfinity> for Flector {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<LineAtOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Motor> for Flector {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<MultiVector> for Flector {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group3(),
                g4: other.group4(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + other.group9(),
                g10: Simd32x2::from([0.0, self.group1()[3]]) + other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]) + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Flector {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Plane> for Flector {
    type Output = Flector;

    fn add(self, other: Plane) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
            },
        }
    }
}

impl AddAssign<Plane> for Flector {
    fn add_assign(&mut self, other: Plane) {
        *self = (*self).add(other);
    }
}

impl Add<PlaneAtOrigin> for Flector {
    type Output = Flector;

    fn add(self, other: PlaneAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<PlaneAtOrigin> for Flector {
    fn add_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Rotor> for Flector {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<RoundPoint> for Flector {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Scalar> for Flector {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Sphere> for Flector {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + other.group0(),
                g10: Simd32x2::from([0.0, self.group1()[3]]) + other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]) + other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Flector {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]) + Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Flector {
    type Output = Flector;

    fn add(self, other: Transflector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<Transflector> for Flector {
    fn add_assign(&mut self, other: Transflector) {
        *self = (*self).add(other);
    }
}

impl Add<Translator> for Flector {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiPlane> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiScalar> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Circle> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<CircleAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Dilator> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Dipole> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<DualNum> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<FlatPoint> for FlectorAtInfinity {
    type Output = Flector;

    fn add(self, other: FlatPoint) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn add(self, other: FlatPointAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<FlatPointAtInfinity> for FlectorAtInfinity {
    fn add_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtOrigin> for FlectorAtInfinity {
    type Output = Flector;

    fn add(self, other: FlatPointAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Flector> for FlectorAtInfinity {
    type Output = Flector;

    fn add(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group1(),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn add(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<FlectorAtInfinity> for FlectorAtInfinity {
    fn add_assign(&mut self, other: FlectorAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<Horizon> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn add(self, other: Horizon) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<Horizon> for FlectorAtInfinity {
    fn add_assign(&mut self, other: Horizon) {
        *self = (*self).add(other);
    }
}

impl Add<Infinity> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Line> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<LineAtInfinity> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<LineAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Motor> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<MultiVector> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: Simd32x2::from([0.0, self.group0()[3]]) + other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]) + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Plane> for FlectorAtInfinity {
    type Output = Transflector;

    fn add(self, other: Plane) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group0(),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for FlectorAtInfinity {
    type Output = Transflector;

    fn add(self, other: PlaneAtOrigin) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<Rotor> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<RoundPoint> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Scalar> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Sphere> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from([0.0, self.group0()[3]]) + other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]) + other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]) + Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for FlectorAtInfinity {
    type Output = Transflector;

    fn add(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group1(),
            },
        }
    }
}

impl Add<Translator> for FlectorAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<AntiPlane> for Horizon {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<AntiScalar> for Horizon {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<Circle> for Horizon {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Horizon {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<Dilator> for Horizon {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<Dipole> for Horizon {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Horizon {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<DualNum> for Horizon {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<FlatPoint> for Horizon {
    type Output = Flector;

    fn add(self, other: FlatPoint) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Horizon {
    type Output = FlectorAtInfinity;

    fn add(self, other: FlatPointAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for Horizon {
    type Output = Flector;

    fn add(self, other: FlatPointAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Add<Flector> for Horizon {
    type Output = Flector;

    fn add(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group1(),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Horizon {
    type Output = FlectorAtInfinity;

    fn add(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<Horizon> for Horizon {
    type Output = Horizon;

    fn add(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<Horizon> for Horizon {
    fn add_assign(&mut self, other: Horizon) {
        *self = (*self).add(other);
    }
}

impl Add<Infinity> for Horizon {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<Line> for Horizon {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<LineAtInfinity> for Horizon {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<LineAtOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<Motor> for Horizon {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<MultiVector> for Horizon {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: Simd32x2::from([0.0, self.group0()]) + other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Horizon {
    type Output = SphereAtOrigin;

    fn add(self, other: NullSphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from([0.0, self.group0()]) + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<Plane> for Horizon {
    type Output = Plane;

    fn add(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for Horizon {
    type Output = Plane;

    fn add(self, other: PlaneAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<Rotor> for Horizon {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<RoundPoint> for Horizon {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Horizon {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<Scalar> for Horizon {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<Sphere> for Horizon {
    type Output = Sphere;

    fn add(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: other.group0(),
                g1: Simd32x2::from([0.0, self.group0()]) + other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Horizon {
    type Output = SphereAtOrigin;

    fn add(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from([0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Horizon {
    type Output = Sphere;

    fn add(self, other: SphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()]) + Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Horizon {
    type Output = Transflector;

    fn add(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group1(),
            },
        }
    }
}

impl Add<Translator> for Horizon {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for Infinity {
    type Output = AntiPlane;

    fn add(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Infinity {
    type Output = AntiPlane;

    fn add(self, other: AntiPlaneAtOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiScalar> for Infinity {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for Infinity {
    type Output = RoundPoint;

    fn add(self, other: AntiSphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()]) + Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Circle> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Infinity {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Infinity {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for Infinity {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for Infinity {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Infinity {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Infinity {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for Infinity {
    type Output = Infinity;

    fn add(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<Infinity> for Infinity {
    fn add_assign(&mut self, other: Infinity) {
        *self = (*self).add(other);
    }
}

impl Add<Line> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for Infinity {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for Infinity {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: Simd32x2::from([0.0, self.group0()]) + other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Infinity {
    type Output = RoundPointAtOrigin;

    fn add(self, other: Origin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from([0.0, self.group0()]) + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Plane> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for Infinity {
    type Output = RoundPoint;

    fn add(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: other.group0(),
                g1: Simd32x2::from([0.0, self.group0()]) + other.group1(),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Infinity {
    type Output = RoundPointAtOrigin;

    fn add(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from([0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<Scalar> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Infinity {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for Infinity {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Line {
    type Output = Circle;

    fn add(self, other: AntiDipoleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Line {
    type Output = CircleAtInfinity;

    fn add(self, other: AntiFlatPointAtOrigin) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for Line {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for Line {
    type Output = Motor;

    fn add(self, other: AntiScalar) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: self.group1(),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for Line {
    type Output = Circle;

    fn add(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Line {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: self.group1() + other.group2(),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Line {
    type Output = CircleAtInfinity;

    fn add(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() + other.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Line {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: self.group1() + other.group1(),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Line {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Line {
    type Output = Circle;

    fn add(self, other: CircleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<Dilator> for Line {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: self.group0() + other.group2(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group3(),
            },
        }
    }
}

impl Add<Dipole> for Line {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Line {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for Line {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for Line {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Line {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for Line {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Line {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for Line {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for Line {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for Line {
    type Output = Line;

    fn add(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<Line> for Line {
    fn add_assign(&mut self, other: Line) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtInfinity> for Line {
    type Output = Line;

    fn add(self, other: LineAtInfinity) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
            },
        }
    }
}

impl AddAssign<LineAtInfinity> for Line {
    fn add_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtOrigin> for Line {
    type Output = Line;

    fn add(self, other: LineAtOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<LineAtOrigin> for Line {
    fn add_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Motor> for Line {
    type Output = Motor;

    fn add(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl Add<MultiVector> for Line {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: self.group0() + other.group7(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Line {
    type Output = CircleAligningOrigin;

    fn add(self, other: NullCircleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Line {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for Line {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for Line {
    type Output = Motor;

    fn add(self, other: Rotor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl Add<RoundPoint> for Line {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for Line {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for Line {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Line {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Line {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for Line {
    type Output = Motor;

    fn add(self, other: Translator) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g1: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for LineAtInfinity {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: AntiDipoleOnOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for LineAtInfinity {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: AntiFlatPointAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for LineAtInfinity {
    type Output = Translator;

    fn add(self, other: AntiScalar) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for LineAtInfinity {
    type Output = Circle;

    fn add(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for LineAtInfinity {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: self.group0() + other.group2(),
            },
        }
    }
}

impl Add<CircleAtInfinity> for LineAtInfinity {
    type Output = CircleAtInfinity;

    fn add(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for LineAtInfinity {
    type Output = CircleAtOrigin;

    fn add(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
            },
        }
    }
}

impl Add<CircleOnOrigin> for LineAtInfinity {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: self.group0(),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for LineAtInfinity {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<Dilator> for LineAtInfinity {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group3(),
            },
        }
    }
}

impl Add<Dipole> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for LineAtInfinity {
    type Output = Line;

    fn add(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
            },
        }
    }
}

impl Add<LineAtInfinity> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn add(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<LineAtInfinity> for LineAtInfinity {
    fn add_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtOrigin> for LineAtInfinity {
    type Output = Line;

    fn add(self, other: LineAtOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Add<Motor> for LineAtInfinity {
    type Output = Motor;

    fn add(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
            },
        }
    }
}

impl Add<MultiVector> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for LineAtInfinity {
    type Output = CircleAtOrigin;

    fn add(self, other: NullCircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for LineAtInfinity {
    type Output = Motor;

    fn add(self, other: Rotor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Add<RoundPoint> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for LineAtInfinity {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for LineAtInfinity {
    type Output = Translator;

    fn add(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for LineAtOrigin {
    type Output = Circle;

    fn add(self, other: AntiDipoleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for LineAtOrigin {
    type Output = CircleAtInfinity;

    fn add(self, other: AntiFlatPointAtOrigin) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for LineAtOrigin {
    type Output = Rotor;

    fn add(self, other: AntiScalar) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for LineAtOrigin {
    type Output = Circle;

    fn add(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for LineAtOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: other.group2(),
            },
        }
    }
}

impl Add<CircleAtInfinity> for LineAtOrigin {
    type Output = CircleAtInfinity;

    fn add(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for LineAtOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<CircleOnOrigin> for LineAtOrigin {
    type Output = CircleOnOrigin;

    fn add(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for LineAtOrigin {
    type Output = Circle;

    fn add(self, other: CircleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<Dilator> for LineAtOrigin {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: self.group0() + other.group2(),
                g3: other.group3(),
            },
        }
    }
}

impl Add<Dipole> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for LineAtOrigin {
    type Output = Line;

    fn add(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<LineAtInfinity> for LineAtOrigin {
    type Output = Line;

    fn add(self, other: LineAtInfinity) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0(),
                g1: other.group0(),
            },
        }
    }
}

impl Add<LineAtOrigin> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn add(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<LineAtOrigin> for LineAtOrigin {
    fn add_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Motor> for LineAtOrigin {
    type Output = Motor;

    fn add(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<MultiVector> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: self.group0() + other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for LineAtOrigin {
    type Output = CircleOnOrigin;

    fn add(self, other: NullCircleAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for LineAtOrigin {
    type Output = Rotor;

    fn add(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<RoundPoint> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for LineAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for LineAtOrigin {
    type Output = Motor;

    fn add(self, other: Translator) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Motor {
    type Output = Dilator;

    fn add(self, other: AntiDipoleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Motor {
    type Output = Dilator;

    fn add(self, other: AntiFlatPointAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for Motor {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for Motor {
    type Output = Motor;

    fn add(self, other: AntiScalar) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<AntiScalar> for Motor {
    fn add_assign(&mut self, other: AntiScalar) {
        *self = (*self).add(other);
    }
}

impl Add<AntiSphereOnOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for Motor {
    type Output = Dilator;

    fn add(self, other: Circle) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Motor {
    type Output = Dilator;

    fn add(self, other: CircleAligningOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Motor {
    type Output = Dilator;

    fn add(self, other: CircleAtInfinity) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Motor {
    type Output = Dilator;

    fn add(self, other: CircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Motor {
    type Output = Dilator;

    fn add(self, other: CircleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Motor {
    type Output = Dilator;

    fn add(self, other: CircleOrthogonalOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<Dilator> for Motor {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3] + other.group0(),
                g1: other.group1(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group2(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group3(),
            },
        }
    }
}

impl Add<Dipole> for Motor {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Motor {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for Motor {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) + other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for Motor {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Motor {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for Motor {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Motor {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for Motor {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for Motor {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for Motor {
    type Output = Motor;

    fn add(self, other: Line) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<Line> for Motor {
    fn add_assign(&mut self, other: Line) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtInfinity> for Motor {
    type Output = Motor;

    fn add(self, other: LineAtInfinity) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
            },
        }
    }
}

impl AddAssign<LineAtInfinity> for Motor {
    fn add_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtOrigin> for Motor {
    type Output = Motor;

    fn add(self, other: LineAtOrigin) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<LineAtOrigin> for Motor {
    fn add_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Motor> for Motor {
    type Output = Motor;

    fn add(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<Motor> for Motor {
    fn add_assign(&mut self, other: Motor) {
        *self = (*self).add(other);
    }
}

impl Add<MultiVector> for Motor {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group7(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) + other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Motor {
    type Output = Dilator;

    fn add(self, other: NullCircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Motor {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for Motor {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for Motor {
    type Output = Motor;

    fn add(self, other: Rotor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<Rotor> for Motor {
    fn add_assign(&mut self, other: Rotor) {
        *self = (*self).add(other);
    }
}

impl Add<RoundPoint> for Motor {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for Motor {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) + Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for Motor {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Motor {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Motor {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for Motor {
    type Output = Motor;

    fn add(self, other: Translator) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g1: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl AddAssign<Translator> for Motor {
    fn add_assign(&mut self, other: Translator) {
        *self = (*self).add(other);
    }
}

impl Add<AntiCircleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: self.group4() + other.group1(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<AntiCircleOnOrigin> for MultiVector {
    fn add_assign(&mut self, other: AntiCircleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiDipoleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: self.group7(),
                g8: self.group8() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<AntiDipoleOnOrigin> for MultiVector {
    fn add_assign(&mut self, other: AntiDipoleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiFlatPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<AntiFlatPointAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiLineAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4() + other.group0(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<AntiLineAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiPlane> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: self.group2() + Simd32x2::from([0.0, other.group0()[3]]),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<AntiPlane> for MultiVector {
    fn add_assign(&mut self, other: AntiPlane) {
        *self = (*self).add(other);
    }
}

impl Add<AntiPlaneAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<AntiPlaneAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: AntiPlaneAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiScalar> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + Simd32x2::from([0.0, other.group0()]),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<AntiScalar> for MultiVector {
    fn add_assign(&mut self, other: AntiScalar) {
        *self = (*self).add(other);
    }
}

impl Add<AntiSphereOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: self.group2() + Simd32x2::from([other.group0()[3], 0.0]),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<AntiSphereOnOrigin> for MultiVector {
    fn add_assign(&mut self, other: AntiSphereOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Circle> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() + other.group0(),
                g7: self.group7() + other.group1(),
                g8: self.group8() + other.group2(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<Circle> for MultiVector {
    fn add_assign(&mut self, other: Circle) {
        *self = (*self).add(other);
    }
}

impl Add<CircleAligningOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() + other.group0(),
                g7: self.group7() + other.group1(),
                g8: self.group8() + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<CircleAligningOrigin> for MultiVector {
    fn add_assign(&mut self, other: CircleAligningOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7() + other.group0(),
                g8: self.group8() + other.group1(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<CircleAtInfinity> for MultiVector {
    fn add_assign(&mut self, other: CircleAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<CircleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() + other.group0(),
                g7: self.group7(),
                g8: self.group8() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<CircleAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() + other.group0(),
                g7: self.group7() + other.group1(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<CircleOnOrigin> for MultiVector {
    fn add_assign(&mut self, other: CircleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<CircleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() + other.group0(),
                g7: self.group7(),
                g8: self.group8() + other.group1(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<CircleOrthogonalOrigin> for MultiVector {
    fn add_assign(&mut self, other: CircleOrthogonalOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Dilator> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + Simd32x2::from([0.0, other.group0()]),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() + other.group1(),
                g7: self.group7() + other.group2(),
                g8: self.group8() + other.group3(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<Dilator> for MultiVector {
    fn add_assign(&mut self, other: Dilator) {
        *self = (*self).add(other);
    }
}

impl Add<Dipole> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: self.group4() + other.group1(),
                g5: self.group5() + Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<Dipole> for MultiVector {
    fn add_assign(&mut self, other: Dipole) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleAligningOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: self.group4(),
                g5: self.group5() + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<DipoleAligningOrigin> for MultiVector {
    fn add_assign(&mut self, other: DipoleAligningOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: self.group4() + other.group0(),
                g5: self.group5() + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<DipoleAtInfinity> for MultiVector {
    fn add_assign(&mut self, other: DipoleAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: self.group4(),
                g5: self.group5() + other.group1(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<DipoleAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: DipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + other.group0(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<DipoleOnOrigin> for MultiVector {
    fn add_assign(&mut self, other: DipoleOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DipoleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: self.group4() + other.group1(),
                g5: self.group5() + other.group2(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<DipoleOrthogonalOrigin> for MultiVector {
    fn add_assign(&mut self, other: DipoleOrthogonalOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<DualNum> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<DualNum> for MultiVector {
    fn add_assign(&mut self, other: DualNum) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPoint> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group4(),
                g5: self.group5() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<FlatPoint> for MultiVector {
    fn add_assign(&mut self, other: FlatPoint) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5() + other.group0(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<FlatPointAtInfinity> for MultiVector {
    fn add_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<FlatPointAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Flector> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group4(),
                g5: self.group5() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9() + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: self.group10() + Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl AddAssign<Flector> for MultiVector {
    fn add_assign(&mut self, other: Flector) {
        *self = (*self).add(other);
    }
}

impl Add<FlectorAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10() + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl AddAssign<FlectorAtInfinity> for MultiVector {
    fn add_assign(&mut self, other: FlectorAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<Horizon> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10() + Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<Horizon> for MultiVector {
    fn add_assign(&mut self, other: Horizon) {
        *self = (*self).add(other);
    }
}

impl Add<Infinity> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + Simd32x2::from([0.0, other.group0()]),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<Infinity> for MultiVector {
    fn add_assign(&mut self, other: Infinity) {
        *self = (*self).add(other);
    }
}

impl Add<Line> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7() + other.group0(),
                g8: self.group8() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<Line> for MultiVector {
    fn add_assign(&mut self, other: Line) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<LineAtInfinity> for MultiVector {
    fn add_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7() + other.group0(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<LineAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Motor> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: self.group8() + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<Motor> for MultiVector {
    fn add_assign(&mut self, other: Motor) {
        *self = (*self).add(other);
    }
}

impl Add<MultiVector> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
                g2: self.group2() + other.group2(),
                g3: self.group3() + other.group3(),
                g4: self.group4() + other.group4(),
                g5: self.group5() + other.group5(),
                g6: self.group6() + other.group6(),
                g7: self.group7() + other.group7(),
                g8: self.group8() + other.group8(),
                g9: self.group9() + other.group9(),
                g10: self.group10() + other.group10(),
            },
        }
    }
}

impl AddAssign<MultiVector> for MultiVector {
    fn add_assign(&mut self, other: MultiVector) {
        *self = (*self).add(other);
    }
}

impl Add<NullCircleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() + other.group0(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<NullCircleAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullDipoleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<NullDipoleAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullSphereAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10() + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl AddAssign<NullSphereAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: NullSphereAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Origin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + Simd32x2::from([other.group0(), 0.0]),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<Origin> for MultiVector {
    fn add_assign(&mut self, other: Origin) {
        *self = (*self).add(other);
    }
}

impl Add<Plane> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: self.group10() + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl AddAssign<Plane> for MultiVector {
    fn add_assign(&mut self, other: Plane) {
        *self = (*self).add(other);
    }
}

impl Add<PlaneAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9() + other.group0(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<PlaneAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Rotor> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<Rotor> for MultiVector {
    fn add_assign(&mut self, other: Rotor) {
        *self = (*self).add(other);
    }
}

impl Add<RoundPoint> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
                g2: self.group2() + other.group1(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<RoundPoint> for MultiVector {
    fn add_assign(&mut self, other: RoundPoint) {
        *self = (*self).add(other);
    }
}

impl Add<RoundPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() + other.group0(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<RoundPointAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: RoundPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Scalar> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + Simd32x2::from([other.group0(), 0.0]),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<Scalar> for MultiVector {
    fn add_assign(&mut self, other: Scalar) {
        *self = (*self).add(other);
    }
}

impl Add<Sphere> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9() + other.group0(),
                g10: self.group10() + other.group1(),
            },
        }
    }
}

impl AddAssign<Sphere> for MultiVector {
    fn add_assign(&mut self, other: Sphere) {
        *self = (*self).add(other);
    }
}

impl Add<SphereAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10() + other.group0(),
            },
        }
    }
}

impl AddAssign<SphereAtOrigin> for MultiVector {
    fn add_assign(&mut self, other: SphereAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<SphereOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: self.group10() + Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AddAssign<SphereOnOrigin> for MultiVector {
    fn add_assign(&mut self, other: SphereOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Transflector> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5() + other.group0(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9() + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: self.group10() + Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl AddAssign<Transflector> for MultiVector {
    fn add_assign(&mut self, other: Transflector) {
        *self = (*self).add(other);
    }
}

impl Add<Translator> for MultiVector {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() + Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl AddAssign<Translator> for MultiVector {
    fn add_assign(&mut self, other: Translator) {
        *self = (*self).add(other);
    }
}

impl Add<AntiCircleOnOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for NullCircleAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn add(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for NullCircleAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn add(self, other: AntiFlatPointAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for NullCircleAtOrigin {
    type Output = Dilator;

    fn add(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for NullCircleAtOrigin {
    type Output = Circle;

    fn add(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for NullCircleAtOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
            },
        }
    }
}

impl Add<CircleAtInfinity> for NullCircleAtOrigin {
    type Output = Circle;

    fn add(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for NullCircleAtOrigin {
    type Output = CircleAtOrigin;

    fn add(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<CircleOnOrigin> for NullCircleAtOrigin {
    type Output = CircleOnOrigin;

    fn add(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn add(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<Dilator> for NullCircleAtOrigin {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: other.group2(),
                g3: other.group3(),
            },
        }
    }
}

impl Add<Dipole> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for NullCircleAtOrigin {
    type Output = CircleAligningOrigin;

    fn add(self, other: Line) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<LineAtInfinity> for NullCircleAtOrigin {
    type Output = CircleAtOrigin;

    fn add(self, other: LineAtInfinity) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0(),
                g1: other.group0(),
            },
        }
    }
}

impl Add<LineAtOrigin> for NullCircleAtOrigin {
    type Output = CircleOnOrigin;

    fn add(self, other: LineAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0(),
                g1: other.group0(),
            },
        }
    }
}

impl Add<Motor> for NullCircleAtOrigin {
    type Output = Dilator;

    fn add(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<MultiVector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: self.group0() + other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn add(self, other: NullCircleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<NullCircleAtOrigin> for NullCircleAtOrigin {
    fn add_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullDipoleAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for NullCircleAtOrigin {
    type Output = Dilator;

    fn add(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for NullCircleAtOrigin {
    type Output = Dilator;

    fn add(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for NullDipoleAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn add(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for NullDipoleAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn add(self, other: AntiLineAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0(),
                g1: other.group0(),
            },
        }
    }
}

impl Add<AntiPlane> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for NullDipoleAtOrigin {
    type Output = Dipole;

    fn add(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for NullDipoleAtOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for NullDipoleAtOrigin {
    type Output = Dipole;

    fn add(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: other.group0(),
                g2: other.group1(),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for NullDipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn add(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for NullDipoleAtOrigin {
    type Output = DipoleOnOrigin;

    fn add(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn add(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
            },
        }
    }
}

impl Add<DualNum> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for NullDipoleAtOrigin {
    type Output = DipoleAligningOrigin;

    fn add(self, other: FlatPoint) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: other.group0(),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for NullDipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn add(self, other: FlatPointAtInfinity) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0(),
                g1: other.group0(),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for NullDipoleAtOrigin {
    type Output = DipoleOnOrigin;

    fn add(self, other: FlatPointAtOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Flector> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn add(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<NullDipoleAtOrigin> for NullDipoleAtOrigin {
    fn add_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<NullSphereAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<AntiPlane> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<AntiScalar> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<Circle> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<CircleAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<Dilator> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<Dipole> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<DualNum> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<FlatPoint> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<Flector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([self.group0(), 0.0]) + Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]) + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for NullSphereAtOrigin {
    type Output = SphereAtOrigin;

    fn add(self, other: Horizon) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) + Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<Line> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<LineAtInfinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<LineAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<Motor> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<MultiVector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: Simd32x2::from([self.group0(), 0.0]) + other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn add(self, other: NullSphereAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<NullSphereAtOrigin> for NullSphereAtOrigin {
    fn add_assign(&mut self, other: NullSphereAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Origin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<Plane> for NullSphereAtOrigin {
    type Output = Sphere;

    fn add(self, other: Plane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([self.group0(), 0.0]) + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for NullSphereAtOrigin {
    type Output = SphereOnOrigin;

    fn add(self, other: PlaneAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<Rotor> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<RoundPoint> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<Scalar> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<Sphere> for NullSphereAtOrigin {
    type Output = Sphere;

    fn add(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: other.group0(),
                g1: Simd32x2::from([self.group0(), 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for NullSphereAtOrigin {
    type Output = SphereAtOrigin;

    fn add(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for NullSphereAtOrigin {
    type Output = SphereOnOrigin;

    fn add(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<Transflector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([self.group0(), 0.0]) + Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for Origin {
    type Output = RoundPoint;

    fn add(self, other: AntiPlane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([self.group0(), 0.0]) + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Origin {
    type Output = AntiSphereOnOrigin;

    fn add(self, other: AntiPlaneAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<AntiScalar> for Origin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for Origin {
    type Output = AntiSphereOnOrigin;

    fn add(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) + other.group0(),
            },
        }
    }
}

impl Add<Circle> for Origin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Origin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for Origin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for Origin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Origin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for Origin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for Origin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Origin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for Origin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Origin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for Origin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for Origin {
    type Output = RoundPointAtOrigin;

    fn add(self, other: Infinity) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) + Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Line> for Origin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for Origin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for Origin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for Origin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: Simd32x2::from([self.group0(), 0.0]) + other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Origin {
    type Output = Origin;

    fn add(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<Origin> for Origin {
    fn add_assign(&mut self, other: Origin) {
        *self = (*self).add(other);
    }
}

impl Add<Plane> for Origin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for Origin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for Origin {
    type Output = RoundPoint;

    fn add(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: other.group0(),
                g1: Simd32x2::from([self.group0(), 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Origin {
    type Output = RoundPointAtOrigin;

    fn add(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<Scalar> for Origin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for Origin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Origin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Origin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for Origin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiPlane> for Plane {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiScalar> for Plane {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Circle> for Plane {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Plane {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Dilator> for Plane {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Dipole> for Plane {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Plane {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<DualNum> for Plane {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<FlatPoint> for Plane {
    type Output = Flector;

    fn add(self, other: FlatPoint) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Plane {
    type Output = Transflector;

    fn add(self, other: FlatPointAtInfinity) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for Plane {
    type Output = Flector;

    fn add(self, other: FlatPointAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: self.group0(),
            },
        }
    }
}

impl Add<Flector> for Plane {
    type Output = Flector;

    fn add(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Plane {
    type Output = Transflector;

    fn add(self, other: FlectorAtInfinity) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for Plane {
    type Output = Plane;

    fn add(self, other: Horizon) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<Horizon> for Plane {
    fn add_assign(&mut self, other: Horizon) {
        *self = (*self).add(other);
    }
}

impl Add<Infinity> for Plane {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Line> for Plane {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<LineAtInfinity> for Plane {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<LineAtOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Motor> for Plane {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<MultiVector> for Plane {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group9(),
                g10: Simd32x2::from([0.0, self.group0()[3]]) + other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Plane {
    type Output = Sphere;

    fn add(self, other: NullSphereAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()[3]]) + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Plane {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Plane> for Plane {
    type Output = Plane;

    fn add(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<Plane> for Plane {
    fn add_assign(&mut self, other: Plane) {
        *self = (*self).add(other);
    }
}

impl Add<PlaneAtOrigin> for Plane {
    type Output = Plane;

    fn add(self, other: PlaneAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<PlaneAtOrigin> for Plane {
    fn add_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Rotor> for Plane {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<RoundPoint> for Plane {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Plane {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Scalar> for Plane {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<Sphere> for Plane {
    type Output = Sphere;

    fn add(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: Simd32x2::from([0.0, self.group0()[3]]) + other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Plane {
    type Output = Sphere;

    fn add(self, other: SphereAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()[3]]) + other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Plane {
    type Output = Sphere;

    fn add(self, other: SphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()[3]]) + Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Plane {
    type Output = Transflector;

    fn add(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
            },
        }
    }
}

impl Add<Translator> for Plane {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for PlaneAtOrigin {
    type Output = Flector;

    fn add(self, other: FlatPoint) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for PlaneAtOrigin {
    type Output = Transflector;

    fn add(self, other: FlatPointAtInfinity) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for PlaneAtOrigin {
    type Output = Flector;

    fn add(self, other: FlatPointAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<Flector> for PlaneAtOrigin {
    type Output = Flector;

    fn add(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for PlaneAtOrigin {
    type Output = Transflector;

    fn add(self, other: FlectorAtInfinity) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for PlaneAtOrigin {
    type Output = Plane;

    fn add(self, other: Horizon) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: self.group0() + other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for PlaneAtOrigin {
    type Output = SphereOnOrigin;

    fn add(self, other: NullSphereAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<Origin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for PlaneAtOrigin {
    type Output = Plane;

    fn add(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn add(self, other: PlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<PlaneAtOrigin> for PlaneAtOrigin {
    fn add_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Rotor> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for PlaneAtOrigin {
    type Output = Sphere;

    fn add(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for PlaneAtOrigin {
    type Output = Sphere;

    fn add(self, other: SphereAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0(),
                g1: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for PlaneAtOrigin {
    type Output = SphereOnOrigin;

    fn add(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<Transflector> for PlaneAtOrigin {
    type Output = Transflector;

    fn add(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<Translator> for PlaneAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Rotor {
    type Output = Dilator;

    fn add(self, other: AntiDipoleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Rotor {
    type Output = Dilator;

    fn add(self, other: AntiFlatPointAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for Rotor {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for Rotor {
    type Output = Rotor;

    fn add(self, other: AntiScalar) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<AntiScalar> for Rotor {
    fn add_assign(&mut self, other: AntiScalar) {
        *self = (*self).add(other);
    }
}

impl Add<AntiSphereOnOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for Rotor {
    type Output = Dilator;

    fn add(self, other: Circle) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
                g3: other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Rotor {
    type Output = Dilator;

    fn add(self, other: CircleAligningOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
                g3: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Rotor {
    type Output = Dilator;

    fn add(self, other: CircleAtInfinity) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g3: other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Rotor {
    type Output = Dilator;

    fn add(self, other: CircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Rotor {
    type Output = Dilator;

    fn add(self, other: CircleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Rotor {
    type Output = Dilator;

    fn add(self, other: CircleOrthogonalOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: other.group1(),
            },
        }
    }
}

impl Add<Dilator> for Rotor {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3] + other.group0(),
                g1: other.group1(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group2(),
                g3: other.group3(),
            },
        }
    }
}

impl Add<Dipole> for Rotor {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Rotor {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for Rotor {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) + other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for Rotor {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Rotor {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for Rotor {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Rotor {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for Rotor {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for Rotor {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for Rotor {
    type Output = Motor;

    fn add(self, other: Line) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: other.group1(),
            },
        }
    }
}

impl Add<LineAtInfinity> for Rotor {
    type Output = Motor;

    fn add(self, other: LineAtInfinity) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0(),
                g1: other.group0(),
            },
        }
    }
}

impl Add<LineAtOrigin> for Rotor {
    type Output = Rotor;

    fn add(self, other: LineAtOrigin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<LineAtOrigin> for Rotor {
    fn add_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Motor> for Rotor {
    type Output = Motor;

    fn add(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() + other.group0(),
                g1: other.group1(),
            },
        }
    }
}

impl Add<MultiVector> for Rotor {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Rotor {
    type Output = Dilator;

    fn add(self, other: NullCircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for Rotor {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for Rotor {
    type Output = Rotor;

    fn add(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<Rotor> for Rotor {
    fn add_assign(&mut self, other: Rotor) {
        *self = (*self).add(other);
    }
}

impl Add<RoundPoint> for Rotor {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for Rotor {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) + Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for Rotor {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Rotor {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Rotor {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for Rotor {
    type Output = Motor;

    fn add(self, other: Translator) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for RoundPoint {
    type Output = RoundPoint;

    fn add(self, other: AntiPlane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl AddAssign<AntiPlane> for RoundPoint {
    fn add_assign(&mut self, other: AntiPlane) {
        *self = (*self).add(other);
    }
}

impl Add<AntiPlaneAtOrigin> for RoundPoint {
    type Output = RoundPoint;

    fn add(self, other: AntiPlaneAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<AntiPlaneAtOrigin> for RoundPoint {
    fn add_assign(&mut self, other: AntiPlaneAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<AntiScalar> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for RoundPoint {
    type Output = RoundPoint;

    fn add(self, other: AntiSphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() + Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AddAssign<AntiSphereOnOrigin> for RoundPoint {
    fn add_assign(&mut self, other: AntiSphereOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Circle> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for RoundPoint {
    type Output = RoundPoint;

    fn add(self, other: Infinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<Infinity> for RoundPoint {
    fn add_assign(&mut self, other: Infinity) {
        *self = (*self).add(other);
    }
}

impl Add<Line> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
                g2: self.group1() + other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for RoundPoint {
    type Output = RoundPoint;

    fn add(self, other: Origin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl AddAssign<Origin> for RoundPoint {
    fn add_assign(&mut self, other: Origin) {
        *self = (*self).add(other);
    }
}

impl Add<Plane> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for RoundPoint {
    type Output = RoundPoint;

    fn add(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<RoundPoint> for RoundPoint {
    fn add_assign(&mut self, other: RoundPoint) {
        *self = (*self).add(other);
    }
}

impl Add<RoundPointAtOrigin> for RoundPoint {
    type Output = RoundPoint;

    fn add(self, other: RoundPointAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
            },
        }
    }
}

impl AddAssign<RoundPointAtOrigin> for RoundPoint {
    fn add_assign(&mut self, other: RoundPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Scalar> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for RoundPoint {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for RoundPointAtOrigin {
    type Output = RoundPoint;

    fn add(self, other: AntiPlane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for RoundPointAtOrigin {
    type Output = RoundPoint;

    fn add(self, other: AntiPlaneAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Add<AntiScalar> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for RoundPointAtOrigin {
    type Output = RoundPoint;

    fn add(self, other: AntiSphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() + Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Circle> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn add(self, other: Infinity) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() + Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<Infinity> for RoundPointAtOrigin {
    fn add_assign(&mut self, other: Infinity) {
        *self = (*self).add(other);
    }
}

impl Add<Line> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: self.group0() + other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn add(self, other: Origin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl AddAssign<Origin> for RoundPointAtOrigin {
    fn add_assign(&mut self, other: Origin) {
        *self = (*self).add(other);
    }
}

impl Add<Plane> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for RoundPointAtOrigin {
    type Output = RoundPoint;

    fn add(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn add(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<RoundPointAtOrigin> for RoundPointAtOrigin {
    fn add_assign(&mut self, other: RoundPointAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Scalar> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for Scalar {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for Scalar {
    type Output = DualNum;

    fn add(self, other: AntiScalar) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) + Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Scalar {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dilator> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) + Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Dipole> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Scalar {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for Scalar {
    type Output = DualNum;

    fn add(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<FlatPoint> for Scalar {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Scalar {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Scalar {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtInfinity> for Scalar {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<LineAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Motor> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) + Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<MultiVector> for Scalar {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) + Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPoint> for Scalar {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for Scalar {
    type Output = Scalar;

    fn add(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<Scalar> for Scalar {
    fn add_assign(&mut self, other: Scalar) {
        *self = (*self).add(other);
    }
}

impl Add<Sphere> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Scalar {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for Scalar {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) + Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<AntiPlane> for Sphere {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<AntiScalar> for Sphere {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<Circle> for Sphere {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Sphere {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<Dilator> for Sphere {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<Dipole> for Sphere {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Sphere {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<DualNum> for Sphere {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<FlatPoint> for Sphere {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Sphere {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<Flector> for Sphere {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: self.group1() + Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Sphere {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1() + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for Sphere {
    type Output = Sphere;

    fn add(self, other: Horizon) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<Horizon> for Sphere {
    fn add_assign(&mut self, other: Horizon) {
        *self = (*self).add(other);
    }
}

impl Add<Infinity> for Sphere {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<Line> for Sphere {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<LineAtInfinity> for Sphere {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<LineAtOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<Motor> for Sphere {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<MultiVector> for Sphere {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: self.group0() + other.group9(),
                g10: self.group1() + other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Sphere {
    type Output = Sphere;

    fn add(self, other: NullSphereAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl AddAssign<NullSphereAtOrigin> for Sphere {
    fn add_assign(&mut self, other: NullSphereAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Origin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<Plane> for Sphere {
    type Output = Sphere;

    fn add(self, other: Plane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl AddAssign<Plane> for Sphere {
    fn add_assign(&mut self, other: Plane) {
        *self = (*self).add(other);
    }
}

impl Add<PlaneAtOrigin> for Sphere {
    type Output = Sphere;

    fn add(self, other: PlaneAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<PlaneAtOrigin> for Sphere {
    fn add_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Rotor> for Sphere {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<RoundPoint> for Sphere {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Sphere {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<Scalar> for Sphere {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<Sphere> for Sphere {
    type Output = Sphere;

    fn add(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<Sphere> for Sphere {
    fn add_assign(&mut self, other: Sphere) {
        *self = (*self).add(other);
    }
}

impl Add<SphereAtOrigin> for Sphere {
    type Output = Sphere;

    fn add(self, other: SphereAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
            },
        }
    }
}

impl AddAssign<SphereAtOrigin> for Sphere {
    fn add_assign(&mut self, other: SphereAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<SphereOnOrigin> for Sphere {
    type Output = Sphere;

    fn add(self, other: SphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() + Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AddAssign<SphereOnOrigin> for Sphere {
    fn add_assign(&mut self, other: SphereOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Transflector> for Sphere {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: self.group1() + Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for Sphere {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<AntiPlane> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<AntiScalar> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<Circle> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<CircleAtInfinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<CircleOnOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<Dilator> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<Dipole> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<DualNum> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<FlatPoint> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<Flector> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: self.group0() + Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0() + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn add(self, other: Horizon) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() + Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<Horizon> for SphereAtOrigin {
    fn add_assign(&mut self, other: Horizon) {
        *self = (*self).add(other);
    }
}

impl Add<Infinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<Line> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<LineAtInfinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<LineAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<Motor> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<MultiVector> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: other.group9(),
                g10: self.group0() + other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn add(self, other: NullSphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl AddAssign<NullSphereAtOrigin> for SphereAtOrigin {
    fn add_assign(&mut self, other: NullSphereAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Origin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<Plane> for SphereAtOrigin {
    type Output = Sphere;

    fn add(self, other: Plane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for SphereAtOrigin {
    type Output = Sphere;

    fn add(self, other: PlaneAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Add<Rotor> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<RoundPoint> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<Scalar> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<Sphere> for SphereAtOrigin {
    type Output = Sphere;

    fn add(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: other.group0(),
                g1: self.group0() + other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn add(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<SphereAtOrigin> for SphereAtOrigin {
    fn add_assign(&mut self, other: SphereAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<SphereOnOrigin> for SphereAtOrigin {
    type Output = Sphere;

    fn add(self, other: SphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() + Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: self.group0() + Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for SphereAtOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<AntiPlane> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<AntiScalar> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Circle> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<CircleAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Dilator> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Dipole> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<DualNum> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<FlatPoint> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Flector> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]) + Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]) + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for SphereOnOrigin {
    type Output = Sphere;

    fn add(self, other: Horizon) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([self.group0()[3], 0.0]) + Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Line> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<LineAtInfinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<LineAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Motor> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<MultiVector> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group9(),
                g10: Simd32x2::from([self.group0()[3], 0.0]) + other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn add(self, other: NullSphereAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<NullSphereAtOrigin> for SphereOnOrigin {
    fn add_assign(&mut self, other: NullSphereAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Origin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Plane> for SphereOnOrigin {
    type Output = Sphere;

    fn add(self, other: Plane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([self.group0()[3], 0.0]) + Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn add(self, other: PlaneAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<PlaneAtOrigin> for SphereOnOrigin {
    fn add_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Rotor> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<RoundPoint> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Scalar> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Sphere> for SphereOnOrigin {
    type Output = Sphere;

    fn add(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group0(),
                g1: Simd32x2::from([self.group0()[3], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for SphereOnOrigin {
    type Output = Sphere;

    fn add(self, other: SphereAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([self.group0()[3], 0.0]) + other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn add(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<SphereOnOrigin> for SphereOnOrigin {
    fn add_assign(&mut self, other: SphereOnOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Transflector> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]) + Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for SphereOnOrigin {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiPlane> for Transflector {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiScalar> for Transflector {
    type Output = MultiVector;

    fn add(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiSphereOnOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Circle> for Transflector {
    type Output = MultiVector;

    fn add(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group0(),
                g7: other.group1(),
                g8: other.group2(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Transflector {
    type Output = MultiVector;

    fn add(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: other.group1(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group0(),
                g7: other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: other.group1(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Dilator> for Transflector {
    type Output = MultiVector;

    fn add(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group1(),
                g7: other.group2(),
                g8: other.group3(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Dipole> for Transflector {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: self.group0() + Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: self.group0() + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Transflector {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: self.group0() + Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group0() + other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: self.group0() + other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<DualNum> for Transflector {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<FlatPoint> for Transflector {
    type Output = Flector;

    fn add(self, other: FlatPoint) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Transflector {
    type Output = Transflector;

    fn add(self, other: FlatPointAtInfinity) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl AddAssign<FlatPointAtInfinity> for Transflector {
    fn add_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<FlatPointAtOrigin> for Transflector {
    type Output = Flector;

    fn add(self, other: FlatPointAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: self.group1(),
            },
        }
    }
}

impl Add<Flector> for Transflector {
    type Output = Flector;

    fn add(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Transflector {
    type Output = Transflector;

    fn add(self, other: FlectorAtInfinity) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl AddAssign<FlectorAtInfinity> for Transflector {
    fn add_assign(&mut self, other: FlectorAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<Horizon> for Transflector {
    type Output = Transflector;

    fn add(self, other: Horizon) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<Horizon> for Transflector {
    fn add_assign(&mut self, other: Horizon) {
        *self = (*self).add(other);
    }
}

impl Add<Infinity> for Transflector {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Line> for Transflector {
    type Output = MultiVector;

    fn add(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<LineAtInfinity> for Transflector {
    type Output = MultiVector;

    fn add(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<LineAtOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Motor> for Transflector {
    type Output = MultiVector;

    fn add(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<MultiVector> for Transflector {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: self.group0() + other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: other.group8(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + other.group9(),
                g10: Simd32x2::from([0.0, self.group1()[3]]) + other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]) + Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Plane> for Transflector {
    type Output = Transflector;

    fn add(self, other: Plane) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0(),
                g1: self.group1() + other.group0(),
            },
        }
    }
}

impl AddAssign<Plane> for Transflector {
    fn add_assign(&mut self, other: Plane) {
        *self = (*self).add(other);
    }
}

impl Add<PlaneAtOrigin> for Transflector {
    type Output = Transflector;

    fn add(self, other: PlaneAtOrigin) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0(),
                g1: self.group1() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<PlaneAtOrigin> for Transflector {
    fn add_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).add(other);
    }
}

impl Add<Rotor> for Transflector {
    type Output = MultiVector;

    fn add(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<RoundPoint> for Transflector {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Scalar> for Transflector {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<Sphere> for Transflector {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + other.group0(),
                g10: Simd32x2::from([0.0, self.group1()[3]]) + other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]) + other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Transflector {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) + Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]) + Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Transflector {
    type Output = Transflector;

    fn add(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() + other.group0(),
                g1: self.group1() + other.group1(),
            },
        }
    }
}

impl AddAssign<Transflector> for Transflector {
    fn add_assign(&mut self, other: Transflector) {
        *self = (*self).add(other);
    }
}

impl Add<Translator> for Transflector {
    type Output = MultiVector;

    fn add(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Add<AntiCircleOnOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiDipoleOnOrigin> for Translator {
    type Output = Dilator;

    fn add(self, other: AntiDipoleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<AntiFlatPointAtOrigin> for Translator {
    type Output = Dilator;

    fn add(self, other: AntiFlatPointAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Add<AntiLineAtOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlane> for Translator {
    type Output = MultiVector;

    fn add(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiPlaneAtOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<AntiScalar> for Translator {
    type Output = Translator;

    fn add(self, other: AntiScalar) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() + Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AddAssign<AntiScalar> for Translator {
    fn add_assign(&mut self, other: AntiScalar) {
        *self = (*self).add(other);
    }
}

impl Add<AntiSphereOnOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Circle> for Translator {
    type Output = Dilator;

    fn add(self, other: Circle) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group2(),
            },
        }
    }
}

impl Add<CircleAligningOrigin> for Translator {
    type Output = Dilator;

    fn add(self, other: CircleAligningOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleAtInfinity> for Translator {
    type Output = Dilator;

    fn add(self, other: CircleAtInfinity) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<CircleAtOrigin> for Translator {
    type Output = Dilator;

    fn add(self, other: CircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleOnOrigin> for Translator {
    type Output = Dilator;

    fn add(self, other: CircleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<CircleOrthogonalOrigin> for Translator {
    type Output = Dilator;

    fn add(self, other: CircleOrthogonalOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group1(),
            },
        }
    }
}

impl Add<Dilator> for Translator {
    type Output = Dilator;

    fn add(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3] + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group3(),
            },
        }
    }
}

impl Add<Dipole> for Translator {
    type Output = MultiVector;

    fn add(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: other.group1(),
                g5: Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAligningOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtInfinity> for Translator {
    type Output = MultiVector;

    fn add(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: other.group0(),
                g5: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleAtOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOnOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DipoleOrthogonalOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: other.group1(),
                g5: other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<DualNum> for Translator {
    type Output = MultiVector;

    fn add(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) + other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPoint> for Translator {
    type Output = MultiVector;

    fn add(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtInfinity> for Translator {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<FlatPointAtOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Flector> for Translator {
    type Output = MultiVector;

    fn add(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<FlectorAtInfinity> for Translator {
    type Output = MultiVector;

    fn add(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<Horizon> for Translator {
    type Output = MultiVector;

    fn add(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Add<Infinity> for Translator {
    type Output = MultiVector;

    fn add(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Line> for Translator {
    type Output = Motor;

    fn add(self, other: Line) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
            },
        }
    }
}

impl Add<LineAtInfinity> for Translator {
    type Output = Translator;

    fn add(self, other: LineAtInfinity) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AddAssign<LineAtInfinity> for Translator {
    fn add_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).add(other);
    }
}

impl Add<LineAtOrigin> for Translator {
    type Output = Motor;

    fn add(self, other: LineAtOrigin) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Add<Motor> for Translator {
    type Output = Motor;

    fn add(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) + other.group1(),
            },
        }
    }
}

impl Add<MultiVector> for Translator {
    type Output = MultiVector;

    fn add(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) + other.group0(),
                g1: other.group1(),
                g2: other.group2(),
                g3: other.group3(),
                g4: other.group4(),
                g5: other.group5(),
                g6: other.group6(),
                g7: other.group7(),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) + other.group8(),
                g9: other.group9(),
                g10: other.group10(),
            },
        }
    }
}

impl Add<NullCircleAtOrigin> for Translator {
    type Output = Dilator;

    fn add(self, other: NullCircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: other.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
            },
        }
    }
}

impl Add<NullDipoleAtOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<NullSphereAtOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Add<Origin> for Translator {
    type Output = MultiVector;

    fn add(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Plane> for Translator {
    type Output = MultiVector;

    fn add(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Add<PlaneAtOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Rotor> for Translator {
    type Output = Motor;

    fn add(self, other: Rotor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) + other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Add<RoundPoint> for Translator {
    type Output = MultiVector;

    fn add(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: other.group0(),
                g2: other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<RoundPointAtOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Scalar> for Translator {
    type Output = MultiVector;

    fn add(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) + Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Add<Sphere> for Translator {
    type Output = MultiVector;

    fn add(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: other.group0(),
                g10: other.group1(),
            },
        }
    }
}

impl Add<SphereAtOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: other.group0(),
            },
        }
    }
}

impl Add<SphereOnOrigin> for Translator {
    type Output = MultiVector;

    fn add(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Add<Transflector> for Translator {
    type Output = MultiVector;

    fn add(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Add<Translator> for Translator {
    type Output = Translator;

    fn add(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() + other.group0(),
            },
        }
    }
}

impl AddAssign<Translator> for Translator {
    fn add_assign(&mut self, other: Translator) {
        *self = (*self).add(other);
    }
}

impl Div<AntiCircleOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn div(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<AntiCircleOnOrigin> for AntiCircleOnOrigin {
    fn div_assign(&mut self, other: AntiCircleOnOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<AntiDipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn div(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<AntiDipoleOnOrigin> for AntiDipoleOnOrigin {
    fn div_assign(&mut self, other: AntiDipoleOnOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<AntiFlatPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn div(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<AntiFlatPointAtOrigin> for AntiFlatPointAtOrigin {
    fn div_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<AntiLineAtOrigin> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn div(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<AntiLineAtOrigin> for AntiLineAtOrigin {
    fn div_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<AntiPlane> for AntiPlane {
    type Output = AntiPlane;

    fn div(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<AntiPlane> for AntiPlane {
    fn div_assign(&mut self, other: AntiPlane) {
        *self = (*self).div(other);
    }
}

impl Div<AntiPlaneAtOrigin> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn div(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<AntiPlaneAtOrigin> for AntiPlaneAtOrigin {
    fn div_assign(&mut self, other: AntiPlaneAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<AntiScalar> for AntiScalar {
    type Output = AntiScalar;

    fn div(self, other: AntiScalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<AntiScalar> for AntiScalar {
    fn div_assign(&mut self, other: AntiScalar) {
        *self = (*self).div(other);
    }
}

impl Div<AntiSphereOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn div(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<AntiSphereOnOrigin> for AntiSphereOnOrigin {
    fn div_assign(&mut self, other: AntiSphereOnOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<Circle> for Circle {
    type Output = Circle;

    fn div(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
                g2: self.group2() / other.group2(),
            },
        }
    }
}

impl DivAssign<Circle> for Circle {
    fn div_assign(&mut self, other: Circle) {
        *self = (*self).div(other);
    }
}

impl Div<CircleAligningOrigin> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn div(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
                g2: self.group2() / other.group2(),
            },
        }
    }
}

impl DivAssign<CircleAligningOrigin> for CircleAligningOrigin {
    fn div_assign(&mut self, other: CircleAligningOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<CircleAtInfinity> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn div(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<CircleAtInfinity> for CircleAtInfinity {
    fn div_assign(&mut self, other: CircleAtInfinity) {
        *self = (*self).div(other);
    }
}

impl Div<CircleAtOrigin> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn div(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<CircleAtOrigin> for CircleAtOrigin {
    fn div_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<CircleOnOrigin> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn div(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<CircleOnOrigin> for CircleOnOrigin {
    fn div_assign(&mut self, other: CircleOnOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<CircleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn div(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<CircleOrthogonalOrigin> for CircleOrthogonalOrigin {
    fn div_assign(&mut self, other: CircleOrthogonalOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<Dilator> for Dilator {
    type Output = Dilator;

    fn div(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
                g2: self.group2() / other.group2(),
                g3: self.group3() / other.group3(),
            },
        }
    }
}

impl DivAssign<Dilator> for Dilator {
    fn div_assign(&mut self, other: Dilator) {
        *self = (*self).div(other);
    }
}

impl Div<Dipole> for Dipole {
    type Output = Dipole;

    fn div(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
                g2: self.group2() / other.group2(),
            },
        }
    }
}

impl DivAssign<Dipole> for Dipole {
    fn div_assign(&mut self, other: Dipole) {
        *self = (*self).div(other);
    }
}

impl Div<DipoleAligningOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn div(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<DipoleAligningOrigin> for DipoleAligningOrigin {
    fn div_assign(&mut self, other: DipoleAligningOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<DipoleAtInfinity> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn div(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<DipoleAtInfinity> for DipoleAtInfinity {
    fn div_assign(&mut self, other: DipoleAtInfinity) {
        *self = (*self).div(other);
    }
}

impl Div<DipoleAtOrigin> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn div(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<DipoleAtOrigin> for DipoleAtOrigin {
    fn div_assign(&mut self, other: DipoleAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<DipoleOnOrigin> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn div(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<DipoleOnOrigin> for DipoleOnOrigin {
    fn div_assign(&mut self, other: DipoleOnOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<DipoleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn div(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
                g2: self.group2() / other.group2(),
            },
        }
    }
}

impl DivAssign<DipoleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    fn div_assign(&mut self, other: DipoleOrthogonalOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<DualNum> for DualNum {
    type Output = DualNum;

    fn div(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<DualNum> for DualNum {
    fn div_assign(&mut self, other: DualNum) {
        *self = (*self).div(other);
    }
}

impl Div<FlatPoint> for FlatPoint {
    type Output = FlatPoint;

    fn div(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<FlatPoint> for FlatPoint {
    fn div_assign(&mut self, other: FlatPoint) {
        *self = (*self).div(other);
    }
}

impl Div<FlatPointAtInfinity> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn div(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<FlatPointAtInfinity> for FlatPointAtInfinity {
    fn div_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).div(other);
    }
}

impl Div<FlatPointAtOrigin> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn div(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<FlatPointAtOrigin> for FlatPointAtOrigin {
    fn div_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<Flector> for Flector {
    type Output = Flector;

    fn div(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<Flector> for Flector {
    fn div_assign(&mut self, other: Flector) {
        *self = (*self).div(other);
    }
}

impl Div<FlectorAtInfinity> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn div(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<FlectorAtInfinity> for FlectorAtInfinity {
    fn div_assign(&mut self, other: FlectorAtInfinity) {
        *self = (*self).div(other);
    }
}

impl Div<Horizon> for Horizon {
    type Output = Horizon;

    fn div(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<Horizon> for Horizon {
    fn div_assign(&mut self, other: Horizon) {
        *self = (*self).div(other);
    }
}

impl Div<Infinity> for Infinity {
    type Output = Infinity;

    fn div(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<Infinity> for Infinity {
    fn div_assign(&mut self, other: Infinity) {
        *self = (*self).div(other);
    }
}

impl Div<Line> for Line {
    type Output = Line;

    fn div(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<Line> for Line {
    fn div_assign(&mut self, other: Line) {
        *self = (*self).div(other);
    }
}

impl Div<LineAtInfinity> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn div(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<LineAtInfinity> for LineAtInfinity {
    fn div_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).div(other);
    }
}

impl Div<LineAtOrigin> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn div(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<LineAtOrigin> for LineAtOrigin {
    fn div_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<Motor> for Motor {
    type Output = Motor;

    fn div(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<Motor> for Motor {
    fn div_assign(&mut self, other: Motor) {
        *self = (*self).div(other);
    }
}

impl Div<MultiVector> for MultiVector {
    type Output = MultiVector;

    fn div(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
                g2: self.group2() / other.group2(),
                g3: self.group3() / other.group3(),
                g4: self.group4() / other.group4(),
                g5: self.group5() / other.group5(),
                g6: self.group6() / other.group6(),
                g7: self.group7() / other.group7(),
                g8: self.group8() / other.group8(),
                g9: self.group9() / other.group9(),
                g10: self.group10() / other.group10(),
            },
        }
    }
}

impl DivAssign<MultiVector> for MultiVector {
    fn div_assign(&mut self, other: MultiVector) {
        *self = (*self).div(other);
    }
}

impl Div<NullCircleAtOrigin> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn div(self, other: NullCircleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<NullCircleAtOrigin> for NullCircleAtOrigin {
    fn div_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<NullDipoleAtOrigin> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn div(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<NullDipoleAtOrigin> for NullDipoleAtOrigin {
    fn div_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<NullSphereAtOrigin> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn div(self, other: NullSphereAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<NullSphereAtOrigin> for NullSphereAtOrigin {
    fn div_assign(&mut self, other: NullSphereAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<Origin> for Origin {
    type Output = Origin;

    fn div(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<Origin> for Origin {
    fn div_assign(&mut self, other: Origin) {
        *self = (*self).div(other);
    }
}

impl Div<Plane> for Plane {
    type Output = Plane;

    fn div(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<Plane> for Plane {
    fn div_assign(&mut self, other: Plane) {
        *self = (*self).div(other);
    }
}

impl Div<PlaneAtOrigin> for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn div(self, other: PlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<PlaneAtOrigin> for PlaneAtOrigin {
    fn div_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<Rotor> for Rotor {
    type Output = Rotor;

    fn div(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<Rotor> for Rotor {
    fn div_assign(&mut self, other: Rotor) {
        *self = (*self).div(other);
    }
}

impl Div<RoundPoint> for RoundPoint {
    type Output = RoundPoint;

    fn div(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<RoundPoint> for RoundPoint {
    fn div_assign(&mut self, other: RoundPoint) {
        *self = (*self).div(other);
    }
}

impl Div<RoundPointAtOrigin> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn div(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<RoundPointAtOrigin> for RoundPointAtOrigin {
    fn div_assign(&mut self, other: RoundPointAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<Scalar> for Scalar {
    type Output = Scalar;

    fn div(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<Scalar> for Scalar {
    fn div_assign(&mut self, other: Scalar) {
        *self = (*self).div(other);
    }
}

impl Div<Sphere> for Sphere {
    type Output = Sphere;

    fn div(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<Sphere> for Sphere {
    fn div_assign(&mut self, other: Sphere) {
        *self = (*self).div(other);
    }
}

impl Div<SphereAtOrigin> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn div(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<SphereAtOrigin> for SphereAtOrigin {
    fn div_assign(&mut self, other: SphereAtOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<SphereOnOrigin> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn div(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<SphereOnOrigin> for SphereOnOrigin {
    fn div_assign(&mut self, other: SphereOnOrigin) {
        *self = (*self).div(other);
    }
}

impl Div<Transflector> for Transflector {
    type Output = Transflector;

    fn div(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() / other.group0(),
                g1: self.group1() / other.group1(),
            },
        }
    }
}

impl DivAssign<Transflector> for Transflector {
    fn div_assign(&mut self, other: Transflector) {
        *self = (*self).div(other);
    }
}

impl Div<Translator> for Translator {
    type Output = Translator;

    fn div(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() / other.group0(),
            },
        }
    }
}

impl DivAssign<Translator> for Translator {
    fn div_assign(&mut self, other: Translator) {
        *self = (*self).div(other);
    }
}

impl Into<AntiLineAtOrigin> for AntiCircleOnOrigin {
    fn into(self) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups { g0: self.group1() },
        }
    }
}

impl Into<NullDipoleAtOrigin> for AntiCircleOnOrigin {
    fn into(self) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<AntiFlatPointAtOrigin> for AntiDipoleOnOrigin {
    fn into(self) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups { g0: self.group0()[3] },
        }
    }
}

impl Into<NullCircleAtOrigin> for AntiDipoleOnOrigin {
    fn into(self) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Into<AntiPlaneAtOrigin> for AntiPlane {
    fn into(self) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Into<Infinity> for AntiPlane {
    fn into(self) -> Infinity {
        Infinity {
            groups: InfinityGroups { g0: self.group0()[3] },
        }
    }
}

impl Into<AntiPlaneAtOrigin> for AntiSphereOnOrigin {
    fn into(self) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Into<Origin> for AntiSphereOnOrigin {
    fn into(self) -> Origin {
        Origin {
            groups: OriginGroups { g0: self.group0()[3] },
        }
    }
}

impl Into<AntiDipoleOnOrigin> for Circle {
    fn into(self) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
            },
        }
    }
}

impl Into<AntiFlatPointAtOrigin> for Circle {
    fn into(self) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups { g0: self.group2()[3] },
        }
    }
}

impl Into<CircleAligningOrigin> for Circle {
    fn into(self) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
            },
        }
    }
}

impl Into<CircleAtInfinity> for Circle {
    fn into(self) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group1(),
                g1: self.group2(),
            },
        }
    }
}

impl Into<CircleAtOrigin> for Circle {
    fn into(self) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0(),
                g1: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
            },
        }
    }
}

impl Into<CircleOnOrigin> for Circle {
    fn into(self) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl Into<CircleOrthogonalOrigin> for Circle {
    fn into(self) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: self.group2(),
            },
        }
    }
}

impl Into<Line> for Circle {
    fn into(self) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group1(),
                g1: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
            },
        }
    }
}

impl Into<LineAtInfinity> for Circle {
    fn into(self) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
            },
        }
    }
}

impl Into<LineAtOrigin> for Circle {
    fn into(self) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups { g0: self.group1() },
        }
    }
}

impl Into<NullCircleAtOrigin> for Circle {
    fn into(self) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<CircleAtOrigin> for CircleAligningOrigin {
    fn into(self) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0(),
                g1: self.group2(),
            },
        }
    }
}

impl Into<CircleOnOrigin> for CircleAligningOrigin {
    fn into(self) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl Into<Line> for CircleAligningOrigin {
    fn into(self) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group1(),
                g1: self.group2(),
            },
        }
    }
}

impl Into<LineAtInfinity> for CircleAligningOrigin {
    fn into(self) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups { g0: self.group2() },
        }
    }
}

impl Into<LineAtOrigin> for CircleAligningOrigin {
    fn into(self) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups { g0: self.group1() },
        }
    }
}

impl Into<NullCircleAtOrigin> for CircleAligningOrigin {
    fn into(self) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<AntiFlatPointAtOrigin> for CircleAtInfinity {
    fn into(self) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups { g0: self.group1()[3] },
        }
    }
}

impl Into<Line> for CircleAtInfinity {
    fn into(self) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0(),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
            },
        }
    }
}

impl Into<LineAtInfinity> for CircleAtInfinity {
    fn into(self) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
            },
        }
    }
}

impl Into<LineAtOrigin> for CircleAtInfinity {
    fn into(self) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<LineAtInfinity> for CircleAtOrigin {
    fn into(self) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups { g0: self.group1() },
        }
    }
}

impl Into<NullCircleAtOrigin> for CircleAtOrigin {
    fn into(self) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<LineAtOrigin> for CircleOnOrigin {
    fn into(self) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups { g0: self.group1() },
        }
    }
}

impl Into<NullCircleAtOrigin> for CircleOnOrigin {
    fn into(self) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<AntiDipoleOnOrigin> for CircleOrthogonalOrigin {
    fn into(self) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
            },
        }
    }
}

impl Into<AntiFlatPointAtOrigin> for CircleOrthogonalOrigin {
    fn into(self) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups { g0: self.group1()[3] },
        }
    }
}

impl Into<CircleAtOrigin> for CircleOrthogonalOrigin {
    fn into(self) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0(),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
            },
        }
    }
}

impl Into<LineAtInfinity> for CircleOrthogonalOrigin {
    fn into(self) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
            },
        }
    }
}

impl Into<NullCircleAtOrigin> for CircleOrthogonalOrigin {
    fn into(self) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<AntiDipoleOnOrigin> for Dilator {
    fn into(self) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]),
            },
        }
    }
}

impl Into<AntiFlatPointAtOrigin> for Dilator {
    fn into(self) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups { g0: self.group3()[3] },
        }
    }
}

impl Into<AntiScalar> for Dilator {
    fn into(self) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups { g0: self.group0() },
        }
    }
}

impl Into<Circle> for Dilator {
    fn into(self) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group1(),
                g1: self.group2(),
                g2: self.group3(),
            },
        }
    }
}

impl Into<CircleAligningOrigin> for Dilator {
    fn into(self) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group1(),
                g1: self.group2(),
                g2: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]),
            },
        }
    }
}

impl Into<CircleAtInfinity> for Dilator {
    fn into(self) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group2(),
                g1: self.group3(),
            },
        }
    }
}

impl Into<CircleAtOrigin> for Dilator {
    fn into(self) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group1(),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]),
            },
        }
    }
}

impl Into<CircleOnOrigin> for Dilator {
    fn into(self) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group1(),
                g1: self.group2(),
            },
        }
    }
}

impl Into<CircleOrthogonalOrigin> for Dilator {
    fn into(self) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group1(),
                g1: self.group3(),
            },
        }
    }
}

impl Into<Line> for Dilator {
    fn into(self) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group2(),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]),
            },
        }
    }
}

impl Into<LineAtInfinity> for Dilator {
    fn into(self) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]),
            },
        }
    }
}

impl Into<LineAtOrigin> for Dilator {
    fn into(self) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups { g0: self.group2() },
        }
    }
}

impl Into<Motor> for Dilator {
    fn into(self) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]),
            },
        }
    }
}

impl Into<NullCircleAtOrigin> for Dilator {
    fn into(self) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups { g0: self.group1() },
        }
    }
}

impl Into<Rotor> for Dilator {
    fn into(self) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()]),
            },
        }
    }
}

impl Into<Translator> for Dilator {
    fn into(self) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()]),
            },
        }
    }
}

impl Into<AntiCircleOnOrigin> for Dipole {
    fn into(self) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl Into<AntiLineAtOrigin> for Dipole {
    fn into(self) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups { g0: self.group1() },
        }
    }
}

impl Into<DipoleAligningOrigin> for Dipole {
    fn into(self) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group2(),
            },
        }
    }
}

impl Into<DipoleAtInfinity> for Dipole {
    fn into(self) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group1(),
                g1: self.group2(),
            },
        }
    }
}

impl Into<DipoleAtOrigin> for Dipole {
    fn into(self) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0(),
                g1: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
            },
        }
    }
}

impl Into<DipoleOnOrigin> for Dipole {
    fn into(self) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
            },
        }
    }
}

impl Into<DipoleOrthogonalOrigin> for Dipole {
    fn into(self) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
            },
        }
    }
}

impl Into<FlatPoint> for Dipole {
    fn into(self) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups { g0: self.group2() },
        }
    }
}

impl Into<FlatPointAtInfinity> for Dipole {
    fn into(self) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
            },
        }
    }
}

impl Into<FlatPointAtOrigin> for Dipole {
    fn into(self) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups { g0: self.group2()[3] },
        }
    }
}

impl Into<NullDipoleAtOrigin> for Dipole {
    fn into(self) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<DipoleAtOrigin> for DipoleAligningOrigin {
    fn into(self) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0(),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
            },
        }
    }
}

impl Into<DipoleOnOrigin> for DipoleAligningOrigin {
    fn into(self) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
            },
        }
    }
}

impl Into<FlatPoint> for DipoleAligningOrigin {
    fn into(self) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups { g0: self.group1() },
        }
    }
}

impl Into<FlatPointAtInfinity> for DipoleAligningOrigin {
    fn into(self) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
            },
        }
    }
}

impl Into<FlatPointAtOrigin> for DipoleAligningOrigin {
    fn into(self) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups { g0: self.group1()[3] },
        }
    }
}

impl Into<NullDipoleAtOrigin> for DipoleAligningOrigin {
    fn into(self) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<AntiLineAtOrigin> for DipoleAtInfinity {
    fn into(self) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<FlatPoint> for DipoleAtInfinity {
    fn into(self) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups { g0: self.group1() },
        }
    }
}

impl Into<FlatPointAtInfinity> for DipoleAtInfinity {
    fn into(self) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
            },
        }
    }
}

impl Into<FlatPointAtOrigin> for DipoleAtInfinity {
    fn into(self) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups { g0: self.group1()[3] },
        }
    }
}

impl Into<FlatPointAtInfinity> for DipoleAtOrigin {
    fn into(self) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups { g0: self.group1() },
        }
    }
}

impl Into<NullDipoleAtOrigin> for DipoleAtOrigin {
    fn into(self) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<FlatPointAtOrigin> for DipoleOnOrigin {
    fn into(self) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups { g0: self.group0()[3] },
        }
    }
}

impl Into<NullDipoleAtOrigin> for DipoleOnOrigin {
    fn into(self) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Into<AntiCircleOnOrigin> for DipoleOrthogonalOrigin {
    fn into(self) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl Into<AntiLineAtOrigin> for DipoleOrthogonalOrigin {
    fn into(self) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups { g0: self.group1() },
        }
    }
}

impl Into<DipoleAtOrigin> for DipoleOrthogonalOrigin {
    fn into(self) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0(),
                g1: self.group2(),
            },
        }
    }
}

impl Into<FlatPointAtInfinity> for DipoleOrthogonalOrigin {
    fn into(self) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups { g0: self.group2() },
        }
    }
}

impl Into<NullDipoleAtOrigin> for DipoleOrthogonalOrigin {
    fn into(self) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<AntiScalar> for DualNum {
    fn into(self) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups { g0: self.group0()[1] },
        }
    }
}

impl Into<Scalar> for DualNum {
    fn into(self) -> Scalar {
        Scalar {
            groups: ScalarGroups { g0: self.group0()[0] },
        }
    }
}

impl Into<FlatPointAtInfinity> for FlatPoint {
    fn into(self) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Into<FlatPointAtOrigin> for FlatPoint {
    fn into(self) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups { g0: self.group0()[3] },
        }
    }
}

impl Into<FlatPoint> for Flector {
    fn into(self) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups { g0: self.group0() },
        }
    }
}

impl Into<FlatPointAtInfinity> for Flector {
    fn into(self) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Into<FlatPointAtOrigin> for Flector {
    fn into(self) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups { g0: self.group0()[3] },
        }
    }
}

impl Into<FlectorAtInfinity> for Flector {
    fn into(self) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
            },
        }
    }
}

impl Into<Horizon> for Flector {
    fn into(self) -> Horizon {
        Horizon {
            groups: HorizonGroups { g0: self.group1()[3] },
        }
    }
}

impl Into<Plane> for Flector {
    fn into(self) -> Plane {
        Plane {
            groups: PlaneGroups { g0: self.group1() },
        }
    }
}

impl Into<PlaneAtOrigin> for Flector {
    fn into(self) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
            },
        }
    }
}

impl Into<Transflector> for Flector {
    fn into(self) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: self.group1(),
            },
        }
    }
}

impl Into<FlatPointAtInfinity> for FlectorAtInfinity {
    fn into(self) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Into<Horizon> for FlectorAtInfinity {
    fn into(self) -> Horizon {
        Horizon {
            groups: HorizonGroups { g0: self.group0()[3] },
        }
    }
}

impl Into<LineAtInfinity> for Line {
    fn into(self) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups { g0: self.group1() },
        }
    }
}

impl Into<LineAtOrigin> for Line {
    fn into(self) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<AntiScalar> for Motor {
    fn into(self) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups { g0: self.group0()[3] },
        }
    }
}

impl Into<Line> for Motor {
    fn into(self) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: self.group1(),
            },
        }
    }
}

impl Into<LineAtInfinity> for Motor {
    fn into(self) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups { g0: self.group1() },
        }
    }
}

impl Into<LineAtOrigin> for Motor {
    fn into(self) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Into<Rotor> for Motor {
    fn into(self) -> Rotor {
        Rotor {
            groups: RotorGroups { g0: self.group0() },
        }
    }
}

impl Into<Translator> for Motor {
    fn into(self) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]),
            },
        }
    }
}

impl Into<AntiCircleOnOrigin> for MultiVector {
    fn into(self) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]),
                g1: self.group4(),
            },
        }
    }
}

impl Into<AntiDipoleOnOrigin> for MultiVector {
    fn into(self) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group8()[3]]),
            },
        }
    }
}

impl Into<AntiFlatPointAtOrigin> for MultiVector {
    fn into(self) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups { g0: self.group8()[3] },
        }
    }
}

impl Into<AntiLineAtOrigin> for MultiVector {
    fn into(self) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups { g0: self.group4() },
        }
    }
}

impl Into<AntiPlane> for MultiVector {
    fn into(self) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]),
            },
        }
    }
}

impl Into<AntiPlaneAtOrigin> for MultiVector {
    fn into(self) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups { g0: self.group1() },
        }
    }
}

impl Into<AntiScalar> for MultiVector {
    fn into(self) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups { g0: self.group0()[1] },
        }
    }
}

impl Into<AntiSphereOnOrigin> for MultiVector {
    fn into(self) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]),
            },
        }
    }
}

impl Into<Circle> for MultiVector {
    fn into(self) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group6(),
                g1: self.group7(),
                g2: self.group8(),
            },
        }
    }
}

impl Into<CircleAligningOrigin> for MultiVector {
    fn into(self) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group6(),
                g1: self.group7(),
                g2: Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]),
            },
        }
    }
}

impl Into<CircleAtInfinity> for MultiVector {
    fn into(self) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group7(),
                g1: self.group8(),
            },
        }
    }
}

impl Into<CircleAtOrigin> for MultiVector {
    fn into(self) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group6(),
                g1: Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]),
            },
        }
    }
}

impl Into<CircleOnOrigin> for MultiVector {
    fn into(self) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group6(),
                g1: self.group7(),
            },
        }
    }
}

impl Into<CircleOrthogonalOrigin> for MultiVector {
    fn into(self) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group6(),
                g1: self.group8(),
            },
        }
    }
}

impl Into<Dilator> for MultiVector {
    fn into(self) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[1],
                g1: self.group6(),
                g2: self.group7(),
                g3: self.group8(),
            },
        }
    }
}

impl Into<Dipole> for MultiVector {
    fn into(self) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]),
                g1: self.group4(),
                g2: Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]),
            },
        }
    }
}

impl Into<DipoleAligningOrigin> for MultiVector {
    fn into(self) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]),
                g1: Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]),
            },
        }
    }
}

impl Into<DipoleAtInfinity> for MultiVector {
    fn into(self) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group4(),
                g1: Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]),
            },
        }
    }
}

impl Into<DipoleAtOrigin> for MultiVector {
    fn into(self) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]),
                g1: self.group5(),
            },
        }
    }
}

impl Into<DipoleOnOrigin> for MultiVector {
    fn into(self) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups { g0: self.group3() },
        }
    }
}

impl Into<DipoleOrthogonalOrigin> for MultiVector {
    fn into(self) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]),
                g1: self.group4(),
                g2: self.group5(),
            },
        }
    }
}

impl Into<DualNum> for MultiVector {
    fn into(self) -> DualNum {
        DualNum {
            groups: DualNumGroups { g0: self.group0() },
        }
    }
}

impl Into<FlatPoint> for MultiVector {
    fn into(self) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]),
            },
        }
    }
}

impl Into<FlatPointAtInfinity> for MultiVector {
    fn into(self) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups { g0: self.group5() },
        }
    }
}

impl Into<FlatPointAtOrigin> for MultiVector {
    fn into(self) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups { g0: self.group3()[3] },
        }
    }
}

impl Into<Flector> for MultiVector {
    fn into(self) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]),
                g1: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group10()[1]]),
            },
        }
    }
}

impl Into<FlectorAtInfinity> for MultiVector {
    fn into(self) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group10()[1]]),
            },
        }
    }
}

impl Into<Horizon> for MultiVector {
    fn into(self) -> Horizon {
        Horizon {
            groups: HorizonGroups { g0: self.group10()[1] },
        }
    }
}

impl Into<Infinity> for MultiVector {
    fn into(self) -> Infinity {
        Infinity {
            groups: InfinityGroups { g0: self.group2()[1] },
        }
    }
}

impl Into<Line> for MultiVector {
    fn into(self) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group7(),
                g1: Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]),
            },
        }
    }
}

impl Into<LineAtInfinity> for MultiVector {
    fn into(self) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]),
            },
        }
    }
}

impl Into<LineAtOrigin> for MultiVector {
    fn into(self) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups { g0: self.group7() },
        }
    }
}

impl Into<Motor> for MultiVector {
    fn into(self) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]),
                g1: Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]),
            },
        }
    }
}

impl Into<NullCircleAtOrigin> for MultiVector {
    fn into(self) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups { g0: self.group6() },
        }
    }
}

impl Into<NullDipoleAtOrigin> for MultiVector {
    fn into(self) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]),
            },
        }
    }
}

impl Into<NullSphereAtOrigin> for MultiVector {
    fn into(self) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups { g0: self.group10()[0] },
        }
    }
}

impl Into<Origin> for MultiVector {
    fn into(self) -> Origin {
        Origin {
            groups: OriginGroups { g0: self.group2()[0] },
        }
    }
}

impl Into<Plane> for MultiVector {
    fn into(self) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group10()[1]]),
            },
        }
    }
}

impl Into<PlaneAtOrigin> for MultiVector {
    fn into(self) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups { g0: self.group9() },
        }
    }
}

impl Into<Rotor> for MultiVector {
    fn into(self) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]),
            },
        }
    }
}

impl Into<RoundPoint> for MultiVector {
    fn into(self) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group1(),
                g1: self.group2(),
            },
        }
    }
}

impl Into<RoundPointAtOrigin> for MultiVector {
    fn into(self) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups { g0: self.group2() },
        }
    }
}

impl Into<Scalar> for MultiVector {
    fn into(self) -> Scalar {
        Scalar {
            groups: ScalarGroups { g0: self.group0()[0] },
        }
    }
}

impl Into<Sphere> for MultiVector {
    fn into(self) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group9(),
                g1: self.group10(),
            },
        }
    }
}

impl Into<SphereAtOrigin> for MultiVector {
    fn into(self) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups { g0: self.group10() },
        }
    }
}

impl Into<SphereOnOrigin> for MultiVector {
    fn into(self) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group10()[0]]),
            },
        }
    }
}

impl Into<Transflector> for MultiVector {
    fn into(self) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group5(),
                g1: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group10()[1]]),
            },
        }
    }
}

impl Into<Translator> for MultiVector {
    fn into(self) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group0()[1]]),
            },
        }
    }
}

impl Into<Horizon> for Plane {
    fn into(self) -> Horizon {
        Horizon {
            groups: HorizonGroups { g0: self.group0()[3] },
        }
    }
}

impl Into<PlaneAtOrigin> for Plane {
    fn into(self) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Into<AntiScalar> for Rotor {
    fn into(self) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups { g0: self.group0()[3] },
        }
    }
}

impl Into<LineAtOrigin> for Rotor {
    fn into(self) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Into<AntiPlane> for RoundPoint {
    fn into(self) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]),
            },
        }
    }
}

impl Into<AntiPlaneAtOrigin> for RoundPoint {
    fn into(self) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<AntiSphereOnOrigin> for RoundPoint {
    fn into(self) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]),
            },
        }
    }
}

impl Into<Infinity> for RoundPoint {
    fn into(self) -> Infinity {
        Infinity {
            groups: InfinityGroups { g0: self.group1()[1] },
        }
    }
}

impl Into<Origin> for RoundPoint {
    fn into(self) -> Origin {
        Origin {
            groups: OriginGroups { g0: self.group1()[0] },
        }
    }
}

impl Into<RoundPointAtOrigin> for RoundPoint {
    fn into(self) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups { g0: self.group1() },
        }
    }
}

impl Into<Infinity> for RoundPointAtOrigin {
    fn into(self) -> Infinity {
        Infinity {
            groups: InfinityGroups { g0: self.group0()[1] },
        }
    }
}

impl Into<Origin> for RoundPointAtOrigin {
    fn into(self) -> Origin {
        Origin {
            groups: OriginGroups { g0: self.group0()[0] },
        }
    }
}

impl Into<Horizon> for Sphere {
    fn into(self) -> Horizon {
        Horizon {
            groups: HorizonGroups { g0: self.group1()[1] },
        }
    }
}

impl Into<NullSphereAtOrigin> for Sphere {
    fn into(self) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups { g0: self.group1()[0] },
        }
    }
}

impl Into<Plane> for Sphere {
    fn into(self) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]),
            },
        }
    }
}

impl Into<PlaneAtOrigin> for Sphere {
    fn into(self) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups { g0: self.group0() },
        }
    }
}

impl Into<SphereAtOrigin> for Sphere {
    fn into(self) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups { g0: self.group1() },
        }
    }
}

impl Into<SphereOnOrigin> for Sphere {
    fn into(self) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]),
            },
        }
    }
}

impl Into<Horizon> for SphereAtOrigin {
    fn into(self) -> Horizon {
        Horizon {
            groups: HorizonGroups { g0: self.group0()[1] },
        }
    }
}

impl Into<NullSphereAtOrigin> for SphereAtOrigin {
    fn into(self) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups { g0: self.group0()[0] },
        }
    }
}

impl Into<NullSphereAtOrigin> for SphereOnOrigin {
    fn into(self) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups { g0: self.group0()[3] },
        }
    }
}

impl Into<PlaneAtOrigin> for SphereOnOrigin {
    fn into(self) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Into<FlatPointAtInfinity> for Transflector {
    fn into(self) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups { g0: self.group0() },
        }
    }
}

impl Into<FlectorAtInfinity> for Transflector {
    fn into(self) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
            },
        }
    }
}

impl Into<Horizon> for Transflector {
    fn into(self) -> Horizon {
        Horizon {
            groups: HorizonGroups { g0: self.group1()[3] },
        }
    }
}

impl Into<Plane> for Transflector {
    fn into(self) -> Plane {
        Plane {
            groups: PlaneGroups { g0: self.group1() },
        }
    }
}

impl Into<PlaneAtOrigin> for Transflector {
    fn into(self) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
            },
        }
    }
}

impl Into<AntiScalar> for Translator {
    fn into(self) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups { g0: self.group0()[3] },
        }
    }
}

impl Into<LineAtInfinity> for Translator {
    fn into(self) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Mul<AntiCircleOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn mul(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<AntiCircleOnOrigin> for AntiCircleOnOrigin {
    fn mul_assign(&mut self, other: AntiCircleOnOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<AntiDipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn mul(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<AntiDipoleOnOrigin> for AntiDipoleOnOrigin {
    fn mul_assign(&mut self, other: AntiDipoleOnOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<AntiFlatPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn mul(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<AntiFlatPointAtOrigin> for AntiFlatPointAtOrigin {
    fn mul_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<AntiLineAtOrigin> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn mul(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<AntiLineAtOrigin> for AntiLineAtOrigin {
    fn mul_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<AntiPlane> for AntiPlane {
    type Output = AntiPlane;

    fn mul(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<AntiPlane> for AntiPlane {
    fn mul_assign(&mut self, other: AntiPlane) {
        *self = (*self).mul(other);
    }
}

impl Mul<AntiPlaneAtOrigin> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn mul(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<AntiPlaneAtOrigin> for AntiPlaneAtOrigin {
    fn mul_assign(&mut self, other: AntiPlaneAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<AntiScalar> for AntiScalar {
    type Output = AntiScalar;

    fn mul(self, other: AntiScalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<AntiScalar> for AntiScalar {
    fn mul_assign(&mut self, other: AntiScalar) {
        *self = (*self).mul(other);
    }
}

impl Mul<AntiSphereOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn mul(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<AntiSphereOnOrigin> for AntiSphereOnOrigin {
    fn mul_assign(&mut self, other: AntiSphereOnOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<Circle> for Circle {
    type Output = Circle;

    fn mul(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
                g2: self.group2() * other.group2(),
            },
        }
    }
}

impl MulAssign<Circle> for Circle {
    fn mul_assign(&mut self, other: Circle) {
        *self = (*self).mul(other);
    }
}

impl Mul<CircleAligningOrigin> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn mul(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
                g2: self.group2() * other.group2(),
            },
        }
    }
}

impl MulAssign<CircleAligningOrigin> for CircleAligningOrigin {
    fn mul_assign(&mut self, other: CircleAligningOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<CircleAtInfinity> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn mul(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<CircleAtInfinity> for CircleAtInfinity {
    fn mul_assign(&mut self, other: CircleAtInfinity) {
        *self = (*self).mul(other);
    }
}

impl Mul<CircleAtOrigin> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn mul(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<CircleAtOrigin> for CircleAtOrigin {
    fn mul_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<CircleOnOrigin> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn mul(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<CircleOnOrigin> for CircleOnOrigin {
    fn mul_assign(&mut self, other: CircleOnOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<CircleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn mul(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<CircleOrthogonalOrigin> for CircleOrthogonalOrigin {
    fn mul_assign(&mut self, other: CircleOrthogonalOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<Dilator> for Dilator {
    type Output = Dilator;

    fn mul(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
                g2: self.group2() * other.group2(),
                g3: self.group3() * other.group3(),
            },
        }
    }
}

impl MulAssign<Dilator> for Dilator {
    fn mul_assign(&mut self, other: Dilator) {
        *self = (*self).mul(other);
    }
}

impl Mul<Dipole> for Dipole {
    type Output = Dipole;

    fn mul(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
                g2: self.group2() * other.group2(),
            },
        }
    }
}

impl MulAssign<Dipole> for Dipole {
    fn mul_assign(&mut self, other: Dipole) {
        *self = (*self).mul(other);
    }
}

impl Mul<DipoleAligningOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn mul(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<DipoleAligningOrigin> for DipoleAligningOrigin {
    fn mul_assign(&mut self, other: DipoleAligningOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<DipoleAtInfinity> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn mul(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<DipoleAtInfinity> for DipoleAtInfinity {
    fn mul_assign(&mut self, other: DipoleAtInfinity) {
        *self = (*self).mul(other);
    }
}

impl Mul<DipoleAtOrigin> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn mul(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<DipoleAtOrigin> for DipoleAtOrigin {
    fn mul_assign(&mut self, other: DipoleAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<DipoleOnOrigin> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn mul(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<DipoleOnOrigin> for DipoleOnOrigin {
    fn mul_assign(&mut self, other: DipoleOnOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<DipoleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn mul(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
                g2: self.group2() * other.group2(),
            },
        }
    }
}

impl MulAssign<DipoleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    fn mul_assign(&mut self, other: DipoleOrthogonalOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<DualNum> for DualNum {
    type Output = DualNum;

    fn mul(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<DualNum> for DualNum {
    fn mul_assign(&mut self, other: DualNum) {
        *self = (*self).mul(other);
    }
}

impl Mul<FlatPoint> for FlatPoint {
    type Output = FlatPoint;

    fn mul(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<FlatPoint> for FlatPoint {
    fn mul_assign(&mut self, other: FlatPoint) {
        *self = (*self).mul(other);
    }
}

impl Mul<FlatPointAtInfinity> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn mul(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<FlatPointAtInfinity> for FlatPointAtInfinity {
    fn mul_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).mul(other);
    }
}

impl Mul<FlatPointAtOrigin> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn mul(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<FlatPointAtOrigin> for FlatPointAtOrigin {
    fn mul_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<Flector> for Flector {
    type Output = Flector;

    fn mul(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<Flector> for Flector {
    fn mul_assign(&mut self, other: Flector) {
        *self = (*self).mul(other);
    }
}

impl Mul<FlectorAtInfinity> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn mul(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<FlectorAtInfinity> for FlectorAtInfinity {
    fn mul_assign(&mut self, other: FlectorAtInfinity) {
        *self = (*self).mul(other);
    }
}

impl Mul<Horizon> for Horizon {
    type Output = Horizon;

    fn mul(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<Horizon> for Horizon {
    fn mul_assign(&mut self, other: Horizon) {
        *self = (*self).mul(other);
    }
}

impl Mul<Infinity> for Infinity {
    type Output = Infinity;

    fn mul(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<Infinity> for Infinity {
    fn mul_assign(&mut self, other: Infinity) {
        *self = (*self).mul(other);
    }
}

impl Mul<Line> for Line {
    type Output = Line;

    fn mul(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<Line> for Line {
    fn mul_assign(&mut self, other: Line) {
        *self = (*self).mul(other);
    }
}

impl Mul<LineAtInfinity> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn mul(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<LineAtInfinity> for LineAtInfinity {
    fn mul_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).mul(other);
    }
}

impl Mul<LineAtOrigin> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn mul(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<LineAtOrigin> for LineAtOrigin {
    fn mul_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<Motor> for Motor {
    type Output = Motor;

    fn mul(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<Motor> for Motor {
    fn mul_assign(&mut self, other: Motor) {
        *self = (*self).mul(other);
    }
}

impl Mul<MultiVector> for MultiVector {
    type Output = MultiVector;

    fn mul(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
                g2: self.group2() * other.group2(),
                g3: self.group3() * other.group3(),
                g4: self.group4() * other.group4(),
                g5: self.group5() * other.group5(),
                g6: self.group6() * other.group6(),
                g7: self.group7() * other.group7(),
                g8: self.group8() * other.group8(),
                g9: self.group9() * other.group9(),
                g10: self.group10() * other.group10(),
            },
        }
    }
}

impl MulAssign<MultiVector> for MultiVector {
    fn mul_assign(&mut self, other: MultiVector) {
        *self = (*self).mul(other);
    }
}

impl Mul<NullCircleAtOrigin> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn mul(self, other: NullCircleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<NullCircleAtOrigin> for NullCircleAtOrigin {
    fn mul_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<NullDipoleAtOrigin> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn mul(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<NullDipoleAtOrigin> for NullDipoleAtOrigin {
    fn mul_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<NullSphereAtOrigin> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn mul(self, other: NullSphereAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<NullSphereAtOrigin> for NullSphereAtOrigin {
    fn mul_assign(&mut self, other: NullSphereAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<Origin> for Origin {
    type Output = Origin;

    fn mul(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<Origin> for Origin {
    fn mul_assign(&mut self, other: Origin) {
        *self = (*self).mul(other);
    }
}

impl Mul<Plane> for Plane {
    type Output = Plane;

    fn mul(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<Plane> for Plane {
    fn mul_assign(&mut self, other: Plane) {
        *self = (*self).mul(other);
    }
}

impl Mul<PlaneAtOrigin> for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn mul(self, other: PlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<PlaneAtOrigin> for PlaneAtOrigin {
    fn mul_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<Rotor> for Rotor {
    type Output = Rotor;

    fn mul(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<Rotor> for Rotor {
    fn mul_assign(&mut self, other: Rotor) {
        *self = (*self).mul(other);
    }
}

impl Mul<RoundPoint> for RoundPoint {
    type Output = RoundPoint;

    fn mul(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<RoundPoint> for RoundPoint {
    fn mul_assign(&mut self, other: RoundPoint) {
        *self = (*self).mul(other);
    }
}

impl Mul<RoundPointAtOrigin> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn mul(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<RoundPointAtOrigin> for RoundPointAtOrigin {
    fn mul_assign(&mut self, other: RoundPointAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<Scalar> for Scalar {
    type Output = Scalar;

    fn mul(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<Scalar> for Scalar {
    fn mul_assign(&mut self, other: Scalar) {
        *self = (*self).mul(other);
    }
}

impl Mul<Sphere> for Sphere {
    type Output = Sphere;

    fn mul(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<Sphere> for Sphere {
    fn mul_assign(&mut self, other: Sphere) {
        *self = (*self).mul(other);
    }
}

impl Mul<SphereAtOrigin> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn mul(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<SphereAtOrigin> for SphereAtOrigin {
    fn mul_assign(&mut self, other: SphereAtOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<SphereOnOrigin> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn mul(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<SphereOnOrigin> for SphereOnOrigin {
    fn mul_assign(&mut self, other: SphereOnOrigin) {
        *self = (*self).mul(other);
    }
}

impl Mul<Transflector> for Transflector {
    type Output = Transflector;

    fn mul(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() * other.group0(),
                g1: self.group1() * other.group1(),
            },
        }
    }
}

impl MulAssign<Transflector> for Transflector {
    fn mul_assign(&mut self, other: Transflector) {
        *self = (*self).mul(other);
    }
}

impl Mul<Translator> for Translator {
    type Output = Translator;

    fn mul(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl MulAssign<Translator> for Translator {
    fn mul_assign(&mut self, other: Translator) {
        *self = (*self).mul(other);
    }
}

impl Sub<AntiCircleOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn sub(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<AntiCircleOnOrigin> for AntiCircleOnOrigin {
    fn sub_assign(&mut self, other: AntiCircleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiDipoleOnOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn sub(self, other: AntiLineAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
            },
        }
    }
}

impl SubAssign<AntiLineAtOrigin> for AntiCircleOnOrigin {
    fn sub_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiPlane> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for AntiCircleOnOrigin {
    type Output = Dipole;

    fn sub(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: Simd32x4::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for AntiCircleOnOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for AntiCircleOnOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for AntiCircleOnOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: DipoleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for AntiCircleOnOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1(),
                g2: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<DualNum> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for AntiCircleOnOrigin {
    type Output = Dipole;

    fn sub(self, other: FlatPoint) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x4::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for AntiCircleOnOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: FlatPointAtInfinity) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x3::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for AntiCircleOnOrigin {
    type Output = Dipole;

    fn sub(self, other: FlatPointAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Flector> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group3(),
                g4: self.group1() - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn sub(self, other: NullDipoleAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<NullDipoleAtOrigin> for AntiCircleOnOrigin {
    fn sub_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullSphereAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn sub(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<AntiDipoleOnOrigin> for AntiDipoleOnOrigin {
    fn sub_assign(&mut self, other: AntiDipoleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiFlatPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn sub(self, other: AntiFlatPointAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<AntiFlatPointAtOrigin> for AntiDipoleOnOrigin {
    fn sub_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiLineAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for AntiDipoleOnOrigin {
    type Output = Dilator;

    fn sub(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for AntiDipoleOnOrigin {
    type Output = Circle;

    fn sub(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = Circle;

    fn sub(self, other: CircleAligningOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for AntiDipoleOnOrigin {
    type Output = Circle;

    fn sub(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for AntiDipoleOnOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: CircleAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for AntiDipoleOnOrigin {
    type Output = Circle;

    fn sub(self, other: CircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for AntiDipoleOnOrigin {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for AntiDipoleOnOrigin {
    type Output = Circle;

    fn sub(self, other: Line) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<LineAtInfinity> for AntiDipoleOnOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: LineAtInfinity) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<LineAtOrigin> for AntiDipoleOnOrigin {
    type Output = Circle;

    fn sub(self, other: LineAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Motor> for AntiDipoleOnOrigin {
    type Output = Dilator;

    fn sub(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<MultiVector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn sub(self, other: NullCircleAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<NullCircleAtOrigin> for AntiDipoleOnOrigin {
    fn sub_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullDipoleAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for AntiDipoleOnOrigin {
    type Output = Dilator;

    fn sub(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<RoundPoint> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for AntiDipoleOnOrigin {
    type Output = Dilator;

    fn sub(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn sub(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn sub(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<AntiFlatPointAtOrigin> for AntiFlatPointAtOrigin {
    fn sub_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiLineAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for AntiFlatPointAtOrigin {
    type Output = Dilator;

    fn sub(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for AntiFlatPointAtOrigin {
    type Output = Circle;

    fn sub(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for AntiFlatPointAtOrigin {
    type Output = Circle;

    fn sub(self, other: CircleAligningOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for AntiFlatPointAtOrigin {
    type Output = CircleAtInfinity;

    fn sub(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for AntiFlatPointAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: CircleAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = Circle;

    fn sub(self, other: CircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for AntiFlatPointAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for AntiFlatPointAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for AntiFlatPointAtOrigin {
    type Output = CircleAtInfinity;

    fn sub(self, other: Line) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<LineAtInfinity> for AntiFlatPointAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: LineAtInfinity) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<LineAtOrigin> for AntiFlatPointAtOrigin {
    type Output = CircleAtInfinity;

    fn sub(self, other: LineAtOrigin) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Sub<Motor> for AntiFlatPointAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<MultiVector> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn sub(self, other: NullCircleAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for AntiFlatPointAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Sub<RoundPoint> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for AntiFlatPointAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for AntiLineAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn sub(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn sub(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<AntiLineAtOrigin> for AntiLineAtOrigin {
    fn sub_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiPlane> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for AntiLineAtOrigin {
    type Output = Dipole;

    fn sub(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: Simd32x4::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for AntiLineAtOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for AntiLineAtOrigin {
    type Output = DipoleAtInfinity;

    fn sub(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for AntiLineAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: DipoleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for AntiLineAtOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0(),
                g2: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for AntiLineAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<DualNum> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for AntiLineAtOrigin {
    type Output = DipoleAtInfinity;

    fn sub(self, other: FlatPoint) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0(),
                g1: Simd32x4::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for AntiLineAtOrigin {
    type Output = DipoleAtInfinity;

    fn sub(self, other: FlatPointAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0(),
                g1: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for AntiLineAtOrigin {
    type Output = DipoleAtInfinity;

    fn sub(self, other: FlatPointAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0(),
                g1: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Flector> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: self.group0() - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for AntiLineAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn sub(self, other: NullDipoleAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for AntiPlane {
    type Output = AntiPlane;

    fn sub(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<AntiPlane> for AntiPlane {
    fn sub_assign(&mut self, other: AntiPlane) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiPlaneAtOrigin> for AntiPlane {
    type Output = AntiPlane;

    fn sub(self, other: AntiPlaneAtOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<AntiPlaneAtOrigin> for AntiPlane {
    fn sub_assign(&mut self, other: AntiPlaneAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiScalar> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for AntiPlane {
    type Output = RoundPoint;

    fn sub(self, other: AntiSphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()[3]]) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Circle> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for AntiPlane {
    type Output = AntiPlane;

    fn sub(self, other: Infinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<Infinity> for AntiPlane {
    fn sub_assign(&mut self, other: Infinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<Line> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
                g2: Simd32x2::from([0.0, self.group0()[3]]) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for AntiPlane {
    type Output = RoundPoint;

    fn sub(self, other: Origin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()[3]]) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Plane> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for AntiPlane {
    type Output = RoundPoint;

    fn sub(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x2::from([0.0, self.group0()[3]]) - other.group1(),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for AntiPlane {
    type Output = RoundPoint;

    fn sub(self, other: RoundPointAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()[3]]) - other.group0(),
            },
        }
    }
}

impl Sub<Scalar> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for AntiPlane {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([0.0, self.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for AntiPlaneAtOrigin {
    type Output = AntiPlane;

    fn sub(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn sub(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<AntiPlaneAtOrigin> for AntiPlaneAtOrigin {
    fn sub_assign(&mut self, other: AntiPlaneAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiScalar> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for AntiPlaneAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn sub(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<Circle> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for AntiPlaneAtOrigin {
    type Output = AntiPlane;

    fn sub(self, other: Infinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Line> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for AntiPlaneAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn sub(self, other: Origin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Plane> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for AntiPlaneAtOrigin {
    type Output = RoundPoint;

    fn sub(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for AntiPlaneAtOrigin {
    type Output = RoundPoint;

    fn sub(self, other: RoundPointAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0(),
                g1: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<Scalar> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for AntiScalar {
    type Output = Dilator;

    fn sub(self, other: AntiDipoleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for AntiScalar {
    type Output = Dilator;

    fn sub(self, other: AntiFlatPointAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for AntiScalar {
    type Output = AntiScalar;

    fn sub(self, other: AntiScalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<AntiScalar> for AntiScalar {
    fn sub_assign(&mut self, other: AntiScalar) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiSphereOnOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for AntiScalar {
    type Output = Dilator;

    fn sub(self, other: Circle) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for AntiScalar {
    type Output = Dilator;

    fn sub(self, other: CircleAligningOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for AntiScalar {
    type Output = Dilator;

    fn sub(self, other: CircleAtInfinity) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for AntiScalar {
    type Output = Dilator;

    fn sub(self, other: CircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for AntiScalar {
    type Output = Dilator;

    fn sub(self, other: CircleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for AntiScalar {
    type Output = Dilator;

    fn sub(self, other: CircleOrthogonalOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for AntiScalar {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for AntiScalar {
    type Output = DualNum;

    fn sub(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from([0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<FlatPoint> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for AntiScalar {
    type Output = Motor;

    fn sub(self, other: Line) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<LineAtInfinity> for AntiScalar {
    type Output = Translator;

    fn sub(self, other: LineAtInfinity) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<LineAtOrigin> for AntiScalar {
    type Output = Rotor;

    fn sub(self, other: LineAtOrigin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<Motor> for AntiScalar {
    type Output = Motor;

    fn sub(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<MultiVector> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for AntiScalar {
    type Output = Dilator;

    fn sub(self, other: NullCircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for AntiScalar {
    type Output = Rotor;

    fn sub(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<RoundPoint> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for AntiScalar {
    type Output = DualNum;

    fn sub(self, other: Scalar) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from([0.0, self.group0()]) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Sphere> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for AntiScalar {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for AntiScalar {
    type Output = Translator;

    fn sub(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for AntiSphereOnOrigin {
    type Output = RoundPoint;

    fn sub(self, other: AntiPlane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([self.group0()[3], 0.0]) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn sub(self, other: AntiPlaneAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<AntiPlaneAtOrigin> for AntiSphereOnOrigin {
    fn sub_assign(&mut self, other: AntiPlaneAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiScalar> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn sub(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<AntiSphereOnOrigin> for AntiSphereOnOrigin {
    fn sub_assign(&mut self, other: AntiSphereOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Circle> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for AntiSphereOnOrigin {
    type Output = RoundPoint;

    fn sub(self, other: Infinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([self.group0()[3], 0.0]) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Line> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
                g2: Simd32x2::from([self.group0()[3], 0.0]) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn sub(self, other: Origin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<Origin> for AntiSphereOnOrigin {
    fn sub_assign(&mut self, other: Origin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Plane> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for AntiSphereOnOrigin {
    type Output = RoundPoint;

    fn sub(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x2::from([self.group0()[3], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for AntiSphereOnOrigin {
    type Output = RoundPoint;

    fn sub(self, other: RoundPointAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([self.group0()[3], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<Scalar> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g2: Simd32x2::from([self.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Circle {
    type Output = Circle;

    fn sub(self, other: AntiDipoleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1(),
                g2: self.group2() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl SubAssign<AntiDipoleOnOrigin> for Circle {
    fn sub_assign(&mut self, other: AntiDipoleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiFlatPointAtOrigin> for Circle {
    type Output = Circle;

    fn sub(self, other: AntiFlatPointAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<AntiFlatPointAtOrigin> for Circle {
    fn sub_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiLineAtOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for Circle {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for Circle {
    type Output = Dilator;

    fn sub(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: self.group0(),
                g2: self.group1(),
                g3: self.group2(),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for Circle {
    type Output = Circle;

    fn sub(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: self.group2() - other.group2(),
            },
        }
    }
}

impl SubAssign<Circle> for Circle {
    fn sub_assign(&mut self, other: Circle) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleAligningOrigin> for Circle {
    type Output = Circle;

    fn sub(self, other: CircleAligningOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: self.group2() - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<CircleAligningOrigin> for Circle {
    fn sub_assign(&mut self, other: CircleAligningOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleAtInfinity> for Circle {
    type Output = Circle;

    fn sub(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2() - other.group1(),
            },
        }
    }
}

impl SubAssign<CircleAtInfinity> for Circle {
    fn sub_assign(&mut self, other: CircleAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleAtOrigin> for Circle {
    type Output = Circle;

    fn sub(self, other: CircleAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: self.group2() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<CircleAtOrigin> for Circle {
    fn sub_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleOnOrigin> for Circle {
    type Output = Circle;

    fn sub(self, other: CircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl SubAssign<CircleOnOrigin> for Circle {
    fn sub_assign(&mut self, other: CircleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleOrthogonalOrigin> for Circle {
    type Output = Circle;

    fn sub(self, other: CircleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: self.group2() - other.group1(),
            },
        }
    }
}

impl SubAssign<CircleOrthogonalOrigin> for Circle {
    fn sub_assign(&mut self, other: CircleOrthogonalOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Dilator> for Circle {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: self.group0() - other.group1(),
                g2: self.group1() - other.group2(),
                g3: self.group2() - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for Circle {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Circle {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for Circle {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for Circle {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Circle {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for Circle {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Circle {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for Circle {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for Circle {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for Circle {
    type Output = Circle;

    fn sub(self, other: Line) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<Line> for Circle {
    fn sub_assign(&mut self, other: Line) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtInfinity> for Circle {
    type Output = Circle;

    fn sub(self, other: LineAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<LineAtInfinity> for Circle {
    fn sub_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtOrigin> for Circle {
    type Output = Circle;

    fn sub(self, other: LineAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2(),
            },
        }
    }
}

impl SubAssign<LineAtOrigin> for Circle {
    fn sub_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Motor> for Circle {
    type Output = Dilator;

    fn sub(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group2() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<MultiVector> for Circle {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: self.group0() - other.group6(),
                g7: self.group1() - other.group7(),
                g8: self.group2() - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Circle {
    type Output = Circle;

    fn sub(self, other: NullCircleAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl SubAssign<NullCircleAtOrigin> for Circle {
    fn sub_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullDipoleAtOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for Circle {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for Circle {
    type Output = Dilator;

    fn sub(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group2(),
            },
        }
    }
}

impl Sub<RoundPoint> for Circle {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for Circle {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for Circle {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Circle {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Circle {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group0(),
                g7: self.group1(),
                g8: self.group2(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for Circle {
    type Output = Dilator;

    fn sub(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: self.group1(),
                g3: self.group2() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for CircleAligningOrigin {
    type Output = Circle;

    fn sub(self, other: AntiDipoleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for CircleAligningOrigin {
    type Output = Circle;

    fn sub(self, other: AntiFlatPointAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for CircleAligningOrigin {
    type Output = Dilator;

    fn sub(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for CircleAligningOrigin {
    type Output = Circle;

    fn sub(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: self.group2() - other.group2(),
            },
        }
    }
}

impl SubAssign<CircleAligningOrigin> for CircleAligningOrigin {
    fn sub_assign(&mut self, other: CircleAligningOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleAtInfinity> for CircleAligningOrigin {
    type Output = Circle;

    fn sub(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: self.group2() - other.group1(),
            },
        }
    }
}

impl SubAssign<CircleAtOrigin> for CircleAligningOrigin {
    fn sub_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleOnOrigin> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl SubAssign<CircleOnOrigin> for CircleAligningOrigin {
    fn sub_assign(&mut self, other: CircleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = Circle;

    fn sub(self, other: CircleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for CircleAligningOrigin {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: self.group0() - other.group1(),
                g2: self.group1() - other.group2(),
                g3: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: Line) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2() - other.group1(),
            },
        }
    }
}

impl SubAssign<Line> for CircleAligningOrigin {
    fn sub_assign(&mut self, other: Line) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtInfinity> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: LineAtInfinity) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - other.group0(),
            },
        }
    }
}

impl SubAssign<LineAtInfinity> for CircleAligningOrigin {
    fn sub_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtOrigin> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: LineAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2(),
            },
        }
    }
}

impl SubAssign<LineAtOrigin> for CircleAligningOrigin {
    fn sub_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Motor> for CircleAligningOrigin {
    type Output = Dilator;

    fn sub(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<MultiVector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: self.group0() - other.group6(),
                g7: self.group1() - other.group7(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: NullCircleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl SubAssign<NullCircleAtOrigin> for CircleAligningOrigin {
    fn sub_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullDipoleAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for CircleAligningOrigin {
    type Output = Dilator;

    fn sub(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<RoundPoint> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for CircleAligningOrigin {
    type Output = Dilator;

    fn sub(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for CircleAtInfinity {
    type Output = Circle;

    fn sub(self, other: AntiDipoleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0(),
                g2: self.group1() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn sub(self, other: AntiFlatPointAtOrigin) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<AntiFlatPointAtOrigin> for CircleAtInfinity {
    fn sub_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiLineAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for CircleAtInfinity {
    type Output = Dilator;

    fn sub(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: self.group1(),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for CircleAtInfinity {
    type Output = Circle;

    fn sub(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: self.group1() - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for CircleAtInfinity {
    type Output = Circle;

    fn sub(self, other: CircleAligningOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: self.group1() - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn sub(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<CircleAtInfinity> for CircleAtInfinity {
    fn sub_assign(&mut self, other: CircleAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleAtOrigin> for CircleAtInfinity {
    type Output = Circle;

    fn sub(self, other: CircleAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: self.group1() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for CircleAtInfinity {
    type Output = Circle;

    fn sub(self, other: CircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for CircleAtInfinity {
    type Output = Circle;

    fn sub(self, other: CircleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: self.group1() - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for CircleAtInfinity {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group0() - other.group2(),
                g3: self.group1() - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn sub(self, other: Line) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<Line> for CircleAtInfinity {
    fn sub_assign(&mut self, other: Line) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtInfinity> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn sub(self, other: LineAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<LineAtInfinity> for CircleAtInfinity {
    fn sub_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtOrigin> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn sub(self, other: LineAtOrigin) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<LineAtOrigin> for CircleAtInfinity {
    fn sub_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Motor> for CircleAtInfinity {
    type Output = Dilator;

    fn sub(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group1() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<MultiVector> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: self.group0() - other.group7(),
                g8: self.group1() - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for CircleAtInfinity {
    type Output = Circle;

    fn sub(self, other: NullCircleAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for CircleAtInfinity {
    type Output = Dilator;

    fn sub(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group1(),
            },
        }
    }
}

impl Sub<RoundPoint> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for CircleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: self.group1(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for CircleAtInfinity {
    type Output = Dilator;

    fn sub(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: self.group1() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for CircleAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: AntiDipoleOnOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for CircleAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: AntiFlatPointAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for CircleAtOrigin {
    type Output = Dilator;

    fn sub(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: self.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for CircleAtOrigin {
    type Output = Circle;

    fn sub(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for CircleAtOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group1() - other.group2(),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for CircleAtOrigin {
    type Output = Circle;

    fn sub(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn sub(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<CircleAtOrigin> for CircleAtOrigin {
    fn sub_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleOnOrigin> for CircleAtOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for CircleAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for CircleAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: self.group0() - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for CircleAtOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: Line) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: self.group1() - other.group1(),
            },
        }
    }
}

impl Sub<LineAtInfinity> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn sub(self, other: LineAtInfinity) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
            },
        }
    }
}

impl SubAssign<LineAtInfinity> for CircleAtOrigin {
    fn sub_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtOrigin> for CircleAtOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: LineAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<Motor> for CircleAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<MultiVector> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: self.group0() - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn sub(self, other: NullCircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<NullCircleAtOrigin> for CircleAtOrigin {
    fn sub_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullDipoleAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for CircleAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<RoundPoint> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for CircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for CircleAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for CircleOnOrigin {
    type Output = Circle;

    fn sub(self, other: AntiDipoleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1(),
                g2: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for CircleOnOrigin {
    type Output = Circle;

    fn sub(self, other: AntiFlatPointAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for CircleOnOrigin {
    type Output = Dilator;

    fn sub(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for CircleOnOrigin {
    type Output = Circle;

    fn sub(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: Simd32x4::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for CircleOnOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for CircleOnOrigin {
    type Output = Circle;

    fn sub(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for CircleOnOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn sub(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<CircleOnOrigin> for CircleOnOrigin {
    fn sub_assign(&mut self, other: CircleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleOrthogonalOrigin> for CircleOnOrigin {
    type Output = Circle;

    fn sub(self, other: CircleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for CircleOnOrigin {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: self.group0() - other.group1(),
                g2: self.group1() - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for CircleOnOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: Line) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<LineAtInfinity> for CircleOnOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: LineAtInfinity) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x3::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<LineAtOrigin> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn sub(self, other: LineAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
            },
        }
    }
}

impl SubAssign<LineAtOrigin> for CircleOnOrigin {
    fn sub_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Motor> for CircleOnOrigin {
    type Output = Dilator;

    fn sub(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<MultiVector> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: self.group0() - other.group6(),
                g7: self.group1() - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn sub(self, other: NullCircleAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<NullCircleAtOrigin> for CircleOnOrigin {
    fn sub_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullDipoleAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for CircleOnOrigin {
    type Output = Dilator;

    fn sub(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for CircleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group0(),
                g7: self.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for CircleOnOrigin {
    type Output = Dilator;

    fn sub(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: AntiDipoleOnOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl SubAssign<AntiDipoleOnOrigin> for CircleOrthogonalOrigin {
    fn sub_assign(&mut self, other: AntiDipoleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiFlatPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: AntiFlatPointAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<AntiFlatPointAtOrigin> for CircleOrthogonalOrigin {
    fn sub_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiLineAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for CircleOrthogonalOrigin {
    type Output = Dilator;

    fn sub(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: self.group0(),
                g2: Simd32x3::from(0.0),
                g3: self.group1(),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for CircleOrthogonalOrigin {
    type Output = Circle;

    fn sub(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group1() - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = Circle;

    fn sub(self, other: CircleAligningOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group1() - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for CircleOrthogonalOrigin {
    type Output = Circle;

    fn sub(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: self.group1() - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: CircleAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<CircleAtOrigin> for CircleOrthogonalOrigin {
    fn sub_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = Circle;

    fn sub(self, other: CircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<CircleOrthogonalOrigin> for CircleOrthogonalOrigin {
    fn sub_assign(&mut self, other: CircleOrthogonalOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Dilator> for CircleOrthogonalOrigin {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: self.group0() - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
                g3: self.group1() - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for CircleOrthogonalOrigin {
    type Output = Circle;

    fn sub(self, other: Line) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: self.group1() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<LineAtInfinity> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: LineAtInfinity) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<LineAtInfinity> for CircleOrthogonalOrigin {
    fn sub_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtOrigin> for CircleOrthogonalOrigin {
    type Output = Circle;

    fn sub(self, other: LineAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<Motor> for CircleOrthogonalOrigin {
    type Output = Dilator;

    fn sub(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group1() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<MultiVector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: self.group0() - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: self.group1() - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: NullCircleAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<NullCircleAtOrigin> for CircleOrthogonalOrigin {
    fn sub_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullDipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for CircleOrthogonalOrigin {
    type Output = Dilator;

    fn sub(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group1(),
            },
        }
    }
}

impl Sub<RoundPoint> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: self.group1(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for CircleOrthogonalOrigin {
    type Output = Dilator;

    fn sub(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from(0.0),
                g3: self.group1() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Dilator {
    type Output = Dilator;

    fn sub(self, other: AntiDipoleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl SubAssign<AntiDipoleOnOrigin> for Dilator {
    fn sub_assign(&mut self, other: AntiDipoleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiFlatPointAtOrigin> for Dilator {
    type Output = Dilator;

    fn sub(self, other: AntiFlatPointAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<AntiFlatPointAtOrigin> for Dilator {
    fn sub_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiLineAtOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for Dilator {
    type Output = Dilator;

    fn sub(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
            },
        }
    }
}

impl SubAssign<AntiScalar> for Dilator {
    fn sub_assign(&mut self, other: AntiScalar) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiSphereOnOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for Dilator {
    type Output = Dilator;

    fn sub(self, other: Circle) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2() - other.group1(),
                g3: self.group3() - other.group2(),
            },
        }
    }
}

impl SubAssign<Circle> for Dilator {
    fn sub_assign(&mut self, other: Circle) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleAligningOrigin> for Dilator {
    type Output = Dilator;

    fn sub(self, other: CircleAligningOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2() - other.group1(),
                g3: self.group3() - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<CircleAligningOrigin> for Dilator {
    fn sub_assign(&mut self, other: CircleAligningOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleAtInfinity> for Dilator {
    type Output = Dilator;

    fn sub(self, other: CircleAtInfinity) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - other.group0(),
                g3: self.group3() - other.group1(),
            },
        }
    }
}

impl SubAssign<CircleAtInfinity> for Dilator {
    fn sub_assign(&mut self, other: CircleAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleAtOrigin> for Dilator {
    type Output = Dilator;

    fn sub(self, other: CircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<CircleAtOrigin> for Dilator {
    fn sub_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleOnOrigin> for Dilator {
    type Output = Dilator;

    fn sub(self, other: CircleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2() - other.group1(),
                g3: self.group3(),
            },
        }
    }
}

impl SubAssign<CircleOnOrigin> for Dilator {
    fn sub_assign(&mut self, other: CircleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleOrthogonalOrigin> for Dilator {
    type Output = Dilator;

    fn sub(self, other: CircleOrthogonalOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2(),
                g3: self.group3() - other.group1(),
            },
        }
    }
}

impl SubAssign<CircleOrthogonalOrigin> for Dilator {
    fn sub_assign(&mut self, other: CircleOrthogonalOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Dilator> for Dilator {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: self.group2() - other.group2(),
                g3: self.group3() - other.group3(),
            },
        }
    }
}

impl SubAssign<Dilator> for Dilator {
    fn sub_assign(&mut self, other: Dilator) {
        *self = (*self).sub(other);
    }
}

impl Sub<Dipole> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for Dilator {
    type Output = Dilator;

    fn sub(self, other: Line) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - other.group0(),
                g3: self.group3() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<Line> for Dilator {
    fn sub_assign(&mut self, other: Line) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtInfinity> for Dilator {
    type Output = Dilator;

    fn sub(self, other: LineAtInfinity) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<LineAtInfinity> for Dilator {
    fn sub_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtOrigin> for Dilator {
    type Output = Dilator;

    fn sub(self, other: LineAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - other.group0(),
                g3: self.group3(),
            },
        }
    }
}

impl SubAssign<LineAtOrigin> for Dilator {
    fn sub_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Motor> for Dilator {
    type Output = Dilator;

    fn sub(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() - other.group0()[3],
                g1: self.group1(),
                g2: self.group2() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group3() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<Motor> for Dilator {
    fn sub_assign(&mut self, other: Motor) {
        *self = (*self).sub(other);
    }
}

impl Sub<MultiVector> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: self.group1() - other.group6(),
                g7: self.group2() - other.group7(),
                g8: self.group3() - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Dilator {
    type Output = Dilator;

    fn sub(self, other: NullCircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2(),
                g3: self.group3(),
            },
        }
    }
}

impl SubAssign<NullCircleAtOrigin> for Dilator {
    fn sub_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullDipoleAtOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for Dilator {
    type Output = Dilator;

    fn sub(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() - other.group0()[3],
                g1: self.group1(),
                g2: self.group2() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: self.group3(),
            },
        }
    }
}

impl SubAssign<Rotor> for Dilator {
    fn sub_assign(&mut self, other: Rotor) {
        *self = (*self).sub(other);
    }
}

impl Sub<RoundPoint> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Dilator {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group1(),
                g7: self.group2(),
                g8: self.group3(),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for Dilator {
    type Output = Dilator;

    fn sub(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0() - other.group0()[3],
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<Translator> for Dilator {
    fn sub_assign(&mut self, other: Translator) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiCircleOnOrigin> for Dipole {
    type Output = Dipole;

    fn sub(self, other: AntiCircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl SubAssign<AntiCircleOnOrigin> for Dipole {
    fn sub_assign(&mut self, other: AntiCircleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiDipoleOnOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Dipole {
    type Output = Dipole;

    fn sub(self, other: AntiLineAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2(),
            },
        }
    }
}

impl SubAssign<AntiLineAtOrigin> for Dipole {
    fn sub_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiPlane> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for Dipole {
    type Output = Dipole;

    fn sub(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: self.group2() - other.group2(),
            },
        }
    }
}

impl SubAssign<Dipole> for Dipole {
    fn sub_assign(&mut self, other: Dipole) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleAligningOrigin> for Dipole {
    type Output = Dipole;

    fn sub(self, other: DipoleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: self.group2() - other.group1(),
            },
        }
    }
}

impl SubAssign<DipoleAligningOrigin> for Dipole {
    fn sub_assign(&mut self, other: DipoleAligningOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleAtInfinity> for Dipole {
    type Output = Dipole;

    fn sub(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2() - other.group1(),
            },
        }
    }
}

impl SubAssign<DipoleAtInfinity> for Dipole {
    fn sub_assign(&mut self, other: DipoleAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleAtOrigin> for Dipole {
    type Output = Dipole;

    fn sub(self, other: DipoleAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: self.group2() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<DipoleAtOrigin> for Dipole {
    fn sub_assign(&mut self, other: DipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleOnOrigin> for Dipole {
    type Output = Dipole;

    fn sub(self, other: DipoleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1(),
                g2: self.group2() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl SubAssign<DipoleOnOrigin> for Dipole {
    fn sub_assign(&mut self, other: DipoleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleOrthogonalOrigin> for Dipole {
    type Output = Dipole;

    fn sub(self, other: DipoleOrthogonalOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: self.group2() - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<DipoleOrthogonalOrigin> for Dipole {
    fn sub_assign(&mut self, other: DipoleOrthogonalOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DualNum> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for Dipole {
    type Output = Dipole;

    fn sub(self, other: FlatPoint) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - other.group0(),
            },
        }
    }
}

impl SubAssign<FlatPoint> for Dipole {
    fn sub_assign(&mut self, other: FlatPoint) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtInfinity> for Dipole {
    type Output = Dipole;

    fn sub(self, other: FlatPointAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<FlatPointAtInfinity> for Dipole {
    fn sub_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtOrigin> for Dipole {
    type Output = Dipole;

    fn sub(self, other: FlatPointAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<FlatPointAtOrigin> for Dipole {
    fn sub_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Flector> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) - other.group3(),
                g4: self.group1() - other.group4(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Dipole {
    type Output = Dipole;

    fn sub(self, other: NullDipoleAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl SubAssign<NullDipoleAtOrigin> for Dipole {
    fn sub_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullSphereAtOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for Dipole {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]),
                g4: self.group1(),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for DipoleAligningOrigin {
    type Output = Dipole;

    fn sub(self, other: AntiCircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for DipoleAligningOrigin {
    type Output = Dipole;

    fn sub(self, other: AntiLineAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<AntiPlane> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for DipoleAligningOrigin {
    type Output = Dipole;

    fn sub(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group1() - other.group2(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<DipoleAligningOrigin> for DipoleAligningOrigin {
    fn sub_assign(&mut self, other: DipoleAligningOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleAtInfinity> for DipoleAligningOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: self.group1() - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<DipoleAtOrigin> for DipoleAligningOrigin {
    fn sub_assign(&mut self, other: DipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleOnOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleOnOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl SubAssign<DipoleOnOrigin> for DipoleAligningOrigin {
    fn sub_assign(&mut self, other: DipoleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleOrthogonalOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group1() - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<DualNum> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: FlatPoint) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
            },
        }
    }
}

impl SubAssign<FlatPoint> for DipoleAligningOrigin {
    fn sub_assign(&mut self, other: FlatPoint) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtInfinity> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: FlatPointAtInfinity) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<FlatPointAtInfinity> for DipoleAligningOrigin {
    fn sub_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: FlatPointAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<FlatPointAtOrigin> for DipoleAligningOrigin {
    fn sub_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Flector> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: NullDipoleAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<NullDipoleAtOrigin> for DipoleAligningOrigin {
    fn sub_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullSphereAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for DipoleAtInfinity {
    type Output = Dipole;

    fn sub(self, other: AntiCircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn sub(self, other: AntiLineAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<AntiLineAtOrigin> for DipoleAtInfinity {
    fn sub_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiPlane> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for DipoleAtInfinity {
    type Output = Dipole;

    fn sub(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: self.group1() - other.group2(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for DipoleAtInfinity {
    type Output = Dipole;

    fn sub(self, other: DipoleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: self.group1() - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn sub(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<DipoleAtInfinity> for DipoleAtInfinity {
    fn sub_assign(&mut self, other: DipoleAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleAtOrigin> for DipoleAtInfinity {
    type Output = Dipole;

    fn sub(self, other: DipoleAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: self.group1() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for DipoleAtInfinity {
    type Output = Dipole;

    fn sub(self, other: DipoleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0(),
                g2: self.group1() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = Dipole;

    fn sub(self, other: DipoleOrthogonalOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: self.group1() - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<DualNum> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn sub(self, other: FlatPoint) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
            },
        }
    }
}

impl SubAssign<FlatPoint> for DipoleAtInfinity {
    fn sub_assign(&mut self, other: FlatPoint) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtInfinity> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn sub(self, other: FlatPointAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<FlatPointAtInfinity> for DipoleAtInfinity {
    fn sub_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtOrigin> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn sub(self, other: FlatPointAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<FlatPointAtOrigin> for DipoleAtInfinity {
    fn sub_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Flector> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]) - other.group3(),
                g4: self.group0() - other.group4(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for DipoleAtInfinity {
    type Output = Dipole;

    fn sub(self, other: NullDipoleAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for DipoleAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group1()[3]]),
                g4: self.group0(),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for DipoleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: AntiCircleOnOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for DipoleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: AntiLineAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<AntiPlane> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for DipoleAtOrigin {
    type Output = Dipole;

    fn sub(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group2(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for DipoleAtOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for DipoleAtOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn sub(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<DipoleAtOrigin> for DipoleAtOrigin {
    fn sub_assign(&mut self, other: DipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleOnOrigin> for DipoleAtOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleOnOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group1() - other.group2(),
            },
        }
    }
}

impl Sub<DualNum> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for DipoleAtOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: FlatPoint) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn sub(self, other: FlatPointAtInfinity) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
            },
        }
    }
}

impl SubAssign<FlatPointAtInfinity> for DipoleAtOrigin {
    fn sub_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtOrigin> for DipoleAtOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: FlatPointAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Flector> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: self.group1() - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn sub(self, other: NullDipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<NullDipoleAtOrigin> for DipoleAtOrigin {
    fn sub_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullSphereAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for DipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for DipoleOnOrigin {
    type Output = Dipole;

    fn sub(self, other: AntiCircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for DipoleOnOrigin {
    type Output = Dipole;

    fn sub(self, other: AntiLineAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiPlane> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for DipoleOnOrigin {
    type Output = Dipole;

    fn sub(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group2(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for DipoleOnOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for DipoleOnOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for DipoleOnOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn sub(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<DipoleOnOrigin> for DipoleOnOrigin {
    fn sub_assign(&mut self, other: DipoleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleOrthogonalOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<DualNum> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for DipoleOnOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: FlatPoint) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for DipoleOnOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: FlatPointAtInfinity) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn sub(self, other: FlatPointAtOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<FlatPointAtOrigin> for DipoleOnOrigin {
    fn sub_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Flector> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: self.group0() - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn sub(self, other: NullDipoleAtOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<NullDipoleAtOrigin> for DipoleOnOrigin {
    fn sub_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullSphereAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for DipoleOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: AntiCircleOnOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl SubAssign<AntiCircleOnOrigin> for DipoleOrthogonalOrigin {
    fn sub_assign(&mut self, other: AntiCircleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiDipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: AntiLineAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2(),
            },
        }
    }
}

impl SubAssign<AntiLineAtOrigin> for DipoleOrthogonalOrigin {
    fn sub_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiPlane> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for DipoleOrthogonalOrigin {
    type Output = Dipole;

    fn sub(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - other.group2(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: DipoleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: self.group2() - other.group1(),
            },
        }
    }
}

impl SubAssign<DipoleAtOrigin> for DipoleOrthogonalOrigin {
    fn sub_assign(&mut self, other: DipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: self.group2() - other.group2(),
            },
        }
    }
}

impl SubAssign<DipoleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    fn sub_assign(&mut self, other: DipoleOrthogonalOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DualNum> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for DipoleOrthogonalOrigin {
    type Output = Dipole;

    fn sub(self, other: FlatPoint) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: FlatPointAtInfinity) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - other.group0(),
            },
        }
    }
}

impl SubAssign<FlatPointAtInfinity> for DipoleOrthogonalOrigin {
    fn sub_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Dipole;

    fn sub(self, other: FlatPointAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Flector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group1(),
                g5: self.group2() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group3(),
                g4: self.group1() - other.group4(),
                g5: self.group2() - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: NullDipoleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: self.group2(),
            },
        }
    }
}

impl SubAssign<NullDipoleAtOrigin> for DipoleOrthogonalOrigin {
    fn sub_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullSphereAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2() - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: self.group1(),
                g5: self.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for DualNum {
    type Output = DualNum;

    fn sub(self, other: AntiScalar) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<AntiScalar> for DualNum {
    fn sub_assign(&mut self, other: AntiScalar) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiSphereOnOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for DualNum {
    type Output = DualNum;

    fn sub(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<DualNum> for DualNum {
    fn sub_assign(&mut self, other: DualNum) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPoint> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for DualNum {
    type Output = DualNum;

    fn sub(self, other: Scalar) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl SubAssign<Scalar> for DualNum {
    fn sub_assign(&mut self, other: Scalar) {
        *self = (*self).sub(other);
    }
}

impl Sub<Sphere> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for DualNum {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for FlatPoint {
    type Output = Dipole;

    fn sub(self, other: AntiCircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group0(),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for FlatPoint {
    type Output = DipoleAtInfinity;

    fn sub(self, other: AntiLineAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<AntiPlane> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for FlatPoint {
    type Output = Dipole;

    fn sub(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group0() - other.group2(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for FlatPoint {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for FlatPoint {
    type Output = DipoleAtInfinity;

    fn sub(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for FlatPoint {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for FlatPoint {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleOnOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for FlatPoint {
    type Output = Dipole;

    fn sub(self, other: DipoleOrthogonalOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group0() - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<DualNum> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for FlatPoint {
    type Output = FlatPoint;

    fn sub(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<FlatPoint> for FlatPoint {
    fn sub_assign(&mut self, other: FlatPoint) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtInfinity> for FlatPoint {
    type Output = FlatPoint;

    fn sub(self, other: FlatPointAtInfinity) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<FlatPointAtInfinity> for FlatPoint {
    fn sub_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtOrigin> for FlatPoint {
    type Output = FlatPoint;

    fn sub(self, other: FlatPointAtOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<FlatPointAtOrigin> for FlatPoint {
    fn sub_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Flector> for FlatPoint {
    type Output = Flector;

    fn sub(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for FlatPoint {
    type Output = Flector;

    fn sub(self, other: FlectorAtInfinity) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for FlatPoint {
    type Output = Flector;

    fn sub(self, other: Horizon) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0(),
                g1: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for FlatPoint {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: NullDipoleAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for FlatPoint {
    type Output = Flector;

    fn sub(self, other: Plane) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0(),
                g1: Simd32x4::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for FlatPoint {
    type Output = Flector;

    fn sub(self, other: PlaneAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0(),
                g1: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<Rotor> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for FlatPoint {
    type Output = Flector;

    fn sub(self, other: Transflector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<Translator> for FlatPoint {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for FlatPointAtInfinity {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: AntiCircleOnOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group0(),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for FlatPointAtInfinity {
    type Output = DipoleAtInfinity;

    fn sub(self, other: AntiLineAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiPlane> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for FlatPointAtInfinity {
    type Output = Dipole;

    fn sub(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group2(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for FlatPointAtInfinity {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for FlatPointAtInfinity {
    type Output = DipoleAtInfinity;

    fn sub(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for FlatPointAtInfinity {
    type Output = DipoleAtOrigin;

    fn sub(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for FlatPointAtInfinity {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleOnOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group0() - other.group2(),
            },
        }
    }
}

impl Sub<DualNum> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for FlatPointAtInfinity {
    type Output = FlatPoint;

    fn sub(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn sub(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<FlatPointAtInfinity> for FlatPointAtInfinity {
    fn sub_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtOrigin> for FlatPointAtInfinity {
    type Output = FlatPoint;

    fn sub(self, other: FlatPointAtOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Flector> for FlatPointAtInfinity {
    type Output = Flector;

    fn sub(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
                g1: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for FlatPointAtInfinity {
    type Output = FlectorAtInfinity;

    fn sub(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<Horizon> for FlatPointAtInfinity {
    type Output = FlectorAtInfinity;

    fn sub(self, other: Horizon) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: self.group0() - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for FlatPointAtInfinity {
    type Output = DipoleAtOrigin;

    fn sub(self, other: NullDipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for FlatPointAtInfinity {
    type Output = Transflector;

    fn sub(self, other: Plane) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0(),
                g1: Simd32x4::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for FlatPointAtInfinity {
    type Output = Transflector;

    fn sub(self, other: PlaneAtOrigin) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0(),
                g1: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<Rotor> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for FlatPointAtInfinity {
    type Output = Transflector;

    fn sub(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<Translator> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for FlatPointAtOrigin {
    type Output = Dipole;

    fn sub(self, other: AntiCircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for FlatPointAtOrigin {
    type Output = DipoleAtInfinity;

    fn sub(self, other: AntiLineAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Sub<AntiPlane> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for FlatPointAtOrigin {
    type Output = Dipole;

    fn sub(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group2(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for FlatPointAtOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for FlatPointAtOrigin {
    type Output = DipoleAtInfinity;

    fn sub(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for FlatPointAtOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for FlatPointAtOrigin {
    type Output = DipoleOnOrigin;

    fn sub(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for FlatPointAtOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleOrthogonalOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<DualNum> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for FlatPointAtOrigin {
    type Output = FlatPoint;

    fn sub(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for FlatPointAtOrigin {
    type Output = FlatPoint;

    fn sub(self, other: FlatPointAtInfinity) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn sub(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<FlatPointAtOrigin> for FlatPointAtOrigin {
    fn sub_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Flector> for FlatPointAtOrigin {
    type Output = Flector;

    fn sub(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group0(),
                g1: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for FlatPointAtOrigin {
    type Output = Flector;

    fn sub(self, other: FlectorAtInfinity) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for FlatPointAtOrigin {
    type Output = Flector;

    fn sub(self, other: Horizon) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g1: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for FlatPointAtOrigin {
    type Output = DipoleOnOrigin;

    fn sub(self, other: NullDipoleAtOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for FlatPointAtOrigin {
    type Output = Flector;

    fn sub(self, other: Plane) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g1: Simd32x4::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for FlatPointAtOrigin {
    type Output = Flector;

    fn sub(self, other: PlaneAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g1: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<Rotor> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for FlatPointAtOrigin {
    type Output = Flector;

    fn sub(self, other: Transflector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<Translator> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiPlane> for Flector {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiScalar> for Flector {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Circle> for Flector {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Flector {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Dilator> for Flector {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Dipole> for Flector {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Flector {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<DualNum> for Flector {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<FlatPoint> for Flector {
    type Output = Flector;

    fn sub(self, other: FlatPoint) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<FlatPoint> for Flector {
    fn sub_assign(&mut self, other: FlatPoint) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtInfinity> for Flector {
    type Output = Flector;

    fn sub(self, other: FlatPointAtInfinity) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<FlatPointAtInfinity> for Flector {
    fn sub_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtOrigin> for Flector {
    type Output = Flector;

    fn sub(self, other: FlatPointAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<FlatPointAtOrigin> for Flector {
    fn sub_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Flector> for Flector {
    type Output = Flector;

    fn sub(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<Flector> for Flector {
    fn sub_assign(&mut self, other: Flector) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlectorAtInfinity> for Flector {
    type Output = Flector;

    fn sub(self, other: FlectorAtInfinity) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl SubAssign<FlectorAtInfinity> for Flector {
    fn sub_assign(&mut self, other: FlectorAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<Horizon> for Flector {
    type Output = Flector;

    fn sub(self, other: Horizon) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<Horizon> for Flector {
    fn sub_assign(&mut self, other: Horizon) {
        *self = (*self).sub(other);
    }
}

impl Sub<Infinity> for Flector {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Line> for Flector {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<LineAtInfinity> for Flector {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<LineAtOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Motor> for Flector {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<MultiVector> for Flector {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - other.group9(),
                g10: Simd32x2::from([0.0, self.group1()[3]]) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Plane> for Flector {
    type Output = Flector;

    fn sub(self, other: Plane) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
            },
        }
    }
}

impl SubAssign<Plane> for Flector {
    fn sub_assign(&mut self, other: Plane) {
        *self = (*self).sub(other);
    }
}

impl Sub<PlaneAtOrigin> for Flector {
    type Output = Flector;

    fn sub(self, other: PlaneAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<PlaneAtOrigin> for Flector {
    fn sub_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Rotor> for Flector {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<RoundPoint> for Flector {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Scalar> for Flector {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Sphere> for Flector {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - other.group0(),
                g10: Simd32x2::from([0.0, self.group1()[3]]) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Flector {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Flector {
    type Output = Flector;

    fn sub(self, other: Transflector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<Transflector> for Flector {
    fn sub_assign(&mut self, other: Transflector) {
        *self = (*self).sub(other);
    }
}

impl Sub<Translator> for Flector {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiPlane> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiScalar> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Circle> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Dilator> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Dipole> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<DualNum> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<FlatPoint> for FlectorAtInfinity {
    type Output = Flector;

    fn sub(self, other: FlatPoint) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn sub(self, other: FlatPointAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<FlatPointAtInfinity> for FlectorAtInfinity {
    fn sub_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtOrigin> for FlectorAtInfinity {
    type Output = Flector;

    fn sub(self, other: FlatPointAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Flector> for FlectorAtInfinity {
    type Output = Flector;

    fn sub(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group1(),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn sub(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<FlectorAtInfinity> for FlectorAtInfinity {
    fn sub_assign(&mut self, other: FlectorAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<Horizon> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn sub(self, other: Horizon) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<Horizon> for FlectorAtInfinity {
    fn sub_assign(&mut self, other: Horizon) {
        *self = (*self).sub(other);
    }
}

impl Sub<Infinity> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Line> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<LineAtInfinity> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<LineAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Motor> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<MultiVector> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from([0.0, self.group0()[3]]) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Plane> for FlectorAtInfinity {
    type Output = Transflector;

    fn sub(self, other: Plane) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group0(),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for FlectorAtInfinity {
    type Output = Transflector;

    fn sub(self, other: PlaneAtOrigin) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<Rotor> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<RoundPoint> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Scalar> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Sphere> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from([0.0, self.group0()[3]]) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for FlectorAtInfinity {
    type Output = Transflector;

    fn sub(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group1(),
            },
        }
    }
}

impl Sub<Translator> for FlectorAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<AntiPlane> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<AntiScalar> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<Circle> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<Dilator> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<Dipole> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<DualNum> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<FlatPoint> for Horizon {
    type Output = Flector;

    fn sub(self, other: FlatPoint) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(0.0) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Horizon {
    type Output = FlectorAtInfinity;

    fn sub(self, other: FlatPointAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for Horizon {
    type Output = Flector;

    fn sub(self, other: FlatPointAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]),
            },
        }
    }
}

impl Sub<Flector> for Horizon {
    type Output = Flector;

    fn sub(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(0.0) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group1(),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Horizon {
    type Output = FlectorAtInfinity;

    fn sub(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<Horizon> for Horizon {
    type Output = Horizon;

    fn sub(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<Horizon> for Horizon {
    fn sub_assign(&mut self, other: Horizon) {
        *self = (*self).sub(other);
    }
}

impl Sub<Infinity> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<Line> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<LineAtInfinity> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<LineAtOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<Motor> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<MultiVector> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from([0.0, self.group0()]) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Horizon {
    type Output = SphereAtOrigin;

    fn sub(self, other: NullSphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from([0.0, self.group0()]) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<Plane> for Horizon {
    type Output = Plane;

    fn sub(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for Horizon {
    type Output = Plane;

    fn sub(self, other: PlaneAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<Rotor> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<RoundPoint> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<Scalar> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<Sphere> for Horizon {
    type Output = Sphere;

    fn sub(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x2::from([0.0, self.group0()]) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Horizon {
    type Output = SphereAtOrigin;

    fn sub(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from([0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Horizon {
    type Output = Sphere;

    fn sub(self, other: SphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()]) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Horizon {
    type Output = Transflector;

    fn sub(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group1(),
            },
        }
    }
}

impl Sub<Translator> for Horizon {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([0.0, self.group0()]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for Infinity {
    type Output = AntiPlane;

    fn sub(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Infinity {
    type Output = AntiPlane;

    fn sub(self, other: AntiPlaneAtOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiScalar> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for Infinity {
    type Output = RoundPoint;

    fn sub(self, other: AntiSphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()]) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Circle> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for Infinity {
    type Output = Infinity;

    fn sub(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<Infinity> for Infinity {
    fn sub_assign(&mut self, other: Infinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<Line> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from([0.0, self.group0()]) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Infinity {
    type Output = RoundPointAtOrigin;

    fn sub(self, other: Origin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from([0.0, self.group0()]) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Plane> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for Infinity {
    type Output = RoundPoint;

    fn sub(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x2::from([0.0, self.group0()]) - other.group1(),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Infinity {
    type Output = RoundPointAtOrigin;

    fn sub(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from([0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<Scalar> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for Infinity {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([0.0, self.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Line {
    type Output = Circle;

    fn sub(self, other: AntiDipoleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Line {
    type Output = CircleAtInfinity;

    fn sub(self, other: AntiFlatPointAtOrigin) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for Line {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for Line {
    type Output = Motor;

    fn sub(self, other: AntiScalar) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: self.group1(),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for Line {
    type Output = Circle;

    fn sub(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Line {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: self.group1() - other.group2(),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Line {
    type Output = CircleAtInfinity;

    fn sub(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Line {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: self.group1() - other.group1(),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Line {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Line {
    type Output = Circle;

    fn sub(self, other: CircleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for Line {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group0() - other.group2(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for Line {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Line {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for Line {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for Line {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Line {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for Line {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Line {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for Line {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for Line {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for Line {
    type Output = Line;

    fn sub(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<Line> for Line {
    fn sub_assign(&mut self, other: Line) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtInfinity> for Line {
    type Output = Line;

    fn sub(self, other: LineAtInfinity) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
            },
        }
    }
}

impl SubAssign<LineAtInfinity> for Line {
    fn sub_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtOrigin> for Line {
    type Output = Line;

    fn sub(self, other: LineAtOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<LineAtOrigin> for Line {
    fn sub_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Motor> for Line {
    type Output = Motor;

    fn sub(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl Sub<MultiVector> for Line {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: self.group0() - other.group7(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Line {
    type Output = CircleAligningOrigin;

    fn sub(self, other: NullCircleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: self.group1(),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Line {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for Line {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for Line {
    type Output = Motor;

    fn sub(self, other: Rotor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl Sub<RoundPoint> for Line {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for Line {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for Line {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Line {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Line {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for Line {
    type Output = Motor;

    fn sub(self, other: Translator) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g1: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for LineAtInfinity {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: AntiDipoleOnOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for LineAtInfinity {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: AntiFlatPointAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for LineAtInfinity {
    type Output = Translator;

    fn sub(self, other: AntiScalar) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for LineAtInfinity {
    type Output = Circle;

    fn sub(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for LineAtInfinity {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group0() - other.group2(),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for LineAtInfinity {
    type Output = CircleAtInfinity;

    fn sub(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for LineAtInfinity {
    type Output = CircleAtOrigin;

    fn sub(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for LineAtInfinity {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group0(),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for LineAtInfinity {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for LineAtInfinity {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for LineAtInfinity {
    type Output = Line;

    fn sub(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
            },
        }
    }
}

impl Sub<LineAtInfinity> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn sub(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<LineAtInfinity> for LineAtInfinity {
    fn sub_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtOrigin> for LineAtInfinity {
    type Output = Line;

    fn sub(self, other: LineAtOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<Motor> for LineAtInfinity {
    type Output = Motor;

    fn sub(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
            },
        }
    }
}

impl Sub<MultiVector> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for LineAtInfinity {
    type Output = CircleAtOrigin;

    fn sub(self, other: NullCircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for LineAtInfinity {
    type Output = Motor;

    fn sub(self, other: Rotor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(0.0) - other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<RoundPoint> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for LineAtInfinity {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for LineAtInfinity {
    type Output = Translator;

    fn sub(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for LineAtOrigin {
    type Output = Circle;

    fn sub(self, other: AntiDipoleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0(),
                g2: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for LineAtOrigin {
    type Output = CircleAtInfinity;

    fn sub(self, other: AntiFlatPointAtOrigin) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0(),
                g1: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for LineAtOrigin {
    type Output = Rotor;

    fn sub(self, other: AntiScalar) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for LineAtOrigin {
    type Output = Circle;

    fn sub(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: Simd32x4::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for LineAtOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for LineAtOrigin {
    type Output = CircleAtInfinity;

    fn sub(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for LineAtOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for LineAtOrigin {
    type Output = CircleOnOrigin;

    fn sub(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for LineAtOrigin {
    type Output = Circle;

    fn sub(self, other: CircleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for LineAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group0() - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for LineAtOrigin {
    type Output = Line;

    fn sub(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<LineAtInfinity> for LineAtOrigin {
    type Output = Line;

    fn sub(self, other: LineAtInfinity) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<LineAtOrigin> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn sub(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<LineAtOrigin> for LineAtOrigin {
    fn sub_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Motor> for LineAtOrigin {
    type Output = Motor;

    fn sub(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<MultiVector> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: self.group0() - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for LineAtOrigin {
    type Output = CircleOnOrigin;

    fn sub(self, other: NullCircleAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for LineAtOrigin {
    type Output = Rotor;

    fn sub(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<RoundPoint> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for LineAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: self.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for LineAtOrigin {
    type Output = Motor;

    fn sub(self, other: Translator) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Motor {
    type Output = Dilator;

    fn sub(self, other: AntiDipoleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Motor {
    type Output = Dilator;

    fn sub(self, other: AntiFlatPointAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for Motor {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for Motor {
    type Output = Motor;

    fn sub(self, other: AntiScalar) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<AntiScalar> for Motor {
    fn sub_assign(&mut self, other: AntiScalar) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiSphereOnOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for Motor {
    type Output = Dilator;

    fn sub(self, other: Circle) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Motor {
    type Output = Dilator;

    fn sub(self, other: CircleAligningOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Motor {
    type Output = Dilator;

    fn sub(self, other: CircleAtInfinity) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Motor {
    type Output = Dilator;

    fn sub(self, other: CircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Motor {
    type Output = Dilator;

    fn sub(self, other: CircleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Motor {
    type Output = Dilator;

    fn sub(self, other: CircleOrthogonalOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for Motor {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3] - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group2(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for Motor {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Motor {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for Motor {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for Motor {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Motor {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for Motor {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Motor {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for Motor {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for Motor {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for Motor {
    type Output = Motor;

    fn sub(self, other: Line) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<Line> for Motor {
    fn sub_assign(&mut self, other: Line) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtInfinity> for Motor {
    type Output = Motor;

    fn sub(self, other: LineAtInfinity) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
            },
        }
    }
}

impl SubAssign<LineAtInfinity> for Motor {
    fn sub_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtOrigin> for Motor {
    type Output = Motor;

    fn sub(self, other: LineAtOrigin) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<LineAtOrigin> for Motor {
    fn sub_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Motor> for Motor {
    type Output = Motor;

    fn sub(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<Motor> for Motor {
    fn sub_assign(&mut self, other: Motor) {
        *self = (*self).sub(other);
    }
}

impl Sub<MultiVector> for Motor {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group7(),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Motor {
    type Output = Dilator;

    fn sub(self, other: NullCircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for Motor {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for Motor {
    type Output = Motor;

    fn sub(self, other: Rotor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<Rotor> for Motor {
    fn sub_assign(&mut self, other: Rotor) {
        *self = (*self).sub(other);
    }
}

impl Sub<RoundPoint> for Motor {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for Motor {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for Motor {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Motor {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Motor {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for Motor {
    type Output = Motor;

    fn sub(self, other: Translator) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g1: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl SubAssign<Translator> for Motor {
    fn sub_assign(&mut self, other: Translator) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiCircleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: self.group4() - other.group1(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<AntiCircleOnOrigin> for MultiVector {
    fn sub_assign(&mut self, other: AntiCircleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiDipoleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: self.group7(),
                g8: self.group8() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<AntiDipoleOnOrigin> for MultiVector {
    fn sub_assign(&mut self, other: AntiDipoleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiFlatPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<AntiFlatPointAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: AntiFlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiLineAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4() - other.group0(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<AntiLineAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: AntiLineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiPlane> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: self.group2() - Simd32x2::from([0.0, other.group0()[3]]),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<AntiPlane> for MultiVector {
    fn sub_assign(&mut self, other: AntiPlane) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiPlaneAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<AntiPlaneAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: AntiPlaneAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiScalar> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - Simd32x2::from([0.0, other.group0()]),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<AntiScalar> for MultiVector {
    fn sub_assign(&mut self, other: AntiScalar) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiSphereOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: self.group2() - Simd32x2::from([other.group0()[3], 0.0]),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<AntiSphereOnOrigin> for MultiVector {
    fn sub_assign(&mut self, other: AntiSphereOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Circle> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() - other.group0(),
                g7: self.group7() - other.group1(),
                g8: self.group8() - other.group2(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<Circle> for MultiVector {
    fn sub_assign(&mut self, other: Circle) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleAligningOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() - other.group0(),
                g7: self.group7() - other.group1(),
                g8: self.group8() - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<CircleAligningOrigin> for MultiVector {
    fn sub_assign(&mut self, other: CircleAligningOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7() - other.group0(),
                g8: self.group8() - other.group1(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<CircleAtInfinity> for MultiVector {
    fn sub_assign(&mut self, other: CircleAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() - other.group0(),
                g7: self.group7(),
                g8: self.group8() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<CircleAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: CircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() - other.group0(),
                g7: self.group7() - other.group1(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<CircleOnOrigin> for MultiVector {
    fn sub_assign(&mut self, other: CircleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<CircleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() - other.group0(),
                g7: self.group7(),
                g8: self.group8() - other.group1(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<CircleOrthogonalOrigin> for MultiVector {
    fn sub_assign(&mut self, other: CircleOrthogonalOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Dilator> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - Simd32x2::from([0.0, other.group0()]),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() - other.group1(),
                g7: self.group7() - other.group2(),
                g8: self.group8() - other.group3(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<Dilator> for MultiVector {
    fn sub_assign(&mut self, other: Dilator) {
        *self = (*self).sub(other);
    }
}

impl Sub<Dipole> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: self.group4() - other.group1(),
                g5: self.group5() - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<Dipole> for MultiVector {
    fn sub_assign(&mut self, other: Dipole) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleAligningOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: self.group4(),
                g5: self.group5() - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<DipoleAligningOrigin> for MultiVector {
    fn sub_assign(&mut self, other: DipoleAligningOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: self.group4() - other.group0(),
                g5: self.group5() - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<DipoleAtInfinity> for MultiVector {
    fn sub_assign(&mut self, other: DipoleAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: self.group4(),
                g5: self.group5() - other.group1(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<DipoleAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: DipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - other.group0(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<DipoleOnOrigin> for MultiVector {
    fn sub_assign(&mut self, other: DipoleOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DipoleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: self.group4() - other.group1(),
                g5: self.group5() - other.group2(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<DipoleOrthogonalOrigin> for MultiVector {
    fn sub_assign(&mut self, other: DipoleOrthogonalOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<DualNum> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<DualNum> for MultiVector {
    fn sub_assign(&mut self, other: DualNum) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPoint> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group4(),
                g5: self.group5() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<FlatPoint> for MultiVector {
    fn sub_assign(&mut self, other: FlatPoint) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5() - other.group0(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<FlatPointAtInfinity> for MultiVector {
    fn sub_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<FlatPointAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: FlatPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Flector> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group4(),
                g5: self.group5() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9() - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: self.group10() - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl SubAssign<Flector> for MultiVector {
    fn sub_assign(&mut self, other: Flector) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlectorAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10() - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl SubAssign<FlectorAtInfinity> for MultiVector {
    fn sub_assign(&mut self, other: FlectorAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<Horizon> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10() - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<Horizon> for MultiVector {
    fn sub_assign(&mut self, other: Horizon) {
        *self = (*self).sub(other);
    }
}

impl Sub<Infinity> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - Simd32x2::from([0.0, other.group0()]),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<Infinity> for MultiVector {
    fn sub_assign(&mut self, other: Infinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<Line> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7() - other.group0(),
                g8: self.group8() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<Line> for MultiVector {
    fn sub_assign(&mut self, other: Line) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<LineAtInfinity> for MultiVector {
    fn sub_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7() - other.group0(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<LineAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Motor> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: self.group8() - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<Motor> for MultiVector {
    fn sub_assign(&mut self, other: Motor) {
        *self = (*self).sub(other);
    }
}

impl Sub<MultiVector> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
                g2: self.group2() - other.group2(),
                g3: self.group3() - other.group3(),
                g4: self.group4() - other.group4(),
                g5: self.group5() - other.group5(),
                g6: self.group6() - other.group6(),
                g7: self.group7() - other.group7(),
                g8: self.group8() - other.group8(),
                g9: self.group9() - other.group9(),
                g10: self.group10() - other.group10(),
            },
        }
    }
}

impl SubAssign<MultiVector> for MultiVector {
    fn sub_assign(&mut self, other: MultiVector) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullCircleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6() - other.group0(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<NullCircleAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullDipoleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<NullDipoleAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullSphereAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10() - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl SubAssign<NullSphereAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: NullSphereAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Origin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - Simd32x2::from([other.group0(), 0.0]),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<Origin> for MultiVector {
    fn sub_assign(&mut self, other: Origin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Plane> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: self.group10() - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl SubAssign<Plane> for MultiVector {
    fn sub_assign(&mut self, other: Plane) {
        *self = (*self).sub(other);
    }
}

impl Sub<PlaneAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9() - other.group0(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<PlaneAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Rotor> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<Rotor> for MultiVector {
    fn sub_assign(&mut self, other: Rotor) {
        *self = (*self).sub(other);
    }
}

impl Sub<RoundPoint> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
                g2: self.group2() - other.group1(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<RoundPoint> for MultiVector {
    fn sub_assign(&mut self, other: RoundPoint) {
        *self = (*self).sub(other);
    }
}

impl Sub<RoundPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2() - other.group0(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<RoundPointAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: RoundPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Scalar> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - Simd32x2::from([other.group0(), 0.0]),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<Scalar> for MultiVector {
    fn sub_assign(&mut self, other: Scalar) {
        *self = (*self).sub(other);
    }
}

impl Sub<Sphere> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9() - other.group0(),
                g10: self.group10() - other.group1(),
            },
        }
    }
}

impl SubAssign<Sphere> for MultiVector {
    fn sub_assign(&mut self, other: Sphere) {
        *self = (*self).sub(other);
    }
}

impl Sub<SphereAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9(),
                g10: self.group10() - other.group0(),
            },
        }
    }
}

impl SubAssign<SphereAtOrigin> for MultiVector {
    fn sub_assign(&mut self, other: SphereAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<SphereOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: self.group10() - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl SubAssign<SphereOnOrigin> for MultiVector {
    fn sub_assign(&mut self, other: SphereOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Transflector> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0(),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5() - other.group0(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8(),
                g9: self.group9() - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: self.group10() - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl SubAssign<Transflector> for MultiVector {
    fn sub_assign(&mut self, other: Transflector) {
        *self = (*self).sub(other);
    }
}

impl Sub<Translator> for MultiVector {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() - Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group1(),
                g2: self.group2(),
                g3: self.group3(),
                g4: self.group4(),
                g5: self.group5(),
                g6: self.group6(),
                g7: self.group7(),
                g8: self.group8() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: self.group9(),
                g10: self.group10(),
            },
        }
    }
}

impl SubAssign<Translator> for MultiVector {
    fn sub_assign(&mut self, other: Translator) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiCircleOnOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for NullCircleAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn sub(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for NullCircleAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn sub(self, other: AntiFlatPointAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for NullCircleAtOrigin {
    type Output = Dilator;

    fn sub(self, other: AntiScalar) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: self.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for NullCircleAtOrigin {
    type Output = Circle;

    fn sub(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for NullCircleAtOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for NullCircleAtOrigin {
    type Output = Circle;

    fn sub(self, other: CircleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for NullCircleAtOrigin {
    type Output = CircleAtOrigin;

    fn sub(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for NullCircleAtOrigin {
    type Output = CircleOnOrigin;

    fn sub(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn sub(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for NullCircleAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0(),
                g1: self.group0() - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for NullCircleAtOrigin {
    type Output = CircleAligningOrigin;

    fn sub(self, other: Line) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<LineAtInfinity> for NullCircleAtOrigin {
    type Output = CircleAtOrigin;

    fn sub(self, other: LineAtInfinity) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<LineAtOrigin> for NullCircleAtOrigin {
    type Output = CircleOnOrigin;

    fn sub(self, other: LineAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<Motor> for NullCircleAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Motor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<MultiVector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: self.group0() - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn sub(self, other: NullCircleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<NullCircleAtOrigin> for NullCircleAtOrigin {
    fn sub_assign(&mut self, other: NullCircleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullDipoleAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for NullCircleAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Rotor) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: self.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for NullCircleAtOrigin {
    type Output = Dilator;

    fn sub(self, other: Translator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: 0.0 - other.group0()[3],
                g1: self.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for NullDipoleAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn sub(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for NullDipoleAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn sub(self, other: AntiLineAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<AntiPlane> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for NullDipoleAtOrigin {
    type Output = Dipole;

    fn sub(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x4::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for NullDipoleAtOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for NullDipoleAtOrigin {
    type Output = Dipole;

    fn sub(self, other: DipoleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for NullDipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn sub(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for NullDipoleAtOrigin {
    type Output = DipoleOnOrigin;

    fn sub(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn sub(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<DualNum> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for NullDipoleAtOrigin {
    type Output = DipoleAligningOrigin;

    fn sub(self, other: FlatPoint) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0(),
                g1: Simd32x4::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for NullDipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn sub(self, other: FlatPointAtInfinity) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for NullDipoleAtOrigin {
    type Output = DipoleOnOrigin;

    fn sub(self, other: FlatPointAtOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Flector> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn sub(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<NullDipoleAtOrigin> for NullDipoleAtOrigin {
    fn sub_assign(&mut self, other: NullDipoleAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<NullSphereAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<AntiPlane> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<AntiScalar> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Circle> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Dilator> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Dipole> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<DualNum> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<FlatPoint> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Flector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([self.group0(), 0.0]) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for NullSphereAtOrigin {
    type Output = SphereAtOrigin;

    fn sub(self, other: Horizon) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Line> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<LineAtInfinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<LineAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Motor> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<MultiVector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from([self.group0(), 0.0]) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn sub(self, other: NullSphereAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<NullSphereAtOrigin> for NullSphereAtOrigin {
    fn sub_assign(&mut self, other: NullSphereAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Origin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Plane> for NullSphereAtOrigin {
    type Output = Sphere;

    fn sub(self, other: Plane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([self.group0(), 0.0]) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for NullSphereAtOrigin {
    type Output = SphereOnOrigin;

    fn sub(self, other: PlaneAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<Rotor> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<RoundPoint> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Scalar> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Sphere> for NullSphereAtOrigin {
    type Output = Sphere;

    fn sub(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x2::from([self.group0(), 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for NullSphereAtOrigin {
    type Output = SphereAtOrigin;

    fn sub(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for NullSphereAtOrigin {
    type Output = SphereOnOrigin;

    fn sub(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<Transflector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([self.group0(), 0.0]) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from([self.group0(), 0.0]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for Origin {
    type Output = RoundPoint;

    fn sub(self, other: AntiPlane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([self.group0(), 0.0]) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Origin {
    type Output = AntiSphereOnOrigin;

    fn sub(self, other: AntiPlaneAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<AntiScalar> for Origin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for Origin {
    type Output = AntiSphereOnOrigin;

    fn sub(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()]) - other.group0(),
            },
        }
    }
}

impl Sub<Circle> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Origin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Origin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for Origin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for Origin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Origin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Origin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for Origin {
    type Output = RoundPointAtOrigin;

    fn sub(self, other: Infinity) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Line> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for Origin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for Origin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from([self.group0(), 0.0]) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Origin {
    type Output = Origin;

    fn sub(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<Origin> for Origin {
    fn sub_assign(&mut self, other: Origin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Plane> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for Origin {
    type Output = RoundPoint;

    fn sub(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x2::from([self.group0(), 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Origin {
    type Output = RoundPointAtOrigin;

    fn sub(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<Scalar> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Origin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for Origin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from([self.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiPlane> for Plane {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiScalar> for Plane {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Circle> for Plane {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Plane {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Dilator> for Plane {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Dipole> for Plane {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Plane {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<DualNum> for Plane {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<FlatPoint> for Plane {
    type Output = Flector;

    fn sub(self, other: FlatPoint) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(0.0) - other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Plane {
    type Output = Transflector;

    fn sub(self, other: FlatPointAtInfinity) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for Plane {
    type Output = Flector;

    fn sub(self, other: FlatPointAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<Flector> for Plane {
    type Output = Flector;

    fn sub(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Plane {
    type Output = Transflector;

    fn sub(self, other: FlectorAtInfinity) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for Plane {
    type Output = Plane;

    fn sub(self, other: Horizon) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<Horizon> for Plane {
    fn sub_assign(&mut self, other: Horizon) {
        *self = (*self).sub(other);
    }
}

impl Sub<Infinity> for Plane {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Line> for Plane {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<LineAtInfinity> for Plane {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<LineAtOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Motor> for Plane {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<MultiVector> for Plane {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group9(),
                g10: Simd32x2::from([0.0, self.group0()[3]]) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Plane {
    type Output = Sphere;

    fn sub(self, other: NullSphereAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()[3]]) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Plane> for Plane {
    type Output = Plane;

    fn sub(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<Plane> for Plane {
    fn sub_assign(&mut self, other: Plane) {
        *self = (*self).sub(other);
    }
}

impl Sub<PlaneAtOrigin> for Plane {
    type Output = Plane;

    fn sub(self, other: PlaneAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<PlaneAtOrigin> for Plane {
    fn sub_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Rotor> for Plane {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<RoundPoint> for Plane {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Plane {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Scalar> for Plane {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<Sphere> for Plane {
    type Output = Sphere;

    fn sub(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x2::from([0.0, self.group0()[3]]) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Plane {
    type Output = Sphere;

    fn sub(self, other: SphereAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()[3]]) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Plane {
    type Output = Sphere;

    fn sub(self, other: SphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([0.0, self.group0()[3]]) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Plane {
    type Output = Transflector;

    fn sub(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
            },
        }
    }
}

impl Sub<Translator> for Plane {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for PlaneAtOrigin {
    type Output = Flector;

    fn sub(self, other: FlatPoint) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(0.0) - other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for PlaneAtOrigin {
    type Output = Transflector;

    fn sub(self, other: FlatPointAtInfinity) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for PlaneAtOrigin {
    type Output = Flector;

    fn sub(self, other: FlatPointAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<Flector> for PlaneAtOrigin {
    type Output = Flector;

    fn sub(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(0.0) - other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for PlaneAtOrigin {
    type Output = Transflector;

    fn sub(self, other: FlectorAtInfinity) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for PlaneAtOrigin {
    type Output = Plane;

    fn sub(self, other: Horizon) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: self.group0() - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for PlaneAtOrigin {
    type Output = SphereOnOrigin;

    fn sub(self, other: NullSphereAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Origin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for PlaneAtOrigin {
    type Output = Plane;

    fn sub(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn sub(self, other: PlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<PlaneAtOrigin> for PlaneAtOrigin {
    fn sub_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Rotor> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for PlaneAtOrigin {
    type Output = Sphere;

    fn sub(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for PlaneAtOrigin {
    type Output = Sphere;

    fn sub(self, other: SphereAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0(),
                g1: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for PlaneAtOrigin {
    type Output = SphereOnOrigin;

    fn sub(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<Transflector> for PlaneAtOrigin {
    type Output = Transflector;

    fn sub(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<Translator> for PlaneAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: self.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Rotor {
    type Output = Dilator;

    fn sub(self, other: AntiDipoleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Rotor {
    type Output = Dilator;

    fn sub(self, other: AntiFlatPointAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for Rotor {
    type Output = Rotor;

    fn sub(self, other: AntiScalar) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<AntiScalar> for Rotor {
    fn sub_assign(&mut self, other: AntiScalar) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiSphereOnOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for Rotor {
    type Output = Dilator;

    fn sub(self, other: Circle) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
                g3: Simd32x4::from(0.0) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Rotor {
    type Output = Dilator;

    fn sub(self, other: CircleAligningOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Rotor {
    type Output = Dilator;

    fn sub(self, other: CircleAtInfinity) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g3: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Rotor {
    type Output = Dilator;

    fn sub(self, other: CircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Rotor {
    type Output = Dilator;

    fn sub(self, other: CircleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Rotor {
    type Output = Dilator;

    fn sub(self, other: CircleOrthogonalOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for Rotor {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3] - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for Rotor {
    type Output = Motor;

    fn sub(self, other: Line) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<LineAtInfinity> for Rotor {
    type Output = Motor;

    fn sub(self, other: LineAtInfinity) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0(),
                g1: Simd32x3::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<LineAtOrigin> for Rotor {
    type Output = Rotor;

    fn sub(self, other: LineAtOrigin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<LineAtOrigin> for Rotor {
    fn sub_assign(&mut self, other: LineAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Motor> for Rotor {
    type Output = Motor;

    fn sub(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<MultiVector> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Rotor {
    type Output = Dilator;

    fn sub(self, other: NullCircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g3: Simd32x4::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for Rotor {
    type Output = Rotor;

    fn sub(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<Rotor> for Rotor {
    fn sub_assign(&mut self, other: Rotor) {
        *self = (*self).sub(other);
    }
}

impl Sub<RoundPoint> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Rotor {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for Rotor {
    type Output = Motor;

    fn sub(self, other: Translator) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for RoundPoint {
    type Output = RoundPoint;

    fn sub(self, other: AntiPlane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl SubAssign<AntiPlane> for RoundPoint {
    fn sub_assign(&mut self, other: AntiPlane) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiPlaneAtOrigin> for RoundPoint {
    type Output = RoundPoint;

    fn sub(self, other: AntiPlaneAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<AntiPlaneAtOrigin> for RoundPoint {
    fn sub_assign(&mut self, other: AntiPlaneAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiScalar> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for RoundPoint {
    type Output = RoundPoint;

    fn sub(self, other: AntiSphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl SubAssign<AntiSphereOnOrigin> for RoundPoint {
    fn sub_assign(&mut self, other: AntiSphereOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Circle> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for RoundPoint {
    type Output = RoundPoint;

    fn sub(self, other: Infinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<Infinity> for RoundPoint {
    fn sub_assign(&mut self, other: Infinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<Line> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
                g2: self.group1() - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for RoundPoint {
    type Output = RoundPoint;

    fn sub(self, other: Origin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl SubAssign<Origin> for RoundPoint {
    fn sub_assign(&mut self, other: Origin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Plane> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for RoundPoint {
    type Output = RoundPoint;

    fn sub(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<RoundPoint> for RoundPoint {
    fn sub_assign(&mut self, other: RoundPoint) {
        *self = (*self).sub(other);
    }
}

impl Sub<RoundPointAtOrigin> for RoundPoint {
    type Output = RoundPoint;

    fn sub(self, other: RoundPointAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
            },
        }
    }
}

impl SubAssign<RoundPointAtOrigin> for RoundPoint {
    fn sub_assign(&mut self, other: RoundPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Scalar> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for RoundPoint {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: self.group0(),
                g2: self.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for RoundPointAtOrigin {
    type Output = RoundPoint;

    fn sub(self, other: AntiPlane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for RoundPointAtOrigin {
    type Output = RoundPoint;

    fn sub(self, other: AntiPlaneAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<AntiScalar> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for RoundPointAtOrigin {
    type Output = RoundPoint;

    fn sub(self, other: AntiSphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Circle> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn sub(self, other: Infinity) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<Infinity> for RoundPointAtOrigin {
    fn sub_assign(&mut self, other: Infinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<Line> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: self.group0() - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn sub(self, other: Origin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl SubAssign<Origin> for RoundPointAtOrigin {
    fn sub_assign(&mut self, other: Origin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Plane> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for RoundPointAtOrigin {
    type Output = RoundPoint;

    fn sub(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn sub(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<RoundPointAtOrigin> for RoundPointAtOrigin {
    fn sub_assign(&mut self, other: RoundPointAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Scalar> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: self.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for Scalar {
    type Output = DualNum;

    fn sub(self, other: AntiScalar) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dilator> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Dipole> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for Scalar {
    type Output = DualNum;

    fn sub(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<FlatPoint> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtInfinity> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<LineAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Motor> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<MultiVector> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPoint> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for Scalar {
    type Output = Scalar;

    fn sub(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<Scalar> for Scalar {
    fn sub_assign(&mut self, other: Scalar) {
        *self = (*self).sub(other);
    }
}

impl Sub<Sphere> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for Scalar {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([self.group0(), 0.0]) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<AntiPlane> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<AntiScalar> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<Circle> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<Dilator> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<Dipole> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<DualNum> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<FlatPoint> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<Flector> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: self.group1() - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1() - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for Sphere {
    type Output = Sphere;

    fn sub(self, other: Horizon) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<Horizon> for Sphere {
    fn sub_assign(&mut self, other: Horizon) {
        *self = (*self).sub(other);
    }
}

impl Sub<Infinity> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<Line> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<LineAtInfinity> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<LineAtOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<Motor> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<MultiVector> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: self.group0() - other.group9(),
                g10: self.group1() - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Sphere {
    type Output = Sphere;

    fn sub(self, other: NullSphereAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl SubAssign<NullSphereAtOrigin> for Sphere {
    fn sub_assign(&mut self, other: NullSphereAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Origin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<Plane> for Sphere {
    type Output = Sphere;

    fn sub(self, other: Plane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl SubAssign<Plane> for Sphere {
    fn sub_assign(&mut self, other: Plane) {
        *self = (*self).sub(other);
    }
}

impl Sub<PlaneAtOrigin> for Sphere {
    type Output = Sphere;

    fn sub(self, other: PlaneAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<PlaneAtOrigin> for Sphere {
    fn sub_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Rotor> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<RoundPoint> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<Scalar> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<Sphere> for Sphere {
    type Output = Sphere;

    fn sub(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<Sphere> for Sphere {
    fn sub_assign(&mut self, other: Sphere) {
        *self = (*self).sub(other);
    }
}

impl Sub<SphereAtOrigin> for Sphere {
    type Output = Sphere;

    fn sub(self, other: SphereAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
            },
        }
    }
}

impl SubAssign<SphereAtOrigin> for Sphere {
    fn sub_assign(&mut self, other: SphereAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<SphereOnOrigin> for Sphere {
    type Output = Sphere;

    fn sub(self, other: SphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl SubAssign<SphereOnOrigin> for Sphere {
    fn sub_assign(&mut self, other: SphereOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Transflector> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: self.group1() - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for Sphere {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: self.group0(),
                g10: self.group1(),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<AntiPlane> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<AntiScalar> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<Circle> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<Dilator> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<Dipole> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<DualNum> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<FlatPoint> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<Flector> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: self.group0() - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0() - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn sub(self, other: Horizon) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<Horizon> for SphereAtOrigin {
    fn sub_assign(&mut self, other: Horizon) {
        *self = (*self).sub(other);
    }
}

impl Sub<Infinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<Line> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<LineAtInfinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<LineAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<Motor> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<MultiVector> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: self.group0() - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn sub(self, other: NullSphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl SubAssign<NullSphereAtOrigin> for SphereAtOrigin {
    fn sub_assign(&mut self, other: NullSphereAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Origin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<Plane> for SphereAtOrigin {
    type Output = Sphere;

    fn sub(self, other: Plane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for SphereAtOrigin {
    type Output = Sphere;

    fn sub(self, other: PlaneAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0(),
            },
        }
    }
}

impl Sub<Rotor> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<RoundPoint> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<Scalar> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<Sphere> for SphereAtOrigin {
    type Output = Sphere;

    fn sub(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - other.group0(),
                g1: self.group0() - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn sub(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<SphereAtOrigin> for SphereAtOrigin {
    fn sub_assign(&mut self, other: SphereAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<SphereOnOrigin> for SphereAtOrigin {
    type Output = Sphere;

    fn sub(self, other: SphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: self.group0() - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for SphereAtOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: self.group0(),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<AntiPlane> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<AntiScalar> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Circle> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Dilator> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Dipole> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<DualNum> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<FlatPoint> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Flector> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for SphereOnOrigin {
    type Output = Sphere;

    fn sub(self, other: Horizon) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([self.group0()[3], 0.0]) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Line> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<LineAtInfinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<LineAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Motor> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<MultiVector> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group9(),
                g10: Simd32x2::from([self.group0()[3], 0.0]) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn sub(self, other: NullSphereAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<NullSphereAtOrigin> for SphereOnOrigin {
    fn sub_assign(&mut self, other: NullSphereAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Origin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Plane> for SphereOnOrigin {
    type Output = Sphere;

    fn sub(self, other: Plane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from([self.group0()[3], 0.0]) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn sub(self, other: PlaneAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<PlaneAtOrigin> for SphereOnOrigin {
    fn sub_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Rotor> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<RoundPoint> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Scalar> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Sphere> for SphereOnOrigin {
    type Output = Sphere;

    fn sub(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group0(),
                g1: Simd32x2::from([self.group0()[3], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for SphereOnOrigin {
    type Output = Sphere;

    fn sub(self, other: SphereAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g1: Simd32x2::from([self.group0()[3], 0.0]) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn sub(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<SphereOnOrigin> for SphereOnOrigin {
    fn sub_assign(&mut self, other: SphereOnOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Transflector> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for SphereOnOrigin {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
                g10: Simd32x2::from([self.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiPlane> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiScalar> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiSphereOnOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Circle> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - other.group2(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0) - other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - other.group1(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Dilator> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: Dilator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group1(),
                g7: Simd32x3::from(0.0) - other.group2(),
                g8: Simd32x4::from(0.0) - other.group3(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Dipole> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: self.group0() - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: self.group0() - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: self.group0() - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group0() - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: self.group0() - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<DualNum> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<FlatPoint> for Transflector {
    type Output = Flector;

    fn sub(self, other: FlatPoint) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Transflector {
    type Output = Transflector;

    fn sub(self, other: FlatPointAtInfinity) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1(),
            },
        }
    }
}

impl SubAssign<FlatPointAtInfinity> for Transflector {
    fn sub_assign(&mut self, other: FlatPointAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<FlatPointAtOrigin> for Transflector {
    type Output = Flector;

    fn sub(self, other: FlatPointAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g1: self.group1(),
            },
        }
    }
}

impl Sub<Flector> for Transflector {
    type Output = Flector;

    fn sub(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Transflector {
    type Output = Transflector;

    fn sub(self, other: FlectorAtInfinity) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group1() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl SubAssign<FlectorAtInfinity> for Transflector {
    fn sub_assign(&mut self, other: FlectorAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<Horizon> for Transflector {
    type Output = Transflector;

    fn sub(self, other: Horizon) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<Horizon> for Transflector {
    fn sub_assign(&mut self, other: Horizon) {
        *self = (*self).sub(other);
    }
}

impl Sub<Infinity> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Line> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<LineAtInfinity> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<LineAtOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Motor> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<MultiVector> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: self.group0() - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from(0.0) - other.group8(),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - other.group9(),
                g10: Simd32x2::from([0.0, self.group1()[3]]) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0) - other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Plane> for Transflector {
    type Output = Transflector;

    fn sub(self, other: Plane) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0(),
                g1: self.group1() - other.group0(),
            },
        }
    }
}

impl SubAssign<Plane> for Transflector {
    fn sub_assign(&mut self, other: Plane) {
        *self = (*self).sub(other);
    }
}

impl Sub<PlaneAtOrigin> for Transflector {
    type Output = Transflector;

    fn sub(self, other: PlaneAtOrigin) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0(),
                g1: self.group1() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<PlaneAtOrigin> for Transflector {
    fn sub_assign(&mut self, other: PlaneAtOrigin) {
        *self = (*self).sub(other);
    }
}

impl Sub<Rotor> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<RoundPoint> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Scalar> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<Sphere> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - other.group0(),
                g10: Simd32x2::from([0.0, self.group1()[3]]) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Transflector {
    type Output = Transflector;

    fn sub(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() - other.group0(),
                g1: self.group1() - other.group1(),
            },
        }
    }
}

impl SubAssign<Transflector> for Transflector {
    fn sub_assign(&mut self, other: Transflector) {
        *self = (*self).sub(other);
    }
}

impl Sub<Translator> for Transflector {
    type Output = MultiVector;

    fn sub(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]),
                g10: Simd32x2::from([0.0, self.group1()[3]]),
            },
        }
    }
}

impl Sub<AntiCircleOnOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiDipoleOnOrigin> for Translator {
    type Output = Dilator;

    fn sub(self, other: AntiDipoleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<AntiFlatPointAtOrigin> for Translator {
    type Output = Dilator;

    fn sub(self, other: AntiFlatPointAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Sub<AntiLineAtOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlane> for Translator {
    type Output = MultiVector;

    fn sub(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiPlaneAtOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<AntiScalar> for Translator {
    type Output = Translator;

    fn sub(self, other: AntiScalar) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl SubAssign<AntiScalar> for Translator {
    fn sub_assign(&mut self, other: AntiScalar) {
        *self = (*self).sub(other);
    }
}

impl Sub<AntiSphereOnOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Circle> for Translator {
    type Output = Dilator;

    fn sub(self, other: Circle) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0) - other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group2(),
            },
        }
    }
}

impl Sub<CircleAligningOrigin> for Translator {
    type Output = Dilator;

    fn sub(self, other: CircleAligningOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0) - other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleAtInfinity> for Translator {
    type Output = Dilator;

    fn sub(self, other: CircleAtInfinity) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0),
                g2: Simd32x3::from(0.0) - other.group0(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<CircleAtOrigin> for Translator {
    type Output = Dilator;

    fn sub(self, other: CircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleOnOrigin> for Translator {
    type Output = Dilator;

    fn sub(self, other: CircleOnOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0) - other.group1(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<CircleOrthogonalOrigin> for Translator {
    type Output = Dilator;

    fn sub(self, other: CircleOrthogonalOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group1(),
            },
        }
    }
}

impl Sub<Dilator> for Translator {
    type Output = Dilator;

    fn sub(self, other: Dilator) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3] - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x3::from(0.0) - other.group2(),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group3(),
            },
        }
    }
}

impl Sub<Dipole> for Translator {
    type Output = MultiVector;

    fn sub(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAligningOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtInfinity> for Translator {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(0.0) - other.group0(),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleAtOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOnOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DipoleOrthogonalOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - other.group1(),
                g5: Simd32x3::from(0.0) - other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<DualNum> for Translator {
    type Output = MultiVector;

    fn sub(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) - other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPoint> for Translator {
    type Output = MultiVector;

    fn sub(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtInfinity> for Translator {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<FlatPointAtOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Flector> for Translator {
    type Output = MultiVector;

    fn sub(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<FlectorAtInfinity> for Translator {
    type Output = MultiVector;

    fn sub(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<Horizon> for Translator {
    type Output = MultiVector;

    fn sub(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Sub<Infinity> for Translator {
    type Output = MultiVector;

    fn sub(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Line> for Translator {
    type Output = Motor;

    fn sub(self, other: Line) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
            },
        }
    }
}

impl Sub<LineAtInfinity> for Translator {
    type Output = Translator;

    fn sub(self, other: LineAtInfinity) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl SubAssign<LineAtInfinity> for Translator {
    fn sub_assign(&mut self, other: LineAtInfinity) {
        *self = (*self).sub(other);
    }
}

impl Sub<LineAtOrigin> for Translator {
    type Output = Motor;

    fn sub(self, other: LineAtOrigin) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Sub<Motor> for Translator {
    type Output = Motor;

    fn sub(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) - other.group1(),
            },
        }
    }
}

impl Sub<MultiVector> for Translator {
    type Output = MultiVector;

    fn sub(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) - other.group0(),
                g1: Simd32x3::from(0.0) - other.group1(),
                g2: Simd32x2::from(0.0) - other.group2(),
                g3: Simd32x4::from(0.0) - other.group3(),
                g4: Simd32x3::from(0.0) - other.group4(),
                g5: Simd32x3::from(0.0) - other.group5(),
                g6: Simd32x3::from(0.0) - other.group6(),
                g7: Simd32x3::from(0.0) - other.group7(),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]) - other.group8(),
                g9: Simd32x3::from(0.0) - other.group9(),
                g10: Simd32x2::from(0.0) - other.group10(),
            },
        }
    }
}

impl Sub<NullCircleAtOrigin> for Translator {
    type Output = Dilator;

    fn sub(self, other: NullCircleAtOrigin) -> Dilator {
        Dilator {
            groups: DilatorGroups {
                g0: self.group0()[3],
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x3::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
            },
        }
    }
}

impl Sub<NullDipoleAtOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0) - Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<NullSphereAtOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Sub<Origin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Plane> for Translator {
    type Output = MultiVector;

    fn sub(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Sub<PlaneAtOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Rotor> for Translator {
    type Output = Motor;

    fn sub(self, other: Rotor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([0.0, 0.0, 0.0, self.group0()[3]]) - other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]),
            },
        }
    }
}

impl Sub<RoundPoint> for Translator {
    type Output = MultiVector;

    fn sub(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0) - other.group0(),
                g2: Simd32x2::from(0.0) - other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<RoundPointAtOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0) - other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Scalar> for Translator {
    type Output = MultiVector;

    fn sub(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]) - Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Sub<Sphere> for Translator {
    type Output = MultiVector;

    fn sub(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0) - other.group0(),
                g10: Simd32x2::from(0.0) - other.group1(),
            },
        }
    }
}

impl Sub<SphereAtOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0) - other.group0(),
            },
        }
    }
}

impl Sub<SphereOnOrigin> for Translator {
    type Output = MultiVector;

    fn sub(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Sub<Transflector> for Translator {
    type Output = MultiVector;

    fn sub(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from([0.0, self.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(0.0) - Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Sub<Translator> for Translator {
    type Output = Translator;

    fn sub(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() - other.group0(),
            },
        }
    }
}

impl SubAssign<Translator> for Translator {
    fn sub_assign(&mut self, other: Translator) {
        *self = (*self).sub(other);
    }
}
