//
// AUTO-GENERATED - DO NOT MODIFY
//
// To contribute to this file, see the adjacent codegen package.
// https://github.com/AndrewBrownK/projective_ga/
//

use crate::*;

/// Exterior Product
/// Synonyms included: Wedge, Join
/// https://rigidgeometricalgebra.org/wiki/index.php?title=Exterior_products
pub trait Wedge<T> {
    type Output;
    fn wedge(self, other: T) -> Self::Output;
}

/// Exterior Product
/// Synonyms included: Wedge, Join
/// https://rigidgeometricalgebra.org/wiki/index.php?title=Exterior_products
pub trait Join<T> {
    type Output;
    fn join(self, other: T) -> Self::Output;
}

/// Geometric Anti-Product
/// Synonyms included: AntiWedge, Meet
/// https://rigidgeometricalgebra.org/wiki/index.php?title=Exterior_products
pub trait AntiWedge<T> {
    type Output;
    fn anti_wedge(self, other: T) -> Self::Output;
}

/// Geometric Anti-Product
/// Synonyms included: AntiWedge, Meet
/// https://rigidgeometricalgebra.org/wiki/index.php?title=Exterior_products
pub trait Meet<T> {
    type Output;
    fn meet(self, other: T) -> Self::Output;
}

impl AntiWedge<AntiScalar> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: AntiScalar) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group1()[0] - self.group1()[1] * other.group1()[1] - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: DualNum) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Flector) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for AntiCircleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: FlectorAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Horizon> for AntiCircleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Horizon) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: LineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group7()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[1]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Plane> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Plane) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Sphere) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Transflector) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Translator> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn anti_wedge(self, other: AntiScalar) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Circle) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: CircleAligningOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: CircleAtInfinity) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: CircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Dipole> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn anti_wedge(self, other: DualNum) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for AntiDipoleOnOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: Horizon) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Line) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: LineAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: LineAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Motor> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group3()[3], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group7(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0]),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[1]) - Simd32x3::from(self.group0()[3]) * other.group9(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Plane> for AntiDipoleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: Plane) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Rotor> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for AntiDipoleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: Sphere) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[1]) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Transflector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Circle> for AntiFlatPointAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Circle) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleAligningOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for AntiFlatPointAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<Dipole> for AntiFlatPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group2()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for AntiFlatPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for AntiFlatPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<DualNum> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: DualNum) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<FlatPoint> for AntiFlatPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Line> for AntiFlatPointAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Line) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: LineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([-other.group3()[3], 0.0]),
                g1: Simd32x3::from(self.group0()) * other.group7(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group9(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Plane> for AntiFlatPointAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: Plane) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Rotor> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for AntiFlatPointAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: Sphere) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Transflector> for AntiFlatPointAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: Transflector) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Translator> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: Translator) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for AntiLineAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for AntiLineAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for AntiLineAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for AntiLineAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: DualNum) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for AntiLineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Flector) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Line> for AntiLineAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for AntiLineAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: LineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[1]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Plane> for AntiLineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Plane) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for AntiLineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for AntiLineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Sphere) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for AntiLineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for AntiLineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Transflector) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Translator> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: Translator) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for AntiPlane {
    type Output = AntiPlane;

    fn anti_wedge(self, other: AntiScalar) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<DualNum> for AntiPlane {
    type Output = AntiPlane;

    fn anti_wedge(self, other: DualNum) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for AntiPlane {
    type Output = Scalar;

    fn anti_wedge(self, other: Flector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for AntiPlane {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Motor) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for AntiPlane {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group9()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group10()[0], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[1]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for AntiPlane {
    type Output = Scalar;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for AntiPlane {
    type Output = Scalar;

    fn anti_wedge(self, other: Plane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for AntiPlane {
    type Output = Scalar;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Rotor> for AntiPlane {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Rotor) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Sphere> for AntiPlane {
    type Output = Scalar;

    fn anti_wedge(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[0],
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for AntiPlane {
    type Output = Scalar;

    fn anti_wedge(self, other: SphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for AntiPlane {
    type Output = Scalar;

    fn anti_wedge(self, other: SphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Transflector> for AntiPlane {
    type Output = Scalar;

    fn anti_wedge(self, other: Transflector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<Translator> for AntiPlane {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Translator) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<DualNum> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: DualNum) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for AntiPlaneAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Flector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Motor) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group9()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Plane> for AntiPlaneAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Plane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for AntiPlaneAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Rotor> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Rotor) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Sphere> for AntiPlaneAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for AntiPlaneAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: SphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Transflector> for AntiPlaneAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Transflector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<Translator> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Translator) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for AntiScalar {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for AntiScalar {
    type Output = AntiDipoleOnOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for AntiScalar {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for AntiScalar {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for AntiScalar {
    type Output = AntiPlane;

    fn anti_wedge(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiPlaneAtOrigin> for AntiScalar {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for AntiScalar {
    type Output = AntiScalar;

    fn anti_wedge(self, other: AntiScalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for AntiScalar {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Circle> for AntiScalar {
    type Output = Circle;

    fn anti_wedge(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x4::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for AntiScalar {
    type Output = CircleAligningOrigin;

    fn anti_wedge(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for AntiScalar {
    type Output = CircleAtInfinity;

    fn anti_wedge(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for AntiScalar {
    type Output = CircleAtOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for AntiScalar {
    type Output = CircleOnOrigin;

    fn anti_wedge(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for AntiScalar {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<Dipole> for AntiScalar {
    type Output = Dipole;

    fn anti_wedge(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x4::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for AntiScalar {
    type Output = DipoleAligningOrigin;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for AntiScalar {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for AntiScalar {
    type Output = DipoleAtOrigin;

    fn anti_wedge(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for AntiScalar {
    type Output = DipoleOnOrigin;

    fn anti_wedge(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for AntiScalar {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl AntiWedge<DualNum> for AntiScalar {
    type Output = DualNum;

    fn anti_wedge(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for AntiScalar {
    type Output = FlatPoint;

    fn anti_wedge(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for AntiScalar {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for AntiScalar {
    type Output = FlatPointAtOrigin;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for AntiScalar {
    type Output = Flector;

    fn anti_wedge(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for AntiScalar {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Horizon> for AntiScalar {
    type Output = Horizon;

    fn anti_wedge(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Infinity> for AntiScalar {
    type Output = Infinity;

    fn anti_wedge(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Line> for AntiScalar {
    type Output = Line;

    fn anti_wedge(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for AntiScalar {
    type Output = LineAtInfinity;

    fn anti_wedge(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for AntiScalar {
    type Output = LineAtOrigin;

    fn anti_wedge(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for AntiScalar {
    type Output = Motor;

    fn anti_wedge(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<MultiVector> for AntiScalar {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x2::from(self.group0()) * other.group2(),
                g3: Simd32x4::from(self.group0()) * other.group3(),
                g4: Simd32x3::from(self.group0()) * other.group4(),
                g5: Simd32x3::from(self.group0()) * other.group5(),
                g6: Simd32x3::from(self.group0()) * other.group6(),
                g7: Simd32x3::from(self.group0()) * other.group7(),
                g8: Simd32x4::from(self.group0()) * other.group8(),
                g9: Simd32x3::from(self.group0()) * other.group9(),
                g10: Simd32x2::from(self.group0()) * other.group10(),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for AntiScalar {
    type Output = NullCircleAtOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for AntiScalar {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for AntiScalar {
    type Output = NullSphereAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Origin> for AntiScalar {
    type Output = Origin;

    fn anti_wedge(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for AntiScalar {
    type Output = Plane;

    fn anti_wedge(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for AntiScalar {
    type Output = PlaneAtOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Rotor> for AntiScalar {
    type Output = Rotor;

    fn anti_wedge(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for AntiScalar {
    type Output = RoundPoint;

    fn anti_wedge(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x2::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for AntiScalar {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Scalar> for AntiScalar {
    type Output = Scalar;

    fn anti_wedge(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Sphere> for AntiScalar {
    type Output = Sphere;

    fn anti_wedge(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x2::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for AntiScalar {
    type Output = SphereAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for AntiScalar {
    type Output = SphereOnOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Transflector> for AntiScalar {
    type Output = Transflector;

    fn anti_wedge(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<Translator> for AntiScalar {
    type Output = Translator;

    fn anti_wedge(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiScalar) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<DualNum> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: DualNum) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Flector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2] + self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlectorAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Horizon> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Horizon) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Motor) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group9()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group10()[1], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[1], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Plane> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Plane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Rotor> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Rotor) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Sphere> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[1],
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: SphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: SphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Transflector> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Transflector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2] + self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<Translator> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Translator) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for Circle {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for Circle {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for Circle {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for Circle {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Circle {
    type Output = Circle;

    fn anti_wedge(self, other: AntiScalar) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for Circle {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for Circle {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for Circle {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for Circle {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for Circle {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for Circle {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Dipole> for Circle {
    type Output = Scalar;

    fn anti_wedge(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group2()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for Circle {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for Circle {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for Circle {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for Circle {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for Circle {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for Circle {
    type Output = Circle;

    fn anti_wedge(self, other: DualNum) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
                g2: self.group2() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for Circle {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for Circle {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for Circle {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for Circle {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group0() * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for Circle {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: self.group1() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for Circle {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: Horizon) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
            },
        }
    }
}

impl AntiWedge<Line> for Circle {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Line) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for Circle {
    type Output = AntiPlane;

    fn anti_wedge(self, other: LineAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for Circle {
    type Output = RoundPoint;

    fn anti_wedge(self, other: LineAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group2()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Motor> for Circle {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: self.group2() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for Circle {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([-other.group3()[2], 0.0])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([-other.group3()[3], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group7(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]]),
                g4: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group10()[0])
                    - Simd32x3::from(self.group2()[3]) * other.group9(),
                g5: self.group1() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: self.group0() * Simd32x3::from(other.group0()[1]),
                g7: self.group1() * Simd32x3::from(other.group0()[1]),
                g8: self.group2() * Simd32x4::from(other.group0()[1]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for Circle {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for Circle {
    type Output = Scalar;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for Circle {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
                g1: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for Circle {
    type Output = Dipole;

    fn anti_wedge(self, other: Plane) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for Circle {
    type Output = Dipole;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group2()[3]) * other.group0(),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for Circle {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: self.group2() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for Circle {
    type Output = Dipole;

    fn anti_wedge(self, other: Sphere) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group1()[0])
                    - Simd32x3::from(self.group2()[3]) * other.group0(),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Circle {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]) + Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for Circle {
    type Output = Dipole;

    fn anti_wedge(self, other: SphereOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for Circle {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group0() * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for Circle {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: self.group2() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for CircleAligningOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for CircleAligningOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn anti_wedge(self, other: AntiScalar) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Dipole> for CircleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for CircleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn anti_wedge(self, other: DualNum) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
                g2: self.group2() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for CircleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for CircleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Flector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for CircleAligningOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: self.group1() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for CircleAligningOrigin {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: Horizon) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
            },
        }
    }
}

impl AntiWedge<Line> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Line) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for CircleAligningOrigin {
    type Output = AntiPlane;

    fn anti_wedge(self, other: LineAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for CircleAligningOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: LineAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Motor> for CircleAligningOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([-other.group3()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]]),
                g4: self.group0() * Simd32x3::from(other.group10()[1]) + self.group2() * Simd32x3::from(other.group10()[0]),
                g5: self.group1() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: self.group0() * Simd32x3::from(other.group0()[1]),
                g7: self.group1() * Simd32x3::from(other.group0()[1]),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for CircleAligningOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for CircleAligningOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
                g1: self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for CircleAligningOrigin {
    type Output = Dipole;

    fn anti_wedge(self, other: Plane) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for CircleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for CircleAligningOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for CircleAligningOrigin {
    type Output = Dipole;

    fn anti_wedge(self, other: Sphere) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + self.group2() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for CircleAligningOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]) + self.group2() * Simd32x3::from(other.group0()[0]),
                g2: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for CircleAligningOrigin {
    type Output = Dipole;

    fn anti_wedge(self, other: SphereOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group0()[3]),
                g1: self.group2() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for CircleAligningOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for CircleAtInfinity {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for CircleAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn anti_wedge(self, other: AntiScalar) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for CircleAtInfinity {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for CircleAtInfinity {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for CircleAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: CircleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for CircleAtInfinity {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for CircleAtInfinity {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for CircleAtInfinity {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Dipole> for CircleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for CircleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn anti_wedge(self, other: DualNum) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for CircleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for CircleAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for CircleAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: FlectorAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Horizon> for CircleAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: Horizon) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for CircleAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Line) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for CircleAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: LineAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for CircleAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: LineAtOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Motor> for CircleAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: self.group1() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for CircleAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group3()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([-other.group3()[3], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group7(),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]]),
                g4: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group10()[0]) - Simd32x3::from(self.group1()[3]) * other.group9(),
                g5: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[1]),
                g8: self.group1() * Simd32x4::from(other.group0()[1]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for CircleAtInfinity {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for CircleAtInfinity {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for CircleAtInfinity {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: Plane) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for CircleAtInfinity {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: PlaneAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for CircleAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: self.group1() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for CircleAtInfinity {
    type Output = Dipole;

    fn anti_wedge(self, other: Sphere) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for CircleAtInfinity {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for CircleAtInfinity {
    type Output = Dipole;

    fn anti_wedge(self, other: SphereOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for CircleAtInfinity {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: Transflector) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Translator> for CircleAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: self.group1() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for CircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for CircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for CircleAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for CircleAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for CircleAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for CircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for CircleAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for CircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Dipole> for CircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for CircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for CircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for CircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for CircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for CircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn anti_wedge(self, other: DualNum) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for CircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for CircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Flector> for CircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for CircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for CircleAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: Horizon) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for CircleAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Line) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for CircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: LineAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for CircleAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: LineAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Motor> for CircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for CircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group3()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group10()[1]) + self.group1() * Simd32x3::from(other.group10()[0]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: self.group0() * Simd32x3::from(other.group0()[1]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for CircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for CircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for CircleAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for CircleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: Plane) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for CircleAtOrigin {
    type Output = DipoleAtOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for CircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for CircleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: Sphere) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + self.group1() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for CircleAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) + self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for CircleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group1() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for CircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for CircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for CircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group1()[0] - self.group1()[1] * other.group1()[1] - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for CircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for CircleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for CircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn anti_wedge(self, other: AntiScalar) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for CircleOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for CircleOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for CircleOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for CircleOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for CircleOnOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: CircleOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for CircleOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Dipole> for CircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for CircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for CircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for CircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for CircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn anti_wedge(self, other: DualNum) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for CircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for CircleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Flector> for CircleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: self.group1() * Simd32x3::from(other.group1()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for CircleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: self.group1() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for CircleOnOrigin {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: Horizon) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
            },
        }
    }
}

impl AntiWedge<Line> for CircleOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Line) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for CircleOnOrigin {
    type Output = AntiPlane;

    fn anti_wedge(self, other: LineAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for CircleOnOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: LineAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for CircleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for CircleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group4()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group8()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]]),
                g4: self.group0() * Simd32x3::from(other.group10()[1]),
                g5: self.group1() * Simd32x3::from(other.group10()[1]),
                g6: self.group0() * Simd32x3::from(other.group0()[1]),
                g7: self.group1() * Simd32x3::from(other.group0()[1]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for CircleOnOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for CircleOnOrigin {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for CircleOnOrigin {
    type Output = Dipole;

    fn anti_wedge(self, other: Plane) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for CircleOnOrigin {
    type Output = DipoleOnOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Rotor> for CircleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for CircleOnOrigin {
    type Output = Dipole;

    fn anti_wedge(self, other: Sphere) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for CircleOnOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
                g2: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for CircleOnOrigin {
    type Output = DipoleOnOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Transflector> for CircleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: self.group1() * Simd32x3::from(other.group1()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for CircleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: AntiScalar) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for CircleOrthogonalOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for CircleOrthogonalOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Dipole> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: DualNum) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for CircleOrthogonalOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: Horizon) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for CircleOrthogonalOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Line) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: LineAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for CircleOrthogonalOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: LineAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Motor> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group3()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([-other.group3()[3], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group7(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group10()[0])
                    - Simd32x3::from(self.group1()[3]) * other.group9(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: self.group0() * Simd32x3::from(other.group0()[1]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from(other.group0()[1]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for CircleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: Plane) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for CircleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for CircleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: Sphere) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0])
                    - Simd32x3::from(self.group1()[3]) * other.group0(),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for CircleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for Dipole {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for Dipole {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Dipole {
    type Output = Dipole;

    fn anti_wedge(self, other: AntiScalar) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for Dipole {
    type Output = Scalar;

    fn anti_wedge(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group2()[3],
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for Dipole {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for Dipole {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for Dipole {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for Dipole {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for Dipole {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DualNum> for Dipole {
    type Output = Dipole;

    fn anti_wedge(self, other: DualNum) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
                g2: self.group2() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for Dipole {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Flector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for Dipole {
    type Output = AntiPlane;

    fn anti_wedge(self, other: FlectorAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl AntiWedge<Horizon> for Dipole {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Horizon) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AntiWedge<Line> for Dipole {
    type Output = Scalar;

    fn anti_wedge(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for Dipole {
    type Output = Scalar;

    fn anti_wedge(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for Dipole {
    type Output = Scalar;

    fn anti_wedge(self, other: LineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for Dipole {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for Dipole {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([-other.group8()[3], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0])
                    - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group2()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g4: self.group1() * Simd32x3::from(other.group0()[1]),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for Dipole {
    type Output = Scalar;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for Dipole {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group2() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for Dipole {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Plane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for Dipole {
    type Output = RoundPoint;

    fn anti_wedge(self, other: PlaneAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Rotor> for Dipole {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for Dipole {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Dipole {
    type Output = RoundPoint;

    fn anti_wedge(self, other: SphereAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group2()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for Dipole {
    type Output = RoundPoint;

    fn anti_wedge(self, other: SphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group2()[3], self.group2()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Transflector> for Dipole {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Transflector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<Translator> for Dipole {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn anti_wedge(self, other: AntiScalar) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for DipoleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for DipoleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DualNum> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn anti_wedge(self, other: DualNum) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for DipoleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Flector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for DipoleAligningOrigin {
    type Output = AntiPlane;

    fn anti_wedge(self, other: FlectorAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl AntiWedge<Horizon> for DipoleAligningOrigin {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Horizon) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AntiWedge<Line> for DipoleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for DipoleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([-other.group8()[3], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group10()[1])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for DipoleAligningOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for DipoleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Plane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for DipoleAligningOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Rotor> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn anti_wedge(self, other: Rotor) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Sphere> for DipoleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1]) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for DipoleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: SphereAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group1()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for DipoleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: SphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group1()[3], self.group1()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Transflector> for DipoleAligningOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Transflector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<Translator> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: AntiScalar) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for DipoleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for DipoleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DualNum> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: DualNum) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for DipoleAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Flector) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for DipoleAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: FlectorAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Horizon> for DipoleAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: Horizon) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group1()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Line> for DipoleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: LineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for DipoleAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for DipoleAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([-other.group8()[3], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g4: self.group0() * Simd32x3::from(other.group0()[1]),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for DipoleAtInfinity {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for DipoleAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Plane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for DipoleAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: PlaneAtOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Rotor> for DipoleAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for DipoleAtInfinity {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for DipoleAtInfinity {
    type Output = RoundPoint;

    fn anti_wedge(self, other: SphereAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group1()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for DipoleAtInfinity {
    type Output = RoundPoint;

    fn anti_wedge(self, other: SphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group1()[3], self.group1()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Transflector> for DipoleAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Transflector) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<Translator> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: Translator) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for DipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for DipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for DipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for DipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for DipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for DipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn anti_wedge(self, other: DualNum) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for DipoleAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Flector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for DipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: FlectorAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Horizon> for DipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Horizon) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for DipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for DipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for DipoleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for DipoleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group6()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group10()[1]) - self.group1() * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group9()[2]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for DipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for DipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for DipoleAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Plane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for DipoleAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Rotor> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn anti_wedge(self, other: Rotor) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Sphere> for DipoleAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1]) - self.group1() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for DipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for DipoleAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: SphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Transflector> for DipoleAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Transflector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Translator> for DipoleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for DipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for DipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn anti_wedge(self, other: AntiScalar) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for DipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for DipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for DipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for DipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DualNum> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn anti_wedge(self, other: DualNum) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for DipoleOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Flector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from([self.group0()[2], self.group0()[3]]) * Simd32x2::from([-other.group1()[2], other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for DipoleOnOrigin {
    type Output = AntiPlane;

    fn anti_wedge(self, other: FlectorAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Horizon> for DipoleOnOrigin {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Horizon) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for DipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for DipoleOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for DipoleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0() * Simd32x4::from(other.group0()[3]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for DipoleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group8()[3], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[1]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0]),
                g3: self.group0() * Simd32x4::from(other.group0()[1]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for DipoleOnOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for DipoleOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Plane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from([self.group0()[2], self.group0()[3]]) * Simd32x2::from([-other.group0()[2], other.group0()[3]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for DipoleOnOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Rotor> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn anti_wedge(self, other: Rotor) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Sphere> for DipoleOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[1]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for DipoleOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: SphereAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g1: Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for DipoleOnOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: SphereOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Transflector> for DipoleOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Transflector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from([self.group0()[2], self.group0()[3]]) * Simd32x2::from([-other.group1()[2], other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<Translator> for DipoleOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0() * Simd32x4::from(other.group0()[3]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: AntiScalar) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: DualNum) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
                g2: self.group2() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Flector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: FlectorAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Horizon> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Horizon) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: LineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: self.group2() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([-other.group6()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0])
                    - self.group2() * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group9()[2]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[1]),
                g5: self.group2() * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Plane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: PlaneAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Rotor> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: self.group2() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - self.group2() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - self.group2() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: SphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - self.group2() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Transflector> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Transflector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Translator> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: self.group2() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for DualNum {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for DualNum {
    type Output = AntiDipoleOnOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for DualNum {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for DualNum {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for DualNum {
    type Output = AntiPlane;

    fn anti_wedge(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiPlaneAtOrigin> for DualNum {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for DualNum {
    type Output = DualNum;

    fn anti_wedge(self, other: AntiScalar) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for DualNum {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Circle> for DualNum {
    type Output = Circle;

    fn anti_wedge(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
                g2: Simd32x4::from(self.group0()[1]) * other.group2(),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for DualNum {
    type Output = CircleAligningOrigin;

    fn anti_wedge(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
                g2: Simd32x3::from(self.group0()[1]) * other.group2(),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for DualNum {
    type Output = CircleAtInfinity;

    fn anti_wedge(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x4::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for DualNum {
    type Output = CircleAtOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for DualNum {
    type Output = CircleOnOrigin;

    fn anti_wedge(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for DualNum {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x4::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<Dipole> for DualNum {
    type Output = Dipole;

    fn anti_wedge(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
                g2: Simd32x4::from(self.group0()[1]) * other.group2(),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for DualNum {
    type Output = DipoleAligningOrigin;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x4::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for DualNum {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x4::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for DualNum {
    type Output = DipoleAtOrigin;

    fn anti_wedge(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for DualNum {
    type Output = DipoleOnOrigin;

    fn anti_wedge(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for DualNum {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
                g2: Simd32x3::from(self.group0()[1]) * other.group2(),
            },
        }
    }
}

impl AntiWedge<DualNum> for DualNum {
    type Output = DualNum;

    fn anti_wedge(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[1], 0.0]) + Simd32x2::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for DualNum {
    type Output = FlatPoint;

    fn anti_wedge(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for DualNum {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for DualNum {
    type Output = FlatPointAtOrigin;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for DualNum {
    type Output = Flector;

    fn anti_wedge(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
                g1: Simd32x4::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for DualNum {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Horizon> for DualNum {
    type Output = Horizon;

    fn anti_wedge(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Infinity> for DualNum {
    type Output = Infinity;

    fn anti_wedge(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Line> for DualNum {
    type Output = Line;

    fn anti_wedge(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for DualNum {
    type Output = LineAtInfinity;

    fn anti_wedge(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for DualNum {
    type Output = LineAtOrigin;

    fn anti_wedge(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for DualNum {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for DualNum {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[1], 0.0]) + Simd32x2::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
                g2: Simd32x2::from(self.group0()[1]) * other.group2(),
                g3: Simd32x4::from(self.group0()[1]) * other.group3(),
                g4: Simd32x3::from(self.group0()[1]) * other.group4(),
                g5: Simd32x3::from(self.group0()[1]) * other.group5(),
                g6: Simd32x3::from(self.group0()[1]) * other.group6(),
                g7: Simd32x3::from(self.group0()[1]) * other.group7(),
                g8: Simd32x4::from(self.group0()[1]) * other.group8(),
                g9: Simd32x3::from(self.group0()[1]) * other.group9(),
                g10: Simd32x2::from(self.group0()[1]) * other.group10(),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for DualNum {
    type Output = NullCircleAtOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for DualNum {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for DualNum {
    type Output = NullSphereAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Origin> for DualNum {
    type Output = Origin;

    fn anti_wedge(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for DualNum {
    type Output = Plane;

    fn anti_wedge(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for DualNum {
    type Output = PlaneAtOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Rotor> for DualNum {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for DualNum {
    type Output = RoundPoint;

    fn anti_wedge(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for DualNum {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Scalar> for DualNum {
    type Output = Scalar;

    fn anti_wedge(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Sphere> for DualNum {
    type Output = Sphere;

    fn anti_wedge(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for DualNum {
    type Output = SphereAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for DualNum {
    type Output = SphereOnOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Transflector> for DualNum {
    type Output = Transflector;

    fn anti_wedge(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x4::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<Translator> for DualNum {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for FlatPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for FlatPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for FlatPoint {
    type Output = FlatPoint;

    fn anti_wedge(self, other: AntiScalar) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for FlatPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for FlatPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for FlatPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for FlatPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for FlatPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for FlatPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DualNum> for FlatPoint {
    type Output = FlatPoint;

    fn anti_wedge(self, other: DualNum) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for FlatPoint {
    type Output = Infinity;

    fn anti_wedge(self, other: Flector) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2] + self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for FlatPoint {
    type Output = Infinity;

    fn anti_wedge(self, other: FlectorAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Horizon> for FlatPoint {
    type Output = Infinity;

    fn anti_wedge(self, other: Horizon) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for FlatPoint {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Motor) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for FlatPoint {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group8()[3], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for FlatPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for FlatPoint {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for FlatPoint {
    type Output = Infinity;

    fn anti_wedge(self, other: Plane) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for FlatPoint {
    type Output = Infinity;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Rotor> for FlatPoint {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Rotor) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Sphere> for FlatPoint {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for FlatPoint {
    type Output = RoundPoint;

    fn anti_wedge(self, other: SphereAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for FlatPoint {
    type Output = RoundPoint;

    fn anti_wedge(self, other: SphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group0()[3], self.group0()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Transflector> for FlatPoint {
    type Output = Infinity;

    fn anti_wedge(self, other: Transflector) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2] + self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<Translator> for FlatPoint {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Translator) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for FlatPointAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: AntiScalar) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for FlatPointAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for FlatPointAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for FlatPointAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for FlatPointAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: DualNum) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for FlatPointAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: Flector) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: Motor) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group6()[2], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0() * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for FlatPointAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for FlatPointAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for FlatPointAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: Plane) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for FlatPointAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Rotor> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: Rotor) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Sphere> for FlatPointAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Sphere) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group1()[0], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group1()[0], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group1()[0], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for FlatPointAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for FlatPointAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: SphereOnOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Transflector> for FlatPointAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: Transflector) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<Translator> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: Translator) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for FlatPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for FlatPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Circle> for FlatPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group2()[3],
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for FlatPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for FlatPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DualNum> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn anti_wedge(self, other: DualNum) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<Flector> for FlatPointAtOrigin {
    type Output = Infinity;

    fn anti_wedge(self, other: Flector) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for FlatPointAtOrigin {
    type Output = Infinity;

    fn anti_wedge(self, other: FlectorAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Horizon> for FlatPointAtOrigin {
    type Output = Infinity;

    fn anti_wedge(self, other: Horizon) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn anti_wedge(self, other: Motor) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<MultiVector> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([-other.group8()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()) * other.group10() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for FlatPointAtOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for FlatPointAtOrigin {
    type Output = Infinity;

    fn anti_wedge(self, other: Plane) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Rotor> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn anti_wedge(self, other: Rotor) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Sphere> for FlatPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: Sphere) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for FlatPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for FlatPointAtOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: SphereOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Transflector> for FlatPointAtOrigin {
    type Output = Infinity;

    fn anti_wedge(self, other: Transflector) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<Translator> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn anti_wedge(self, other: Translator) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for Flector {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for Flector {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for Flector {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiPlaneAtOrigin> for Flector {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Flector {
    type Output = Flector;

    fn anti_wedge(self, other: AntiScalar) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for Flector {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2] + self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Circle> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group2()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group1()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[3]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group1()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Dipole> for Flector {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group2()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for Flector {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for Flector {
    type Output = AntiPlane;

    fn anti_wedge(self, other: DipoleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for Flector {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for Flector {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from([self.group1()[2], self.group1()[3]]) * Simd32x2::from([other.group0()[2], -other.group0()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for Flector {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl AntiWedge<DualNum> for Flector {
    type Output = Flector;

    fn anti_wedge(self, other: DualNum) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
                g1: self.group1() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for Flector {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPoint) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for Flector {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for Flector {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group1()[3]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Line> for Flector {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Line) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for Flector {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: LineAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for Flector {
    type Output = FlatPoint;

    fn anti_wedge(self, other: LineAtOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Motor> for Flector {
    type Output = Flector;

    fn anti_wedge(self, other: Motor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group8()[3], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group1()[3]) * other.group6(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group7(),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group10()[0]),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group10()[1], other.group10()[1], other.group10()[1], 0.0])
                    - Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[1]),
                g10: Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group0()[1]]),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for Flector {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Origin> for Flector {
    type Output = Scalar;

    fn anti_wedge(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Rotor> for Flector {
    type Output = Flector;

    fn anti_wedge(self, other: Rotor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for Flector {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2] + self.group1()[3] * other.group1()[0],
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for Flector {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[3] * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<Sphere> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    - Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], -other.group0()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group0()[3], self.group0()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group1()[3]) * other.group0(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Transflector> for Flector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group1()[3]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for Flector {
    type Output = Flector;

    fn anti_wedge(self, other: Translator) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for FlectorAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: AntiScalar) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for FlectorAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Circle> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(self.group0()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(self.group0()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for FlectorAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: CircleAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(self.group0()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Dipole> for FlectorAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Dipole) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for FlectorAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for FlectorAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for FlectorAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: DipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for FlectorAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: DipoleOnOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<DualNum> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: DualNum) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for FlectorAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPoint) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for FlectorAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Line> for FlectorAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: Line) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for FlectorAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: LineAtOrigin) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: Motor) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<MultiVector> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(0.0)
                    - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[0])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group6(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]) + Simd32x3::from(self.group0()[3]) * other.group7(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[1]]),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for FlectorAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Origin> for FlectorAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Rotor> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: Rotor) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for FlectorAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group1()[0],
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for FlectorAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<Sphere> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * other.group0(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Transflector> for FlectorAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: Translator) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for Horizon {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for Horizon {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Horizon {
    type Output = Horizon;

    fn anti_wedge(self, other: AntiScalar) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for Horizon {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Circle> for Horizon {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: Circle) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for Horizon {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: CircleAligningOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for Horizon {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: CircleAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for Horizon {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for Horizon {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: CircleOnOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for Horizon {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Dipole> for Horizon {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Dipole) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for Horizon {
    type Output = AntiPlane;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for Horizon {
    type Output = Infinity;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for Horizon {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: DipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for Horizon {
    type Output = AntiPlane;

    fn anti_wedge(self, other: DipoleOnOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for Horizon {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<DualNum> for Horizon {
    type Output = Horizon;

    fn anti_wedge(self, other: DualNum) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<FlatPoint> for Horizon {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPoint) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for Horizon {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for Horizon {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, -other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Line> for Horizon {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: Line) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for Horizon {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: LineAtOrigin) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for Horizon {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: Motor) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<MultiVector> for Horizon {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, -other.group3()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()) * other.group6(),
                g5: Simd32x3::from(self.group0()) * other.group7(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group0()[1]]),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for Horizon {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for Horizon {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for Horizon {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Origin> for Horizon {
    type Output = Scalar;

    fn anti_wedge(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for Horizon {
    type Output = LineAtInfinity;

    fn anti_wedge(self, other: Plane) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for Horizon {
    type Output = LineAtInfinity;

    fn anti_wedge(self, other: PlaneAtOrigin) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Rotor> for Horizon {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: Rotor) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for Horizon {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group1()[0],
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for Horizon {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<Sphere> for Horizon {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: Sphere) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Horizon {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: 0.0 - self.group0() * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for Horizon {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Transflector> for Horizon {
    type Output = LineAtInfinity;

    fn anti_wedge(self, other: Transflector) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Translator> for Horizon {
    type Output = Horizon;

    fn anti_wedge(self, other: Translator) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Infinity {
    type Output = Infinity;

    fn anti_wedge(self, other: AntiScalar) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<DualNum> for Infinity {
    type Output = Infinity;

    fn anti_wedge(self, other: DualNum) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<Motor> for Infinity {
    type Output = Infinity;

    fn anti_wedge(self, other: Motor) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<MultiVector> for Infinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([other.group10()[0], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group0()[1]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for Infinity {
    type Output = Scalar;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Rotor> for Infinity {
    type Output = Infinity;

    fn anti_wedge(self, other: Rotor) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Sphere> for Infinity {
    type Output = Scalar;

    fn anti_wedge(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group1()[0],
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Infinity {
    type Output = Scalar;

    fn anti_wedge(self, other: SphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for Infinity {
    type Output = Scalar;

    fn anti_wedge(self, other: SphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Translator> for Infinity {
    type Output = Infinity;

    fn anti_wedge(self, other: Translator) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for Line {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for Line {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for Line {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for Line {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Line {
    type Output = Line;

    fn anti_wedge(self, other: AntiScalar) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for Line {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for Line {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for Line {
    type Output = AntiPlane;

    fn anti_wedge(self, other: CircleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for Line {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for Line {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for Line {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Dipole> for Line {
    type Output = Scalar;

    fn anti_wedge(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for Line {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for Line {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for Line {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for Line {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for Line {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for Line {
    type Output = Line;

    fn anti_wedge(self, other: DualNum) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for Line {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Flector) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for Line {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: FlectorAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Horizon> for Line {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: Horizon) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for Line {
    type Output = Infinity;

    fn anti_wedge(self, other: Line) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for Line {
    type Output = Infinity;

    fn anti_wedge(self, other: LineAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for Line {
    type Output = Infinity;

    fn anti_wedge(self, other: LineAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for Line {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for Line {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group3()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]]),
                g4: self.group1() * Simd32x3::from(other.group10()[0]),
                g5: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[1]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for Line {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for Line {
    type Output = Scalar;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for Line {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for Line {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Plane) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for Line {
    type Output = FlatPoint;

    fn anti_wedge(self, other: PlaneAtOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for Line {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for Line {
    type Output = Dipole;

    fn anti_wedge(self, other: Sphere) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: self.group1() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Line {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
                g2: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for Line {
    type Output = Dipole;

    fn anti_wedge(self, other: SphereOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for Line {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Transflector) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Translator> for Line {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for LineAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for LineAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn anti_wedge(self, other: AntiScalar) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for LineAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: Circle) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for LineAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: CircleAligningOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for LineAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: CircleAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for LineAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for LineAtInfinity {
    type Output = AntiPlane;

    fn anti_wedge(self, other: CircleOnOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for LineAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Dipole> for LineAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for LineAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for LineAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for LineAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for LineAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn anti_wedge(self, other: DualNum) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for LineAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: Flector) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Line> for LineAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: Line) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for LineAtInfinity {
    type Output = Infinity;

    fn anti_wedge(self, other: LineAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for LineAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for LineAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group3()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group10()[0]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for LineAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for LineAtInfinity {
    type Output = Scalar;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for LineAtInfinity {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for LineAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: Plane) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for LineAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: PlaneAtOrigin) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for LineAtInfinity {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for LineAtInfinity {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: Sphere) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for LineAtInfinity {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for LineAtInfinity {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: SphereOnOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for LineAtInfinity {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: Transflector) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Translator> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn anti_wedge(self, other: Translator) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for LineAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for LineAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for LineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for LineAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for LineAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group2()[3]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for LineAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: CircleAligningOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for LineAtOrigin {
    type Output = AntiPlane;

    fn anti_wedge(self, other: CircleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for LineAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for LineAtOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: CircleOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for LineAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Dipole> for LineAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for LineAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for LineAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn anti_wedge(self, other: DualNum) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for LineAtOrigin {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Flector) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for LineAtOrigin {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: FlectorAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Horizon> for LineAtOrigin {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: Horizon) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for LineAtOrigin {
    type Output = Infinity;

    fn anti_wedge(self, other: Line) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for LineAtOrigin {
    type Output = Infinity;

    fn anti_wedge(self, other: LineAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for LineAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for LineAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group8()[3]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]]),
                g4: Simd32x3::from(0.0),
                g5: self.group0() * Simd32x3::from(other.group10()[1]),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[1]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for LineAtOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for LineAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for LineAtOrigin {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Plane) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for LineAtOrigin {
    type Output = FlatPointAtOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Rotor> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn anti_wedge(self, other: Rotor) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Sphere> for LineAtOrigin {
    type Output = DipoleAligningOrigin;

    fn anti_wedge(self, other: Sphere) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for LineAtOrigin {
    type Output = DipoleAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for LineAtOrigin {
    type Output = DipoleOnOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Transflector> for LineAtOrigin {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Transflector) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Translator> for LineAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for Motor {
    type Output = AntiPlane;

    fn anti_wedge(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiPlaneAtOrigin> for Motor {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Motor {
    type Output = Motor;

    fn anti_wedge(self, other: AntiScalar) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for Motor {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Circle> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[3]) * other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(self.group0()[3]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Dipole> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[3]) * other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DualNum> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for Motor {
    type Output = FlatPoint;

    fn anti_wedge(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for Motor {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for Motor {
    type Output = FlatPointAtOrigin;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for Motor {
    type Output = Flector;

    fn anti_wedge(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * other.group0()
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for Motor {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Horizon> for Motor {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: Horizon) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Infinity> for Motor {
    type Output = Infinity;

    fn anti_wedge(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Line> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Motor> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0])
                    + Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                        * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group0()
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group3()[2], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group1()
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group2()
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]])
                    + Simd32x4::from(self.group0()[3]) * other.group3(),
                g4: Simd32x3::from(self.group0()[3]) * other.group4() + self.group1() * Simd32x3::from(other.group10()[0]),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group0()[3]) * other.group5()
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: Simd32x3::from(self.group0()[3]) * other.group6(),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]) + Simd32x3::from(self.group0()[3]) * other.group7(),
                g8: Simd32x4::from(self.group0()[3]) * other.group8()
                    + Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                        * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(self.group0()[3]) * other.group9(),
                g10: Simd32x2::from(self.group0()[3]) * other.group10(),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl AntiWedge<Origin> for Motor {
    type Output = Origin;

    fn anti_wedge(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for Motor {
    type Output = Flector;

    fn anti_wedge(self, other: Plane) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for Motor {
    type Output = Flector;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for Motor {
    type Output = RoundPoint;

    fn anti_wedge(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for Motor {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Scalar> for Motor {
    type Output = Scalar;

    fn anti_wedge(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Sphere> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[0], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[0], -other.group0()[2]]),
                g4: self.group1() * Simd32x3::from(other.group1()[0]),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[3]) * other.group0(),
                g10: Simd32x2::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for Motor {
    type Output = Flector;

    fn anti_wedge(self, other: Transflector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<Translator> for Motor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0])
                    + Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                        * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group10()[1]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[1]) * other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group0()[3], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: self.group7() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group10()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group0(), 0.0]),
                g1: self.group7() * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group0()),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[1]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + Simd32x2::from(self.group10()[0]) * Simd32x2::from([other.group0()[3], 0.0]),
                g1: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiPlaneAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x2::from(other.group0()),
                g3: self.group3() * Simd32x4::from(other.group0()),
                g4: self.group4() * Simd32x3::from(other.group0()),
                g5: self.group5() * Simd32x3::from(other.group0()),
                g6: self.group6() * Simd32x3::from(other.group0()),
                g7: self.group7() * Simd32x3::from(other.group0()),
                g8: self.group8() * Simd32x4::from(other.group0()),
                g9: self.group9() * Simd32x3::from(other.group0()),
                g10: self.group10() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + Simd32x2::from(self.group10()[1]) * Simd32x2::from([other.group0()[3], 0.0]),
                g1: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Circle> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group2()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group2()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group2()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group2()[3], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + self.group7() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group8()[3]) * other.group1(),
                g2: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group7()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group7()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group7()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g4: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    + Simd32x3::from(self.group10()[1]) * other.group0(),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group10()[1]) * other.group1(),
                g6: Simd32x3::from(self.group0()[1]) * other.group0(),
                g7: Simd32x3::from(self.group0()[1]) * other.group1(),
                g8: Simd32x4::from(self.group0()[1]) * other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group2()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group2()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group2()[2], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group8()[3]) * other.group1(),
                g2: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group7()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group7()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group7()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g4: Simd32x3::from(self.group10()[0]) * other.group2() + Simd32x3::from(self.group10()[1]) * other.group0(),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group10()[1]) * other.group1(),
                g6: Simd32x3::from(self.group0()[1]) * other.group0(),
                g7: Simd32x3::from(self.group0()[1]) * other.group1(),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group1()[3], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group7() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group8()[3]) * other.group0(),
                g2: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[1]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[1]) * other.group0(),
                g8: Simd32x4::from(self.group0()[1]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group7()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group7()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group7()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(self.group10()[0]) * other.group1() + Simd32x3::from(self.group10()[1]) * other.group0(),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(self.group0()[1]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group8()[3]) * other.group1(),
                g2: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g4: Simd32x3::from(self.group10()[1]) * other.group0(),
                g5: Simd32x3::from(self.group10()[1]) * other.group1(),
                g6: Simd32x3::from(self.group0()[1]) * other.group0(),
                g7: Simd32x3::from(self.group0()[1]) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group1()[3], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group7() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group7()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group7()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group7()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group10()[1]) * other.group0(),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(self.group0()[1]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[1]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Dipole> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group2()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group2()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group2()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group2()[3], 0.0]),
                g1: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    - Simd32x3::from(self.group10()[1]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + self.group10() * Simd32x2::from(other.group2()[3]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(self.group0()[1]) * other.group1(),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group1()[3], 0.0]),
                g1: Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    - Simd32x3::from(self.group10()[1]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + self.group10() * Simd32x2::from(other.group1()[3]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group1()[3], 0.0]),
                g1: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + self.group10() * Simd32x2::from(other.group1()[3]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(self.group0()[1]) * other.group0(),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group10()[0]) * other.group1() - Simd32x3::from(self.group10()[1]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[1]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group10()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + self.group10() * Simd32x2::from(other.group0()[3]),
                g3: Simd32x4::from(self.group0()[1]) * other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group2()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group2()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group2()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[0]) * other.group2()
                    - Simd32x3::from(self.group10()[1]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[1]) * other.group1(),
                g5: Simd32x3::from(self.group0()[1]) * other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DualNum> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[1], 0.0]) + Simd32x2::from(self.group0()[1]) * other.group0(),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
                g2: self.group2() * Simd32x2::from(other.group0()[1]),
                g3: self.group3() * Simd32x4::from(other.group0()[1]),
                g4: self.group4() * Simd32x3::from(other.group0()[1]),
                g5: self.group5() * Simd32x3::from(other.group0()[1]),
                g6: self.group6() * Simd32x3::from(other.group0()[1]),
                g7: self.group7() * Simd32x3::from(other.group0()[1]),
                g8: self.group8() * Simd32x4::from(other.group0()[1]),
                g9: self.group9() * Simd32x3::from(other.group0()[1]),
                g10: self.group10() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + self.group10() * Simd32x2::from(other.group0()[3]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group10()[0]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[1]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: self.group10() * Simd32x2::from(other.group0()),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Flector> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group1()[3], 0.0])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from([self.group3()[2], self.group3()[3]]) * Simd32x2::from([-other.group1()[2], other.group1()[3]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + self.group10() * Simd32x2::from(other.group0()[3]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]])
                    + Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group6() * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])
                    + self.group7() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from([self.group10()[1], self.group10()[1], self.group10()[1], self.group10()[0]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group0()[3], 0.0])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: self.group6() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])
                    + self.group7() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl AntiWedge<Horizon> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: self.group6() * Simd32x3::from(other.group0()),
                g5: self.group7() * Simd32x3::from(other.group0()),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl AntiWedge<Infinity> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group10()[0]) * Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Line> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group8()[3]) * other.group0(),
                g2: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group10()[0]) * other.group1(),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[1]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[1]) * other.group0(),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group10()[0]) * other.group0(),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group8()[3]) * other.group0(),
                g2: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group10()[1]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[1]) * other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Motor> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: self.group1() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: self.group2() * Simd32x2::from(other.group0()[3])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: self.group3() * Simd32x4::from(other.group0()[3])
                    + Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: self.group4() * Simd32x3::from(other.group0()[3]) + Simd32x3::from(self.group10()[0]) * other.group1(),
                g5: self.group5() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group6() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])
                    + self.group7() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0])
                    + self.group8() * Simd32x4::from(other.group0()[3]),
                g9: self.group9() * Simd32x3::from(other.group0()[3]),
                g10: self.group10() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[1]) * other.group0()
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group9()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group9()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group9()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group10()[1], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group10()[0], 0.0])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group8()[3], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group3()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group3()[3], 0.0])
                    + Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group10()[0]) * Simd32x2::from([other.group2()[1], 0.0])
                    + Simd32x2::from(self.group10()[1]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[1]) * other.group1()
                    + self.group1() * Simd32x3::from(other.group0()[1])
                    + Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0])
                    - self.group5() * Simd32x3::from(other.group10()[0])
                    + Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + self.group7() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0])
                    + Simd32x3::from(self.group8()[3]) * other.group7()
                    + Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0])
                    + Simd32x3::from(self.group10()[0]) * other.group5()
                    - Simd32x3::from(self.group10()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()[1]) * other.group2()
                    + self.group2() * Simd32x2::from(other.group0()[1])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group9()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    - Simd32x2::from(self.group7()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group7()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group7()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group7()[2]])
                    + Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]])
                    + self.group10() * Simd32x2::from(other.group3()[3]),
                g3: Simd32x4::from(self.group0()[1]) * other.group3()
                    + self.group3() * Simd32x4::from(other.group0()[1])
                    + Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]])
                    + Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[1]) * other.group4()
                    + self.group4() * Simd32x3::from(other.group0()[1])
                    + self.group6() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group10()[0])
                    - Simd32x3::from(self.group8()[3]) * other.group9()
                    - self.group9() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]])
                    + Simd32x3::from(self.group10()[1]) * other.group6(),
                g5: Simd32x3::from(self.group0()[1]) * other.group5()
                    + self.group5() * Simd32x3::from(other.group0()[1])
                    + self.group7() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0])
                    + Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group10()[1]) * other.group7(),
                g6: Simd32x3::from(self.group0()[1]) * other.group6() + self.group6() * Simd32x3::from(other.group0()[1]) - self.group9() * Simd32x3::from(other.group10()[0])
                    + Simd32x3::from(self.group10()[0]) * other.group9(),
                g7: Simd32x3::from(self.group0()[1]) * other.group7()
                    + self.group7() * Simd32x3::from(other.group0()[1])
                    + Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: Simd32x4::from(self.group0()[1]) * other.group8()
                    + self.group8() * Simd32x4::from(other.group0()[1])
                    + Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                        * Simd32x4::from([other.group10()[1], other.group10()[1], other.group10()[1], 0.0])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group10()[1]])
                    - Simd32x4::from(self.group10()[1]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from(self.group0()[1]) * other.group9() + self.group9() * Simd32x3::from(other.group0()[1]),
                g10: Simd32x2::from(self.group0()[1]) * other.group10() + self.group10() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(self.group10()[1]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[1]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group10()[1]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0) - self.group5() * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group0(), 0.0]),
                g3: Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group7()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
                g4: Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group0()),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group0()),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group10()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl AntiWedge<Origin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group10()[1]) * Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Plane> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group0()[3], 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from([self.group3()[2], self.group3()[3]]) * Simd32x2::from([-other.group0()[2], other.group0()[3]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
                g4: self.group6() * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: self.group7() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from([self.group10()[1], self.group10()[1], self.group10()[1], self.group10()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from(self.group8()[3]) * other.group0(),
                g5: Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(self.group10()[0]) * other.group0(),
                g7: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from(self.group10()[1]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(self.group0()[1]) * other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Rotor> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: self.group1() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: self.group2() * Simd32x2::from(other.group0()[3])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: self.group3() * Simd32x4::from(other.group0()[3])
                    + Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: self.group4() * Simd32x3::from(other.group0()[3]),
                g5: self.group5() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group10()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group6() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])
                    + self.group7() * Simd32x3::from(other.group0()[3]),
                g8: self.group8() * Simd32x4::from(other.group0()[3]),
                g9: self.group9() * Simd32x3::from(other.group0()[3]),
                g10: self.group10() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + Simd32x2::from(self.group10()[0]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group10()[1]) * Simd32x2::from([other.group1()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x2::from(self.group0()[1]) * other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group10()[0]) * Simd32x2::from([other.group0()[1], 0.0]) + Simd32x2::from(self.group10()[1]) * Simd32x2::from([other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[1]) * other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Scalar> for MultiVector {
    type Output = Scalar;

    fn anti_wedge(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Sphere> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group1()[0], 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - self.group5() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([other.group1()[0], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, other.group1()[0], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[0], -other.group0()[2]]),
                g4: self.group6() * Simd32x3::from(other.group1()[1]) + Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group1()[0])
                    - Simd32x3::from(self.group8()[3]) * other.group0(),
                g5: self.group7() * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group1()[0]) + Simd32x3::from(self.group10()[0]) * other.group0(),
                g7: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    - Simd32x4::from(self.group10()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
                g9: Simd32x3::from(self.group0()[1]) * other.group0(),
                g10: Simd32x2::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group0()[1], 0.0]) + Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()[1]) - self.group5() * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(self.group3()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group7()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: self.group6() * Simd32x3::from(other.group0()[1]) + Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group0()[0]),
                g5: self.group7() * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group10()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group0()[3], 0.0]),
                g1: Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - self.group5() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group0()[3], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
                g4: Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group10()[1]) * other.group0(),
                g9: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group1()[3], 0.0])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[0]) * other.group0(),
                g2: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from([self.group3()[2], self.group3()[3]]) * Simd32x2::from([-other.group1()[2], other.group1()[3]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group6() * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(self.group0()[1]) * other.group0()
                    + self.group7() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from([self.group10()[1], self.group10()[1], self.group10()[1], self.group10()[0]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<Translator> for MultiVector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: self.group1() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: self.group2() * Simd32x2::from(other.group0()[3])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: self.group3() * Simd32x4::from(other.group0()[3]),
                g4: self.group4() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: self.group5() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g6: self.group6() * Simd32x3::from(other.group0()[3]),
                g7: self.group7() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0])
                    + self.group8() * Simd32x4::from(other.group0()[3]),
                g9: self.group9() * Simd32x3::from(other.group0()[3]),
                g10: self.group10() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for NullCircleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Circle) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for NullCircleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: CircleAligningOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for NullCircleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: CircleAtInfinity) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for NullCircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for NullCircleAtOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: CircleOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Dipole> for NullCircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for NullCircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for NullCircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for NullCircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn anti_wedge(self, other: DualNum) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for NullCircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for NullCircleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Flector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for NullCircleAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: Horizon) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for NullCircleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Line) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for NullCircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: LineAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for NullCircleAtOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: LineAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group10()[1]),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[1]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Plane> for NullCircleAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: Plane) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for NullCircleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Sphere> for NullCircleAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: Sphere) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for NullCircleAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for NullCircleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Circle> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<DualNum> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: DualNum) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for NullDipoleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Flector) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for NullDipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: FlectorAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Horizon> for NullDipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: Horizon) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group10()[1]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Plane> for NullDipoleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Plane) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for NullDipoleAtOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Rotor> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: Rotor) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Sphere> for NullDipoleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Sphere) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for NullDipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for NullDipoleAtOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: SphereOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Transflector> for NullDipoleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Transflector) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Translator> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for NullSphereAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Circle> for NullSphereAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: Circle) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for NullSphereAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: CircleAligningOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
                g1: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for NullSphereAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: CircleAtInfinity) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for NullSphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for NullSphereAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: CircleOnOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for NullSphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<Dipole> for NullSphereAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: Dipole) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for NullSphereAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for NullSphereAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: DipoleAtInfinity) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for NullSphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: DipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for NullSphereAtOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: DipoleOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for NullSphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl AntiWedge<DualNum> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn anti_wedge(self, other: DualNum) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<FlatPoint> for NullSphereAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: FlatPoint) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for NullSphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for NullSphereAtOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for NullSphereAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: Horizon) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Infinity> for NullSphereAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Infinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Line> for NullSphereAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: Line) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for NullSphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: LineAtInfinity) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for NullSphereAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: LineAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()) * other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([other.group2()[1], 0.0]),
                g1: Simd32x3::from(self.group0()) * other.group5(),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([other.group3()[3], 0.0]),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], 0.0]),
                g4: Simd32x3::from(self.group0()) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()) * other.group9(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group10()[1]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[1], 0.0]),
            },
        }
    }
}

impl AntiWedge<Plane> for NullSphereAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn anti_wedge(self, other: Plane) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for NullSphereAtOrigin {
    type Output = NullCircleAtOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Rotor> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for NullSphereAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group1()[1],
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for NullSphereAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<Sphere> for NullSphereAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn anti_wedge(self, other: Sphere) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for NullSphereAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for NullSphereAtOrigin {
    type Output = NullCircleAtOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Transflector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()) * other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Origin {
    type Output = Origin;

    fn anti_wedge(self, other: AntiScalar) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<DualNum> for Origin {
    type Output = Origin;

    fn anti_wedge(self, other: DualNum) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<Flector> for Origin {
    type Output = Scalar;

    fn anti_wedge(self, other: Flector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for Origin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlectorAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Horizon> for Origin {
    type Output = Scalar;

    fn anti_wedge(self, other: Horizon) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for Origin {
    type Output = Origin;

    fn anti_wedge(self, other: Motor) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<MultiVector> for Origin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([other.group10()[1], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[1], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Plane> for Origin {
    type Output = Scalar;

    fn anti_wedge(self, other: Plane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Rotor> for Origin {
    type Output = Origin;

    fn anti_wedge(self, other: Rotor) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Sphere> for Origin {
    type Output = Scalar;

    fn anti_wedge(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group1()[1],
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Origin {
    type Output = Scalar;

    fn anti_wedge(self, other: SphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<Transflector> for Origin {
    type Output = Scalar;

    fn anti_wedge(self, other: Transflector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<Translator> for Origin {
    type Output = Origin;

    fn anti_wedge(self, other: Translator) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for Plane {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for Plane {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for Plane {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for Plane {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for Plane {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiPlaneAtOrigin> for Plane {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Plane {
    type Output = Plane;

    fn anti_wedge(self, other: AntiScalar) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for Plane {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Circle> for Plane {
    type Output = Dipole;

    fn anti_wedge(self, other: Circle) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for Plane {
    type Output = Dipole;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for Plane {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: CircleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for Plane {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for Plane {
    type Output = Dipole;

    fn anti_wedge(self, other: CircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for Plane {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Dipole> for Plane {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group2()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for Plane {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for Plane {
    type Output = AntiPlane;

    fn anti_wedge(self, other: DipoleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for Plane {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for Plane {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from([self.group0()[2], self.group0()[3]]) * Simd32x2::from([other.group0()[2], -other.group0()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for Plane {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl AntiWedge<DualNum> for Plane {
    type Output = Plane;

    fn anti_wedge(self, other: DualNum) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for Plane {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPoint) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for Plane {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for Plane {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for Plane {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for Plane {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for Plane {
    type Output = LineAtInfinity;

    fn anti_wedge(self, other: Horizon) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for Plane {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Line) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for Plane {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: LineAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for Plane {
    type Output = FlatPoint;

    fn anti_wedge(self, other: LineAtOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Motor> for Plane {
    type Output = Flector;

    fn anti_wedge(self, other: Motor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for Plane {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group6(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group7(),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[0]),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group10()[1], other.group10()[1], other.group10()[1], 0.0])
                    - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[1]]),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for Plane {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for Plane {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for Plane {
    type Output = AntiDipoleOnOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Origin> for Plane {
    type Output = Scalar;

    fn anti_wedge(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for Plane {
    type Output = Line;

    fn anti_wedge(self, other: Plane) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for Plane {
    type Output = Line;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Rotor> for Plane {
    type Output = Flector;

    fn anti_wedge(self, other: Rotor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
                g1: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for Plane {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[0],
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for Plane {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<Sphere> for Plane {
    type Output = Circle;

    fn anti_wedge(self, other: Sphere) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Plane {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], -other.group0()[0]]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for Plane {
    type Output = Circle;

    fn anti_wedge(self, other: SphereOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Transflector> for Plane {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for Plane {
    type Output = Transflector;

    fn anti_wedge(self, other: Translator) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for PlaneAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for PlaneAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for PlaneAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for PlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for PlaneAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiPlaneAtOrigin> for PlaneAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for PlaneAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Circle> for PlaneAtOrigin {
    type Output = Dipole;

    fn anti_wedge(self, other: Circle) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group2()[3]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for PlaneAtOrigin {
    type Output = DipoleAligningOrigin;

    fn anti_wedge(self, other: CircleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for PlaneAtOrigin {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: CircleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for PlaneAtOrigin {
    type Output = DipoleAtOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for PlaneAtOrigin {
    type Output = DipoleOnOrigin;

    fn anti_wedge(self, other: CircleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for PlaneAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3]),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Dipole> for PlaneAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for PlaneAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for PlaneAtOrigin {
    type Output = AntiPlane;

    fn anti_wedge(self, other: DipoleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for PlaneAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: DipoleAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for PlaneAtOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: DipoleOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for PlaneAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl AntiWedge<DualNum> for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn anti_wedge(self, other: DualNum) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for PlaneAtOrigin {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPoint) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for PlaneAtOrigin {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Flector> for PlaneAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for PlaneAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for PlaneAtOrigin {
    type Output = LineAtInfinity;

    fn anti_wedge(self, other: Horizon) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for PlaneAtOrigin {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Line) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for PlaneAtOrigin {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: LineAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for PlaneAtOrigin {
    type Output = FlatPointAtOrigin;

    fn anti_wedge(self, other: LineAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Motor> for PlaneAtOrigin {
    type Output = Flector;

    fn anti_wedge(self, other: Motor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for PlaneAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]]),
                g4: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group8()[3]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0]),
                g6: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group10()[0]),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group10()[1], other.group10()[1], other.group10()[1], 0.0]),
                g9: self.group0() * Simd32x3::from(other.group0()[1]),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for PlaneAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for PlaneAtOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for PlaneAtOrigin {
    type Output = NullCircleAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for PlaneAtOrigin {
    type Output = Line;

    fn anti_wedge(self, other: Plane) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for PlaneAtOrigin {
    type Output = LineAtOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for PlaneAtOrigin {
    type Output = Flector;

    fn anti_wedge(self, other: Rotor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for PlaneAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Sphere> for PlaneAtOrigin {
    type Output = CircleAligningOrigin;

    fn anti_wedge(self, other: Sphere) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: self.group0() * Simd32x3::from(other.group1()[1]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for PlaneAtOrigin {
    type Output = CircleAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for PlaneAtOrigin {
    type Output = CircleOnOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for PlaneAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for PlaneAtOrigin {
    type Output = Transflector;

    fn anti_wedge(self, other: Translator) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for Rotor {
    type Output = AntiPlane;

    fn anti_wedge(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiPlaneAtOrigin> for Rotor {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Rotor {
    type Output = Rotor;

    fn anti_wedge(self, other: AntiScalar) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for Rotor {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Circle> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[3]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[3]) * other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(self.group0()[3]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Dipole> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for Rotor {
    type Output = DipoleAligningOrigin;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for Rotor {
    type Output = DipoleAtOrigin;

    fn anti_wedge(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for Rotor {
    type Output = DipoleOnOrigin;

    fn anti_wedge(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[3]) * other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DualNum> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for Rotor {
    type Output = FlatPoint;

    fn anti_wedge(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for Rotor {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for Rotor {
    type Output = FlatPointAtOrigin;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for Rotor {
    type Output = Flector;

    fn anti_wedge(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for Rotor {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Horizon> for Rotor {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: Horizon) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Infinity> for Rotor {
    type Output = Infinity;

    fn anti_wedge(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Line> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for Rotor {
    type Output = LineAtOrigin;

    fn anti_wedge(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group8()[3]) + Simd32x3::from(self.group0()[3]) * other.group1(),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group2(),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]])
                    + Simd32x4::from(self.group0()[3]) * other.group3(),
                g4: Simd32x3::from(self.group0()[3]) * other.group4(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[1]) + Simd32x3::from(self.group0()[3]) * other.group5(),
                g6: Simd32x3::from(self.group0()[3]) * other.group6(),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]) + Simd32x3::from(self.group0()[3]) * other.group7(),
                g8: Simd32x4::from(self.group0()[3]) * other.group8(),
                g9: Simd32x3::from(self.group0()[3]) * other.group9(),
                g10: Simd32x2::from(self.group0()[3]) * other.group10(),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for Rotor {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl AntiWedge<Origin> for Rotor {
    type Output = Origin;

    fn anti_wedge(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for Rotor {
    type Output = Flector;

    fn anti_wedge(self, other: Plane) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
                g1: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for Rotor {
    type Output = Flector;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
                g1: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for Rotor {
    type Output = Rotor;

    fn anti_wedge(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for Rotor {
    type Output = RoundPoint;

    fn anti_wedge(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for Rotor {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Scalar> for Rotor {
    type Output = Scalar;

    fn anti_wedge(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Sphere> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[0], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[0], -other.group0()[2]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[3]) * other.group0(),
                g10: Simd32x2::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for Rotor {
    type Output = Flector;

    fn anti_wedge(self, other: Transflector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<Translator> for Rotor {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for RoundPoint {
    type Output = RoundPoint;

    fn anti_wedge(self, other: AntiScalar) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<DualNum> for RoundPoint {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DualNum) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for RoundPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: Flector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2] + self.group1()[0] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for RoundPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: FlectorAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Horizon> for RoundPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: Horizon) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for RoundPoint {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Motor) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for RoundPoint {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group9()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group10()[1], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group10()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
                g2: self.group1() * Simd32x2::from(other.group0()[1]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for RoundPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for RoundPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: Plane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[0] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for RoundPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Rotor> for RoundPoint {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Rotor) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Sphere> for RoundPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0]
                    + self.group0()[1] * other.group0()[1]
                    + self.group0()[2] * other.group0()[2]
                    + self.group1()[0] * other.group1()[1]
                    + self.group1()[1] * other.group1()[0],
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for RoundPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: SphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[1] + self.group1()[1] * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for RoundPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: SphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[1] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Transflector> for RoundPoint {
    type Output = Scalar;

    fn anti_wedge(self, other: Transflector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2] + self.group1()[0] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<Translator> for RoundPoint {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Translator) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<DualNum> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: DualNum) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<Flector> for RoundPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Flector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for RoundPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: FlectorAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Horizon> for RoundPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Horizon) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: Motor) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group10()[1], 0.0]) + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group10()[0], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: self.group0() * Simd32x2::from(other.group0()[1]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for RoundPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for RoundPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Plane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Rotor> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: Rotor) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<Sphere> for RoundPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[1] + self.group0()[1] * other.group1()[0],
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for RoundPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: SphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[1] + self.group0()[1] * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for RoundPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: SphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[1] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Transflector> for RoundPointAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Transflector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[3],
            },
        }
    }
}

impl AntiWedge<Translator> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: Translator) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Scalar {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiScalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl AntiWedge<DualNum> for Scalar {
    type Output = Scalar;

    fn anti_wedge(self, other: DualNum) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<Motor> for Scalar {
    type Output = Scalar;

    fn anti_wedge(self, other: Motor) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<MultiVector> for Scalar {
    type Output = Scalar;

    fn anti_wedge(self, other: MultiVector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<Rotor> for Scalar {
    type Output = Scalar;

    fn anti_wedge(self, other: Rotor) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Translator> for Scalar {
    type Output = Scalar;

    fn anti_wedge(self, other: Translator) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for Sphere {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for Sphere {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for Sphere {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for Sphere {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for Sphere {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[0] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiPlaneAtOrigin> for Sphere {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Sphere {
    type Output = Sphere;

    fn anti_wedge(self, other: AntiScalar) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for Sphere {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[1] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Circle> for Sphere {
    type Output = Dipole;

    fn anti_wedge(self, other: Circle) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group1(),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for Sphere {
    type Output = Dipole;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group1(),
                g1: Simd32x3::from(self.group1()[0]) * other.group2() + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for Sphere {
    type Output = Dipole;

    fn anti_wedge(self, other: CircleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for Sphere {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group1()[0]) * other.group1() + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for Sphere {
    type Output = Dipole;

    fn anti_wedge(self, other: CircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group1(),
                g1: Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for Sphere {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Dipole> for Sphere {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + self.group1() * Simd32x2::from(other.group2()[3]),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for Sphere {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + self.group1() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for Sphere {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + self.group1() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for Sphere {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group1() - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for Sphere {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for Sphere {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group2()
                    - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl AntiWedge<DualNum> for Sphere {
    type Output = Sphere;

    fn anti_wedge(self, other: DualNum) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for Sphere {
    type Output = RoundPoint;

    fn anti_wedge(self, other: FlatPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for Sphere {
    type Output = AntiPlane;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for Sphere {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group1() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Flector> for Sphere {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + self.group1() * Simd32x2::from(other.group0()[3]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group1()[0]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for Sphere {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for Sphere {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: Horizon) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl AntiWedge<Infinity> for Sphere {
    type Output = Scalar;

    fn anti_wedge(self, other: Infinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Line> for Sphere {
    type Output = Dipole;

    fn anti_wedge(self, other: Line) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group1()[0]) * other.group1(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for Sphere {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: LineAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for Sphere {
    type Output = DipoleAligningOrigin;

    fn anti_wedge(self, other: LineAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<Motor> for Sphere {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group1()[0]) * other.group1(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group0()[3]),
                g10: self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for Sphere {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group2()[1], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group5()
                    - Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]])
                    + self.group1() * Simd32x2::from(other.group3()[3]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], 0.0]),
                g4: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]])
                    + Simd32x3::from(self.group1()[1]) * other.group6(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group1()[1]) * other.group7(),
                g6: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group10()[0]) + Simd32x3::from(self.group1()[0]) * other.group9(),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group10()[1], other.group10()[1], other.group10()[1], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group10()[1]])
                    - Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: self.group0() * Simd32x3::from(other.group0()[1]),
                g10: self.group1() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for Sphere {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group1()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for Sphere {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for Sphere {
    type Output = AntiDipoleOnOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([-other.group0(), -other.group0(), -other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
            },
        }
    }
}

impl AntiWedge<Origin> for Sphere {
    type Output = Scalar;

    fn anti_wedge(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for Sphere {
    type Output = Circle;

    fn anti_wedge(self, other: Plane) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group1()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for Sphere {
    type Output = CircleAligningOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Rotor> for Sphere {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group0()[3]),
                g10: self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for Sphere {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0]
                    + self.group0()[1] * other.group0()[1]
                    + self.group0()[2] * other.group0()[2]
                    + self.group1()[0] * other.group1()[1]
                    + self.group1()[1] * other.group1()[0],
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for Sphere {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[1] + self.group1()[1] * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<Sphere> for Sphere {
    type Output = Circle;

    fn anti_wedge(self, other: Sphere) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[0]) + Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    - Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Sphere {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for Sphere {
    type Output = Circle;

    fn anti_wedge(self, other: SphereOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x4::from(0.0) - Simd32x4::from(self.group1()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Transflector> for Sphere {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * other.group0(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group1()[0]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for Sphere {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group0()[3]),
                g10: self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for SphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for SphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for SphereAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn anti_wedge(self, other: AntiScalar) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for SphereAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[1] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Circle> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: Circle) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    + Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: CircleAligningOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
                g1: Simd32x3::from(self.group0()[0]) * other.group2() + Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: CircleAtInfinity) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for SphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1() + Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: CircleOnOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
                g1: Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for SphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Dipole> for SphereAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    - Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: self.group0() * Simd32x2::from(other.group2()[3]),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for SphereAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    - Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: self.group0() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for SphereAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: self.group0() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for SphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: DipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1() - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for SphereAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for SphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group2() - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<DualNum> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn anti_wedge(self, other: DualNum) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for SphereAtOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: FlatPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for SphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for SphereAtOrigin {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Flector> for SphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: self.group0() * Simd32x2::from(other.group0()[3]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for SphereAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: Horizon) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Infinity> for SphereAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Infinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Line> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: Line) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
                g2: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for SphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: LineAtInfinity) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for SphereAtOrigin {
    type Output = DipoleAtOrigin;

    fn anti_wedge(self, other: LineAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Motor> for SphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[0]) * other.group1(),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for SphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group2()[1], 0.0]) + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * other.group5()
                    - Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: self.group0() * Simd32x2::from(other.group3()[3]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]])
                    + Simd32x3::from(self.group0()[1]) * other.group6(),
                g5: Simd32x3::from(self.group0()[1]) * other.group7(),
                g6: Simd32x3::from(self.group0()[0]) * other.group9(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group10()[1]])
                    - Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from(0.0),
                g10: self.group0() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for SphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for SphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for SphereAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: 0.0 - self.group0()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Origin> for SphereAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for SphereAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: Plane) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for SphereAtOrigin {
    type Output = CircleAtOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Rotor> for SphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for SphereAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[1] + self.group0()[1] * other.group1()[0],
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for SphereAtOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[1] + self.group0()[1] * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<Sphere> for SphereAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: Sphere) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    - Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for SphereAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0()[0] * other.group0()[1] - self.group0()[1] * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for SphereAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Transflector> for SphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for SphereAtOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for SphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for SphereOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for SphereOnOrigin {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for SphereOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for SphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<AntiPlaneAtOrigin> for SphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn anti_wedge(self, other: AntiScalar) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for SphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<Circle> for SphereOnOrigin {
    type Output = Dipole;

    fn anti_wedge(self, other: Circle) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group1(),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for SphereOnOrigin {
    type Output = Dipole;

    fn anti_wedge(self, other: CircleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group1(),
                g1: Simd32x3::from(self.group0()[3]) * other.group2(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for SphereOnOrigin {
    type Output = Dipole;

    fn anti_wedge(self, other: CircleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for SphereOnOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: CircleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group1(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for SphereOnOrigin {
    type Output = DipoleOnOrigin;

    fn anti_wedge(self, other: CircleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for SphereOnOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Dipole> for SphereOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group2()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for SphereOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group1()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for SphereOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from([self.group0()[3], self.group0()[2]]) * Simd32x2::from([other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for SphereOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for SphereOnOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: DipoleOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for SphereOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group2(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl AntiWedge<DualNum> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn anti_wedge(self, other: DualNum) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for SphereOnOrigin {
    type Output = RoundPoint;

    fn anti_wedge(self, other: FlatPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from([self.group0()[3], self.group0()[2]]) * Simd32x2::from([other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for SphereOnOrigin {
    type Output = AntiPlane;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for SphereOnOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for SphereOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from([self.group0()[3], self.group0()[2]]) * Simd32x2::from([other.group0()[3], -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: self.group0() * Simd32x4::from(other.group1()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: self.group0() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for SphereOnOrigin {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: Horizon) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Infinity> for SphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: Infinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Line> for SphereOnOrigin {
    type Output = Dipole;

    fn anti_wedge(self, other: Line) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[3]) * other.group1(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for SphereOnOrigin {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: LineAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for SphereOnOrigin {
    type Output = DipoleOnOrigin;

    fn anti_wedge(self, other: LineAtOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Motor> for SphereOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for SphereOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group2()[1], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group5(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group3()[3], 0.0]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], 0.0]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0]),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[0])
                    + Simd32x3::from(self.group0()[3]) * other.group9(),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: self.group0() * Simd32x4::from(other.group10()[1]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[1], 0.0]),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for SphereOnOrigin {
    type Output = NullDipoleAtOrigin;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for SphereOnOrigin {
    type Output = Origin;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for SphereOnOrigin {
    type Output = NullCircleAtOrigin;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Plane> for SphereOnOrigin {
    type Output = Circle;

    fn anti_wedge(self, other: Plane) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for SphereOnOrigin {
    type Output = CircleOnOrigin;

    fn anti_wedge(self, other: PlaneAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for SphereOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for SphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[1],
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for SphereOnOrigin {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[1],
            },
        }
    }
}

impl AntiWedge<Sphere> for SphereOnOrigin {
    type Output = Circle;

    fn anti_wedge(self, other: Sphere) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: self.group0() * Simd32x4::from(other.group1()[1]),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for SphereOnOrigin {
    type Output = CircleOrthogonalOrigin;

    fn anti_wedge(self, other: SphereAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for SphereOnOrigin {
    type Output = CircleOnOrigin;

    fn anti_wedge(self, other: SphereOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for SphereOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: self.group0() * Simd32x4::from(other.group1()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for SphereOnOrigin {
    type Output = MultiVector;

    fn anti_wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for Transflector {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for Transflector {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for Transflector {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for Transflector {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiPlaneAtOrigin> for Transflector {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiPlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Transflector {
    type Output = Transflector;

    fn anti_wedge(self, other: AntiScalar) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for Transflector {
    type Output = Scalar;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2] + self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<Circle> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for Transflector {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: CircleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[3]),
                g1: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Dipole> for Transflector {
    type Output = RoundPoint;

    fn anti_wedge(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group2()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for Transflector {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for Transflector {
    type Output = AntiPlane;

    fn anti_wedge(self, other: DipoleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for Transflector {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for Transflector {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from([self.group1()[2], self.group1()[3]]) * Simd32x2::from([other.group0()[2], -other.group0()[3]]),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for Transflector {
    type Output = RoundPoint;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl AntiWedge<DualNum> for Transflector {
    type Output = Transflector;

    fn anti_wedge(self, other: DualNum) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for Transflector {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPoint) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for Transflector {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for Transflector {
    type Output = Infinity;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Horizon> for Transflector {
    type Output = LineAtInfinity;

    fn anti_wedge(self, other: Horizon) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<Line> for Transflector {
    type Output = FlatPoint;

    fn anti_wedge(self, other: Line) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for Transflector {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: LineAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for Transflector {
    type Output = FlatPoint;

    fn anti_wedge(self, other: LineAtOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<Motor> for Transflector {
    type Output = Flector;

    fn anti_wedge(self, other: Motor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<MultiVector> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group10()[0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group1()[3]) * other.group6(),
                g5: self.group0() * Simd32x3::from(other.group0()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group7(),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group10()[0]),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group10()[1], other.group10()[1], other.group10()[1], 0.0])
                    - Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[1]),
                g10: Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group0()[1]]),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for Transflector {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], other.group0()[2]]),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Origin> for Transflector {
    type Output = Scalar;

    fn anti_wedge(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Rotor> for Transflector {
    type Output = Flector;

    fn anti_wedge(self, other: Rotor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for Transflector {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2] + self.group1()[3] * other.group1()[0],
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for Transflector {
    type Output = Scalar;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[3] * other.group0()[0],
            },
        }
    }
}

impl AntiWedge<Sphere> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    - Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], -other.group0()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group1()[3]) * other.group0(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Transflector> for Transflector {
    type Output = MultiVector;

    fn anti_wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Translator> for Transflector {
    type Output = Transflector;

    fn anti_wedge(self, other: Translator) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl AntiWedge<AntiCircleOnOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiDipoleOnOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<AntiFlatPointAtOrigin> for Translator {
    type Output = AntiFlatPointAtOrigin;

    fn anti_wedge(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiLineAtOrigin> for Translator {
    type Output = AntiLineAtOrigin;

    fn anti_wedge(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiPlane> for Translator {
    type Output = AntiPlane;

    fn anti_wedge(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiPlaneAtOrigin> for Translator {
    type Output = AntiPlaneAtOrigin;

    fn anti_wedge(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<AntiScalar> for Translator {
    type Output = Translator;

    fn anti_wedge(self, other: AntiScalar) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl AntiWedge<AntiSphereOnOrigin> for Translator {
    type Output = AntiSphereOnOrigin;

    fn anti_wedge(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Circle> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[3]) * other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAligningOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAtInfinity> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(self.group0()[3]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleAtOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOnOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<CircleOrthogonalOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Dipole> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleAligningOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleAtInfinity> for Translator {
    type Output = DipoleAtInfinity;

    fn anti_wedge(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<DipoleAtOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleOnOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DipoleOrthogonalOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[3]) * other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<DualNum> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<FlatPoint> for Translator {
    type Output = FlatPoint;

    fn anti_wedge(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtInfinity> for Translator {
    type Output = FlatPointAtInfinity;

    fn anti_wedge(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<FlatPointAtOrigin> for Translator {
    type Output = FlatPointAtOrigin;

    fn anti_wedge(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Flector> for Translator {
    type Output = Flector;

    fn anti_wedge(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<FlectorAtInfinity> for Translator {
    type Output = FlectorAtInfinity;

    fn anti_wedge(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Horizon> for Translator {
    type Output = Horizon;

    fn anti_wedge(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Infinity> for Translator {
    type Output = Infinity;

    fn anti_wedge(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Line> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<LineAtInfinity> for Translator {
    type Output = LineAtInfinity;

    fn anti_wedge(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<LineAtOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<Motor> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<MultiVector> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group3()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group1(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group7()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group2(),
                g3: Simd32x4::from(self.group0()[3]) * other.group3(),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[0]) + Simd32x3::from(self.group0()[3]) * other.group4(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group5(),
                g6: Simd32x3::from(self.group0()[3]) * other.group6(),
                g7: Simd32x3::from(self.group0()[3]) * other.group7(),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group8(),
                g9: Simd32x3::from(self.group0()[3]) * other.group9(),
                g10: Simd32x2::from(self.group0()[3]) * other.group10(),
            },
        }
    }
}

impl AntiWedge<NullCircleAtOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullDipoleAtOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<NullSphereAtOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl AntiWedge<Origin> for Translator {
    type Output = Origin;

    fn anti_wedge(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Plane> for Translator {
    type Output = Transflector;

    fn anti_wedge(self, other: Plane) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<PlaneAtOrigin> for Translator {
    type Output = Transflector;

    fn anti_wedge(self, other: PlaneAtOrigin) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl AntiWedge<Rotor> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl AntiWedge<RoundPoint> for Translator {
    type Output = RoundPoint;

    fn anti_wedge(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<RoundPointAtOrigin> for Translator {
    type Output = RoundPointAtOrigin;

    fn anti_wedge(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<Scalar> for Translator {
    type Output = Scalar;

    fn anti_wedge(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl AntiWedge<Sphere> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[3]) * other.group0(),
                g10: Simd32x2::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<SphereAtOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl AntiWedge<SphereOnOrigin> for Translator {
    type Output = MultiVector;

    fn anti_wedge(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl AntiWedge<Transflector> for Translator {
    type Output = Transflector;

    fn anti_wedge(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl AntiWedge<Translator> for Translator {
    type Output = Translator;

    fn anti_wedge(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiCircleOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiLineAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for AntiCircleOnOrigin {
    type Output = Circle;

    fn join(self, other: AntiPlane) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<Circle> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<CircleAtInfinity> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<CircleOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group1()[0] - self.group1()[1] * other.group1()[1] - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<Dipole> for AntiCircleOnOrigin {
    type Output = Sphere;

    fn join(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for AntiCircleOnOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for AntiCircleOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: DipoleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl Join<DualNum> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn join(self, other: DualNum) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for AntiCircleOnOrigin {
    type Output = Plane;

    fn join(self, other: FlatPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for AntiCircleOnOrigin {
    type Output = Plane;

    fn join(self, other: FlatPointAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for AntiCircleOnOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Flector> for AntiCircleOnOrigin {
    type Output = Plane;

    fn join(self, other: Flector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for AntiCircleOnOrigin {
    type Output = Plane;

    fn join(self, other: FlectorAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<Infinity> for AntiCircleOnOrigin {
    type Output = Line;

    fn join(self, other: Infinity) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Line> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<LineAtInfinity> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<LineAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: LineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Motor> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<MultiVector> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[0]),
                g7: self.group0() * Simd32x3::from(other.group2()[1]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[1], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group2()[1], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group2()[1], -other.group1()[2]]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group3()[3]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group3()[0], other.group5()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group3()[1], other.group5()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group3()[2], other.group5()[2]]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Origin> for AntiCircleOnOrigin {
    type Output = NullCircleAtOrigin;

    fn join(self, other: Origin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Rotor> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Rotor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<RoundPoint> for AntiCircleOnOrigin {
    type Output = Circle;

    fn join(self, other: RoundPoint) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for AntiCircleOnOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: RoundPointAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
                g2: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Join<Scalar> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn join(self, other: Scalar) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for AntiCircleOnOrigin {
    type Output = Plane;

    fn join(self, other: Transflector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<Translator> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for AntiDipoleOnOrigin {
    type Output = Sphere;

    fn join(self, other: AntiPlane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from([self.group0()[2], self.group0()[3]]) * Simd32x2::from([-other.group0()[2], other.group0()[3]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<Dipole> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Join<DualNum> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn join(self, other: DualNum) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Join<Flector> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<FlectorAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Infinity> for AntiDipoleOnOrigin {
    type Output = Plane;

    fn join(self, other: Infinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<MultiVector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[1]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group2() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<Origin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: Origin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Join<RoundPoint> for AntiDipoleOnOrigin {
    type Output = Sphere;

    fn join(self, other: RoundPoint) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[1]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = Sphere;

    fn join(self, other: RoundPointAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g1: Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<Scalar> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn join(self, other: Scalar) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for AntiFlatPointAtOrigin {
    type Output = Horizon;

    fn join(self, other: AntiPlane) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for AntiFlatPointAtOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Join<Dipole> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group2()[3],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Join<DipoleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Join<DualNum> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn join(self, other: DualNum) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Join<FlatPoint> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Join<Flector> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Join<Infinity> for AntiFlatPointAtOrigin {
    type Output = Horizon;

    fn join(self, other: Infinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<MultiVector> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, -other.group3()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * other.group2() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<Origin> for AntiFlatPointAtOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: Origin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Join<RoundPoint> for AntiFlatPointAtOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: RoundPoint) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<Scalar> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn join(self, other: Scalar) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for AntiLineAtOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiCircleOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for AntiLineAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn join(self, other: AntiPlane) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for AntiLineAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for AntiLineAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<Circle> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<CircleAtInfinity> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOnOrigin> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<Dipole> for AntiLineAtOrigin {
    type Output = Sphere;

    fn join(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group2()[3]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for AntiLineAtOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for AntiLineAtOrigin {
    type Output = Plane;

    fn join(self, other: DipoleAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for AntiLineAtOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for AntiLineAtOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: DipoleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for AntiLineAtOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: DipoleOrthogonalOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl Join<DualNum> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn join(self, other: DualNum) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for AntiLineAtOrigin {
    type Output = Plane;

    fn join(self, other: FlatPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for AntiLineAtOrigin {
    type Output = Horizon;

    fn join(self, other: FlatPointAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for AntiLineAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Flector> for AntiLineAtOrigin {
    type Output = Plane;

    fn join(self, other: Flector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for AntiLineAtOrigin {
    type Output = Horizon;

    fn join(self, other: FlectorAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Infinity> for AntiLineAtOrigin {
    type Output = LineAtInfinity;

    fn join(self, other: Infinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Line> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<LineAtOrigin> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: LineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Motor> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<MultiVector> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group2()[0]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[1], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group2()[1], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group2()[1], -other.group1()[2]]),
                g9: self.group0() * Simd32x3::from(other.group3()[3]),
                g10: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group5()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group5()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group5()[2]]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for AntiLineAtOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Origin> for AntiLineAtOrigin {
    type Output = NullCircleAtOrigin;

    fn join(self, other: Origin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Rotor> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Rotor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<RoundPoint> for AntiLineAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn join(self, other: RoundPoint) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for AntiLineAtOrigin {
    type Output = CircleAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Join<Scalar> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn join(self, other: Scalar) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for AntiLineAtOrigin {
    type Output = Horizon;

    fn join(self, other: Transflector) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for AntiPlane {
    type Output = Circle;

    fn join(self, other: AntiCircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for AntiPlane {
    type Output = Sphere;

    fn join(self, other: AntiDipoleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from([self.group0()[2], self.group0()[3]]) * Simd32x2::from([other.group0()[2], -other.group0()[3]]),
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for AntiPlane {
    type Output = Horizon;

    fn join(self, other: AntiFlatPointAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for AntiPlane {
    type Output = CircleOrthogonalOrigin;

    fn join(self, other: AntiLineAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for AntiPlane {
    type Output = DipoleAtInfinity;

    fn join(self, other: AntiPlane) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for AntiPlane {
    type Output = DipoleAtInfinity;

    fn join(self, other: AntiPlaneAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for AntiPlane {
    type Output = Dipole;

    fn join(self, other: AntiSphereOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Join<Circle> for AntiPlane {
    type Output = Sphere;

    fn join(self, other: Circle) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group2()[3]]),
            },
        }
    }
}

impl Join<CircleAligningOrigin> for AntiPlane {
    type Output = Sphere;

    fn join(self, other: CircleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Join<CircleAtInfinity> for AntiPlane {
    type Output = Plane;

    fn join(self, other: CircleAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[3]]),
            },
        }
    }
}

impl Join<CircleAtOrigin> for AntiPlane {
    type Output = Sphere;

    fn join(self, other: CircleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Join<CircleOnOrigin> for AntiPlane {
    type Output = SphereOnOrigin;

    fn join(self, other: CircleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for AntiPlane {
    type Output = Sphere;

    fn join(self, other: CircleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group1()[3]]),
            },
        }
    }
}

impl Join<Dipole> for AntiPlane {
    type Output = Circle;

    fn join(self, other: Dipole) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for AntiPlane {
    type Output = CircleAligningOrigin;

    fn join(self, other: DipoleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for AntiPlane {
    type Output = CircleAtInfinity;

    fn join(self, other: DipoleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for AntiPlane {
    type Output = CircleAligningOrigin;

    fn join(self, other: DipoleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for AntiPlane {
    type Output = CircleOnOrigin;

    fn join(self, other: DipoleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for AntiPlane {
    type Output = Circle;

    fn join(self, other: DipoleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<DualNum> for AntiPlane {
    type Output = AntiPlane;

    fn join(self, other: DualNum) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for AntiPlane {
    type Output = Line;

    fn join(self, other: FlatPoint) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for AntiPlane {
    type Output = LineAtInfinity;

    fn join(self, other: FlatPointAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for AntiPlane {
    type Output = LineAtOrigin;

    fn join(self, other: FlatPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Flector> for AntiPlane {
    type Output = Motor;

    fn join(self, other: Flector) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group1()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for AntiPlane {
    type Output = LineAtInfinity;

    fn join(self, other: FlectorAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Infinity> for AntiPlane {
    type Output = FlatPointAtInfinity;

    fn join(self, other: Infinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Line> for AntiPlane {
    type Output = Plane;

    fn join(self, other: Line) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<LineAtInfinity> for AntiPlane {
    type Output = Horizon;

    fn join(self, other: LineAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<LineAtOrigin> for AntiPlane {
    type Output = PlaneAtOrigin;

    fn join(self, other: LineAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Motor> for AntiPlane {
    type Output = Plane;

    fn join(self, other: Motor) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<MultiVector> for AntiPlane {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group10()[0]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
                g3: Simd32x4::from(0.0) - self.group0() * Simd32x4::from(other.group2()[0]),
                g4: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[1]) - Simd32x3::from(self.group0()[3]) * other.group1(),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0]),
                g7: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group5()[2], other.group5()[1], -other.group4()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group5()[2], 0.0, -other.group5()[0], -other.group4()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group5()[1], other.group5()[0], 0.0, -other.group4()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group7()[2], -other.group7()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group7()[2], 0.0, other.group7()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group7()[1], -other.group7()[0], 0.0])
                    - Simd32x3::from(self.group0()[3]) * other.group6(),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], -other.group8()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group8()[3]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for AntiPlane {
    type Output = SphereOnOrigin;

    fn join(self, other: NullCircleAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], other.group0()[2]]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for AntiPlane {
    type Output = CircleOnOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Join<NullSphereAtOrigin> for AntiPlane {
    type Output = AntiScalar;

    fn join(self, other: NullSphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Join<Origin> for AntiPlane {
    type Output = DipoleOnOrigin;

    fn join(self, other: Origin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<Plane> for AntiPlane {
    type Output = AntiScalar;

    fn join(self, other: Plane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<PlaneAtOrigin> for AntiPlane {
    type Output = AntiScalar;

    fn join(self, other: PlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Rotor> for AntiPlane {
    type Output = PlaneAtOrigin;

    fn join(self, other: Rotor) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPoint> for AntiPlane {
    type Output = Dipole;

    fn join(self, other: RoundPoint) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for AntiPlane {
    type Output = DipoleAligningOrigin;

    fn join(self, other: RoundPointAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], -other.group0()[0]]),
            },
        }
    }
}

impl Join<Scalar> for AntiPlane {
    type Output = AntiPlane;

    fn join(self, other: Scalar) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<Sphere> for AntiPlane {
    type Output = AntiScalar;

    fn join(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[0],
            },
        }
    }
}

impl Join<SphereAtOrigin> for AntiPlane {
    type Output = AntiScalar;

    fn join(self, other: SphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0()[0],
            },
        }
    }
}

impl Join<SphereOnOrigin> for AntiPlane {
    type Output = AntiScalar;

    fn join(self, other: SphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<Transflector> for AntiPlane {
    type Output = Translator;

    fn join(self, other: Transflector) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, other.group1()[2]]),
            },
        }
    }
}

impl Join<Translator> for AntiPlane {
    type Output = Horizon;

    fn join(self, other: Translator) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for AntiPlaneAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn join(self, other: AntiCircleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for AntiPlaneAtOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiDipoleOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for AntiPlaneAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn join(self, other: AntiLineAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for AntiPlaneAtOrigin {
    type Output = DipoleAtInfinity;

    fn join(self, other: AntiPlane) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for AntiPlaneAtOrigin {
    type Output = AntiLineAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for AntiPlaneAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Circle> for AntiPlaneAtOrigin {
    type Output = Sphere;

    fn join(self, other: Circle) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Join<CircleAligningOrigin> for AntiPlaneAtOrigin {
    type Output = Sphere;

    fn join(self, other: CircleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Join<CircleAtInfinity> for AntiPlaneAtOrigin {
    type Output = Plane;

    fn join(self, other: CircleAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<CircleAtOrigin> for AntiPlaneAtOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: CircleAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Join<CircleOnOrigin> for AntiPlaneAtOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: CircleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for AntiPlaneAtOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: CircleOrthogonalOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Join<Dipole> for AntiPlaneAtOrigin {
    type Output = Circle;

    fn join(self, other: Dipole) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group2()[3]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for AntiPlaneAtOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: DipoleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3]),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for AntiPlaneAtOrigin {
    type Output = CircleAtInfinity;

    fn join(self, other: DipoleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for AntiPlaneAtOrigin {
    type Output = CircleAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for AntiPlaneAtOrigin {
    type Output = CircleOnOrigin;

    fn join(self, other: DipoleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for AntiPlaneAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn join(self, other: DipoleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DualNum> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn join(self, other: DualNum) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for AntiPlaneAtOrigin {
    type Output = Line;

    fn join(self, other: FlatPoint) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for AntiPlaneAtOrigin {
    type Output = LineAtInfinity;

    fn join(self, other: FlatPointAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for AntiPlaneAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: FlatPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Flector> for AntiPlaneAtOrigin {
    type Output = Motor;

    fn join(self, other: Flector) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group1()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for AntiPlaneAtOrigin {
    type Output = LineAtInfinity;

    fn join(self, other: FlectorAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Infinity> for AntiPlaneAtOrigin {
    type Output = FlatPointAtInfinity;

    fn join(self, other: Infinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Line> for AntiPlaneAtOrigin {
    type Output = Plane;

    fn join(self, other: Line) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<LineAtInfinity> for AntiPlaneAtOrigin {
    type Output = Horizon;

    fn join(self, other: LineAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<LineAtOrigin> for AntiPlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: LineAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Motor> for AntiPlaneAtOrigin {
    type Output = Plane;

    fn join(self, other: Motor) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<MultiVector> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]]),
                g1: self.group0() * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([-other.group2()[0], -other.group2()[0], -other.group2()[0], 0.0]),
                g4: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g5: self.group0() * Simd32x3::from(other.group2()[1]),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0]),
                g7: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group3()[3]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group5()[2], other.group5()[1], -other.group4()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group5()[2], 0.0, -other.group5()[0], -other.group4()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group5()[1], other.group5()[0], 0.0, -other.group4()[2]]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group7()[2], -other.group7()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group7()[2], 0.0, other.group7()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group7()[1], -other.group7()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], -other.group8()[2]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for AntiPlaneAtOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: NullCircleAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for AntiPlaneAtOrigin {
    type Output = NullCircleAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Origin> for AntiPlaneAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn join(self, other: Origin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Plane> for AntiPlaneAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Plane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<PlaneAtOrigin> for AntiPlaneAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: PlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Rotor> for AntiPlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Rotor) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPoint> for AntiPlaneAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn join(self, other: RoundPoint) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: self.group0() * Simd32x3::from(other.group1()[1]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for AntiPlaneAtOrigin {
    type Output = DipoleAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Join<Scalar> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn join(self, other: Scalar) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Sphere> for AntiPlaneAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<SphereOnOrigin> for AntiPlaneAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: SphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Transflector> for AntiPlaneAtOrigin {
    type Output = Translator;

    fn join(self, other: Transflector) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, other.group1()[2]]),
            },
        }
    }
}

impl Join<Translator> for AntiPlaneAtOrigin {
    type Output = Horizon;

    fn join(self, other: Translator) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DualNum> for AntiScalar {
    type Output = AntiScalar;

    fn join(self, other: DualNum) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Join<MultiVector> for AntiScalar {
    type Output = AntiScalar;

    fn join(self, other: MultiVector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Join<Scalar> for AntiScalar {
    type Output = AntiScalar;

    fn join(self, other: Scalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn join(self, other: AntiCircleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for AntiSphereOnOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiDipoleOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for AntiSphereOnOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiFlatPointAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for AntiSphereOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn join(self, other: AntiLineAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for AntiSphereOnOrigin {
    type Output = Dipole;

    fn join(self, other: AntiPlane) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for AntiSphereOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Circle> for AntiSphereOnOrigin {
    type Output = Sphere;

    fn join(self, other: Circle) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group2()[3], 0.0]),
            },
        }
    }
}

impl Join<CircleAligningOrigin> for AntiSphereOnOrigin {
    type Output = Sphere;

    fn join(self, other: CircleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group2(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Join<CircleAtInfinity> for AntiSphereOnOrigin {
    type Output = Sphere;

    fn join(self, other: CircleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from([self.group0()[3], self.group0()[2]]) * Simd32x2::from([other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl Join<CircleAtOrigin> for AntiSphereOnOrigin {
    type Output = Sphere;

    fn join(self, other: CircleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Join<CircleOnOrigin> for AntiSphereOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: CircleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = Sphere;

    fn join(self, other: CircleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group1()[3], 0.0]),
            },
        }
    }
}

impl Join<Dipole> for AntiSphereOnOrigin {
    type Output = Circle;

    fn join(self, other: Dipole) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group1(),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for AntiSphereOnOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: DipoleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for AntiSphereOnOrigin {
    type Output = Circle;

    fn join(self, other: DipoleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for AntiSphereOnOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: DipoleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group1(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for AntiSphereOnOrigin {
    type Output = CircleOnOrigin;

    fn join(self, other: DipoleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = Circle;

    fn join(self, other: DipoleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group1(),
                g1: Simd32x3::from(self.group0()[3]) * other.group2(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DualNum> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn join(self, other: DualNum) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for AntiSphereOnOrigin {
    type Output = Line;

    fn join(self, other: FlatPoint) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for AntiSphereOnOrigin {
    type Output = Line;

    fn join(self, other: FlatPointAtInfinity) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for AntiSphereOnOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: FlatPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Flector> for AntiSphereOnOrigin {
    type Output = Motor;

    fn join(self, other: Flector) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for AntiSphereOnOrigin {
    type Output = Motor;

    fn join(self, other: FlectorAtInfinity) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Horizon> for AntiSphereOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Horizon) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Join<Infinity> for AntiSphereOnOrigin {
    type Output = FlatPoint;

    fn join(self, other: Infinity) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<Line> for AntiSphereOnOrigin {
    type Output = Plane;

    fn join(self, other: Line) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<LineAtInfinity> for AntiSphereOnOrigin {
    type Output = Plane;

    fn join(self, other: LineAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Join<LineAtOrigin> for AntiSphereOnOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: LineAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Motor> for AntiSphereOnOrigin {
    type Output = Plane;

    fn join(self, other: Motor) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<MultiVector> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group10()[1]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[0], 0.0]),
                g3: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([-other.group2()[0], -other.group2()[0], -other.group2()[0], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]),
                g4: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[1]),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group4(),
                g7: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group5(),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group5()[2], other.group5()[1], -other.group4()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group5()[2], 0.0, -other.group5()[0], -other.group4()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group5()[1], other.group5()[0], 0.0, -other.group4()[2]]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group7()[2], -other.group7()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group7()[2], 0.0, other.group7()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group7()[1], -other.group7()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], -other.group8()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group8()[3], 0.0]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for AntiSphereOnOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: NullCircleAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for AntiSphereOnOrigin {
    type Output = NullCircleAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Origin> for AntiSphereOnOrigin {
    type Output = NullDipoleAtOrigin;

    fn join(self, other: Origin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Plane> for AntiSphereOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Plane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<PlaneAtOrigin> for AntiSphereOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: PlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Rotor> for AntiSphereOnOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Rotor) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPoint> for AntiSphereOnOrigin {
    type Output = Dipole;

    fn join(self, other: RoundPoint) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: self.group0() * Simd32x4::from(other.group1()[1]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for AntiSphereOnOrigin {
    type Output = DipoleAligningOrigin;

    fn join(self, other: RoundPointAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Join<Scalar> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn join(self, other: Scalar) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<Sphere> for AntiSphereOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[1],
            },
        }
    }
}

impl Join<SphereAtOrigin> for AntiSphereOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: SphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0()[1],
            },
        }
    }
}

impl Join<SphereOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: SphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Transflector> for AntiSphereOnOrigin {
    type Output = Motor;

    fn join(self, other: Transflector) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Translator> for AntiSphereOnOrigin {
    type Output = Plane;

    fn join(self, other: Translator) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for Circle {
    type Output = AntiScalar;

    fn join(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for Circle {
    type Output = AntiScalar;

    fn join(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for Circle {
    type Output = Sphere;

    fn join(self, other: AntiPlane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Circle {
    type Output = Sphere;

    fn join(self, other: AntiPlaneAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Circle {
    type Output = Sphere;

    fn join(self, other: AntiSphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group2()[3], self.group2()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Join<Dipole> for Circle {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group2()[3],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for Circle {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for Circle {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for Circle {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOnOrigin> for Circle {
    type Output = AntiScalar;

    fn join(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for Circle {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DualNum> for Circle {
    type Output = Circle;

    fn join(self, other: DualNum) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
                g2: self.group2() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for Circle {
    type Output = AntiScalar;

    fn join(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for Circle {
    type Output = AntiScalar;

    fn join(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for Circle {
    type Output = AntiScalar;

    fn join(self, other: FlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[3] * other.group0(),
            },
        }
    }
}

impl Join<Flector> for Circle {
    type Output = AntiScalar;

    fn join(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<FlectorAtInfinity> for Circle {
    type Output = AntiScalar;

    fn join(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Infinity> for Circle {
    type Output = Plane;

    fn join(self, other: Infinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Join<MultiVector> for Circle {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group3()[2]])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[0]),
                g7: self.group1() * Simd32x3::from(other.group0()[0]),
                g8: self.group2() * Simd32x4::from(other.group0()[0]),
                g9: self.group0() * Simd32x3::from(other.group2()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group2()[3]) * other.group2() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for Circle {
    type Output = AntiScalar;

    fn join(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Origin> for Circle {
    type Output = SphereOnOrigin;

    fn join(self, other: Origin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group2() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for Circle {
    type Output = Sphere;

    fn join(self, other: RoundPoint) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Circle {
    type Output = Sphere;

    fn join(self, other: RoundPointAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group2()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<Scalar> for Circle {
    type Output = Circle;

    fn join(self, other: Scalar) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for Circle {
    type Output = AntiScalar;

    fn join(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for CircleAligningOrigin {
    type Output = Sphere;

    fn join(self, other: AntiPlane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for CircleAligningOrigin {
    type Output = Sphere;

    fn join(self, other: AntiPlaneAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for CircleAligningOrigin {
    type Output = Sphere;

    fn join(self, other: AntiSphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - self.group2() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<Dipole> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOnOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DualNum> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: DualNum) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
                g2: self.group2() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Flector> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlectorAtInfinity> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Infinity> for CircleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Infinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<MultiVector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group3()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[0]),
                g7: self.group1() * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g9: self.group0() * Simd32x3::from(other.group2()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - self.group2() * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Origin> for CircleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Origin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for CircleAligningOrigin {
    type Output = Sphere;

    fn join(self, other: RoundPoint) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - self.group2() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for CircleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - self.group2() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Scalar> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: Scalar) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for CircleAtInfinity {
    type Output = Plane;

    fn join(self, other: AntiPlane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for CircleAtInfinity {
    type Output = Plane;

    fn join(self, other: AntiPlaneAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for CircleAtInfinity {
    type Output = Sphere;

    fn join(self, other: AntiSphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group1()[3], self.group1()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Join<Dipole> for CircleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for CircleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DualNum> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn join(self, other: DualNum) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for CircleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: FlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Join<Flector> for CircleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<Infinity> for CircleAtInfinity {
    type Output = Horizon;

    fn join(self, other: Infinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Join<MultiVector> for CircleAtInfinity {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group3()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[0]),
                g8: self.group1() * Simd32x4::from(other.group0()[0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group2() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Origin> for CircleAtInfinity {
    type Output = SphereOnOrigin;

    fn join(self, other: Origin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for CircleAtInfinity {
    type Output = Sphere;

    fn join(self, other: RoundPoint) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for CircleAtInfinity {
    type Output = Sphere;

    fn join(self, other: RoundPointAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group1()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<Scalar> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn join(self, other: Scalar) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for CircleAtOrigin {
    type Output = Sphere;

    fn join(self, other: AntiPlane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for CircleAtOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for CircleAtOrigin {
    type Output = Sphere;

    fn join(self, other: AntiSphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<Dipole> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOnOrigin> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DualNum> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn join(self, other: DualNum) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Flector> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlectorAtInfinity> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Infinity> for CircleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Infinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<MultiVector> for CircleAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group3()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g9: self.group0() * Simd32x3::from(other.group2()[1]) - self.group1() * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Origin> for CircleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Origin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for CircleAtOrigin {
    type Output = Sphere;

    fn join(self, other: RoundPoint) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1]) - self.group1() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for CircleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Scalar> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn join(self, other: Scalar) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for CircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for CircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group1()[0] - self.group1()[1] * other.group1()[1] - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for CircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for CircleOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: AntiPlane) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for CircleOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for CircleOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<Dipole> for CircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for CircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for CircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for CircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for CircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DualNum> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn join(self, other: DualNum) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for CircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for CircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Flector> for CircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlectorAtInfinity> for CircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Infinity> for CircleOnOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Infinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<MultiVector> for CircleOnOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[0]),
                g7: self.group1() * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group2()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<RoundPoint> for CircleOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: RoundPoint) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for CircleOnOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Join<Scalar> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn join(self, other: Scalar) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for CircleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for CircleOrthogonalOrigin {
    type Output = Sphere;

    fn join(self, other: AntiPlane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for CircleOrthogonalOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for CircleOrthogonalOrigin {
    type Output = Sphere;

    fn join(self, other: AntiSphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group1()[3], self.group1()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Join<Dipole> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DualNum> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn join(self, other: DualNum) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Join<Flector> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<FlectorAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Infinity> for CircleOrthogonalOrigin {
    type Output = Plane;

    fn join(self, other: Infinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Join<MultiVector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group3()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from(other.group0()[0]),
                g9: self.group0() * Simd32x3::from(other.group2()[1]) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group2() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Origin> for CircleOrthogonalOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: Origin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for CircleOrthogonalOrigin {
    type Output = Sphere;

    fn join(self, other: RoundPoint) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1]) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = Sphere;

    fn join(self, other: RoundPointAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group1()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<Scalar> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn join(self, other: Scalar) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for Dipole {
    type Output = Sphere;

    fn join(self, other: AntiCircleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[3] * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for Dipole {
    type Output = Sphere;

    fn join(self, other: AntiLineAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group2()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for Dipole {
    type Output = Circle;

    fn join(self, other: AntiPlane) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Dipole {
    type Output = Circle;

    fn join(self, other: AntiPlaneAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group2()[3]) * other.group0(),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Dipole {
    type Output = Circle;

    fn join(self, other: AntiSphereOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<Circle> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group2()[3],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAtInfinity> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<CircleAtOrigin> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOnOrigin> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<Dipole> for Dipole {
    type Output = Sphere;

    fn join(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for Dipole {
    type Output = Sphere;

    fn join(self, other: DipoleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for Dipole {
    type Output = Sphere;

    fn join(self, other: DipoleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for Dipole {
    type Output = Sphere;

    fn join(self, other: DipoleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for Dipole {
    type Output = SphereOnOrigin;

    fn join(self, other: DipoleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for Dipole {
    type Output = Sphere;

    fn join(self, other: DipoleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DualNum> for Dipole {
    type Output = Dipole;

    fn join(self, other: DualNum) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
                g2: self.group2() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for Dipole {
    type Output = Plane;

    fn join(self, other: FlatPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for Dipole {
    type Output = Plane;

    fn join(self, other: FlatPointAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for Dipole {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Flector> for Dipole {
    type Output = Plane;

    fn join(self, other: Flector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for Dipole {
    type Output = Plane;

    fn join(self, other: FlectorAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<Infinity> for Dipole {
    type Output = Line;

    fn join(self, other: Infinity) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Line> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<LineAtInfinity> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<LineAtOrigin> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: LineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Motor> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<MultiVector> for Dipole {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([0.0, -other.group8()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g4: self.group1() * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[0]),
                g7: self.group0() * Simd32x3::from(other.group2()[1]) + Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group2()[0])
                    - Simd32x3::from(self.group2()[3]) * other.group1(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[1], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group2()[1], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group2()[1], -other.group1()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group4(),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group3()[0], other.group5()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group3()[1], other.group5()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group3()[2], other.group5()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for Dipole {
    type Output = SphereOnOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<Origin> for Dipole {
    type Output = CircleOnOrigin;

    fn join(self, other: Origin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
                g1: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Rotor> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: Rotor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<RoundPoint> for Dipole {
    type Output = Circle;

    fn join(self, other: RoundPoint) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group1()[0])
                    - Simd32x3::from(self.group2()[3]) * other.group0(),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Dipole {
    type Output = CircleAligningOrigin;

    fn join(self, other: RoundPointAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]) + Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Join<Scalar> for Dipole {
    type Output = Dipole;

    fn join(self, other: Scalar) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for Dipole {
    type Output = Plane;

    fn join(self, other: Transflector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<Translator> for Dipole {
    type Output = AntiScalar;

    fn join(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for DipoleAligningOrigin {
    type Output = Sphere;

    fn join(self, other: AntiCircleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for DipoleAligningOrigin {
    type Output = Sphere;

    fn join(self, other: AntiLineAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: AntiPlane) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Circle> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAtInfinity> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<CircleAtOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOnOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<Dipole> for DipoleAligningOrigin {
    type Output = Sphere;

    fn join(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for DipoleAligningOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DualNum> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn join(self, other: DualNum) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPoint) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPointAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Flector> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Flector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlectorAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Infinity> for DipoleAligningOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: Infinity) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Line> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<LineAtInfinity> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Motor> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<MultiVector> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group8()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g7: self.group0() * Simd32x3::from(other.group2()[1]) + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group2()[0])
                    - Simd32x3::from(self.group1()[3]) * other.group1(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group4(),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Origin> for DipoleAligningOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: Origin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: RoundPoint) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0])
                    - Simd32x3::from(self.group1()[3]) * other.group0(),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for DipoleAligningOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Scalar> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn join(self, other: Scalar) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Transflector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Translator> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn join(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for DipoleAtInfinity {
    type Output = Sphere;

    fn join(self, other: AntiCircleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for DipoleAtInfinity {
    type Output = Plane;

    fn join(self, other: AntiLineAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for DipoleAtInfinity {
    type Output = CircleAtInfinity;

    fn join(self, other: AntiPlane) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for DipoleAtInfinity {
    type Output = CircleAtInfinity;

    fn join(self, other: AntiPlaneAtOrigin) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for DipoleAtInfinity {
    type Output = Circle;

    fn join(self, other: AntiSphereOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<Circle> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAtInfinity> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<CircleAtOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOnOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<Dipole> for DipoleAtInfinity {
    type Output = Sphere;

    fn join(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for DipoleAtInfinity {
    type Output = Sphere;

    fn join(self, other: DipoleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for DipoleAtInfinity {
    type Output = Plane;

    fn join(self, other: DipoleAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for DipoleAtInfinity {
    type Output = Sphere;

    fn join(self, other: DipoleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for DipoleAtInfinity {
    type Output = SphereOnOrigin;

    fn join(self, other: DipoleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = Sphere;

    fn join(self, other: DipoleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DualNum> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn join(self, other: DualNum) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for DipoleAtInfinity {
    type Output = Plane;

    fn join(self, other: FlatPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for DipoleAtInfinity {
    type Output = Horizon;

    fn join(self, other: FlatPointAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for DipoleAtInfinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Flector> for DipoleAtInfinity {
    type Output = Plane;

    fn join(self, other: Flector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for DipoleAtInfinity {
    type Output = Horizon;

    fn join(self, other: FlectorAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Infinity> for DipoleAtInfinity {
    type Output = LineAtInfinity;

    fn join(self, other: Infinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Line> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<LineAtOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: LineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Motor> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<MultiVector> for DipoleAtInfinity {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group7()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group8()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g4: self.group0() * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g6: self.group0() * Simd32x3::from(other.group2()[0]),
                g7: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group2()[0]) - Simd32x3::from(self.group1()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[1], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group2()[1], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group2()[1], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: self.group0() * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group4(),
                g10: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group5()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group5()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group5()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for DipoleAtInfinity {
    type Output = SphereOnOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<Origin> for DipoleAtInfinity {
    type Output = CircleOnOrigin;

    fn join(self, other: Origin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Rotor> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: Rotor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<RoundPoint> for DipoleAtInfinity {
    type Output = Circle;

    fn join(self, other: RoundPoint) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for DipoleAtInfinity {
    type Output = CircleAligningOrigin;

    fn join(self, other: RoundPointAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Join<Scalar> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn join(self, other: Scalar) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for DipoleAtInfinity {
    type Output = Horizon;

    fn join(self, other: Transflector) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for DipoleAtOrigin {
    type Output = Sphere;

    fn join(self, other: AntiCircleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for DipoleAtOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: AntiLineAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for DipoleAtOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: AntiPlane) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for DipoleAtOrigin {
    type Output = CircleAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for DipoleAtOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group1() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Circle> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAtInfinity> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<CircleAtOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOnOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Dipole> for DipoleAtOrigin {
    type Output = Sphere;

    fn join(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for DipoleAtOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DualNum> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn join(self, other: DualNum) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPoint) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPointAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Flector> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Flector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlectorAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Infinity> for DipoleAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: Infinity) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Line> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<LineAtInfinity> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Motor> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<MultiVector> for DipoleAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group6()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g7: self.group0() * Simd32x3::from(other.group2()[1]) + self.group1() * Simd32x3::from(other.group2()[0]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Origin> for DipoleAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: Origin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for DipoleAtOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: RoundPoint) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + self.group1() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for DipoleAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) + self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Scalar> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn join(self, other: Scalar) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Transflector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Translator> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for DipoleOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: AntiCircleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for DipoleOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: AntiLineAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for DipoleOnOrigin {
    type Output = CircleOnOrigin;

    fn join(self, other: AntiPlane) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for DipoleOnOrigin {
    type Output = CircleOnOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for DipoleOnOrigin {
    type Output = CircleOnOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<Circle> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Join<CircleAtInfinity> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<CircleAtOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<Dipole> for DipoleOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: Dipole) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for DipoleOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: DipoleAtInfinity) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: DipoleOrthogonalOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<DualNum> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn join(self, other: DualNum) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPoint) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPointAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Flector> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Flector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlectorAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Infinity> for DipoleOnOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: Infinity) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Line> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<LineAtInfinity> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Motor> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<MultiVector> for DipoleOnOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group8()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0() * Simd32x4::from(other.group0()[0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[1]) - Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group4(),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0]),
            },
        }
    }
}

impl Join<RoundPoint> for DipoleOnOrigin {
    type Output = CircleOnOrigin;

    fn join(self, other: RoundPoint) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[1]) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for DipoleOnOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Join<Scalar> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn join(self, other: Scalar) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Transflector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Translator> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;

    fn join(self, other: AntiCircleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: AntiLineAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for DipoleOrthogonalOrigin {
    type Output = Circle;

    fn join(self, other: AntiPlane) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for DipoleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Circle;

    fn join(self, other: AntiSphereOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group0()[3]),
                g1: self.group2() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<Circle> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Dipole> for DipoleOrthogonalOrigin {
    type Output = Sphere;

    fn join(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: DipoleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;

    fn join(self, other: DipoleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DualNum> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn join(self, other: DualNum) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
                g2: self.group2() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for DipoleOrthogonalOrigin {
    type Output = Plane;

    fn join(self, other: FlatPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Plane;

    fn join(self, other: FlatPointAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for DipoleOrthogonalOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Flector> for DipoleOrthogonalOrigin {
    type Output = Plane;

    fn join(self, other: Flector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Plane;

    fn join(self, other: FlectorAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<Infinity> for DipoleOrthogonalOrigin {
    type Output = Line;

    fn join(self, other: Infinity) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Line> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<LineAtInfinity> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<LineAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: LineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Motor> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<MultiVector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group6()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[0]),
                g5: self.group2() * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[0]),
                g7: self.group0() * Simd32x3::from(other.group2()[1]) + self.group2() * Simd32x3::from(other.group2()[0]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[1], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group2()[1], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group2()[1], -other.group1()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group3()[0], other.group5()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group3()[1], other.group5()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group3()[2], other.group5()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<Origin> for DipoleOrthogonalOrigin {
    type Output = CircleOnOrigin;

    fn join(self, other: Origin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
                g1: self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Rotor> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: Rotor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<RoundPoint> for DipoleOrthogonalOrigin {
    type Output = Circle;

    fn join(self, other: RoundPoint) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + self.group2() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for DipoleOrthogonalOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: RoundPointAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]) + self.group2() * Simd32x3::from(other.group0()[0]),
                g2: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Join<Scalar> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn join(self, other: Scalar) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for DipoleOrthogonalOrigin {
    type Output = Plane;

    fn join(self, other: Transflector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<Translator> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn join(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for DualNum {
    type Output = AntiCircleOnOrigin;

    fn join(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for DualNum {
    type Output = AntiDipoleOnOrigin;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for DualNum {
    type Output = AntiFlatPointAtOrigin;

    fn join(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for DualNum {
    type Output = AntiLineAtOrigin;

    fn join(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<AntiPlane> for DualNum {
    type Output = AntiPlane;

    fn join(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for DualNum {
    type Output = AntiPlaneAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<AntiScalar> for DualNum {
    type Output = AntiScalar;

    fn join(self, other: AntiScalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for DualNum {
    type Output = AntiSphereOnOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<Circle> for DualNum {
    type Output = Circle;

    fn join(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
                g2: Simd32x4::from(self.group0()[0]) * other.group2(),
            },
        }
    }
}

impl Join<CircleAligningOrigin> for DualNum {
    type Output = CircleAligningOrigin;

    fn join(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
                g2: Simd32x3::from(self.group0()[0]) * other.group2(),
            },
        }
    }
}

impl Join<CircleAtInfinity> for DualNum {
    type Output = CircleAtInfinity;

    fn join(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<CircleAtOrigin> for DualNum {
    type Output = CircleAtOrigin;

    fn join(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<CircleOnOrigin> for DualNum {
    type Output = CircleOnOrigin;

    fn join(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for DualNum {
    type Output = CircleOrthogonalOrigin;

    fn join(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<Dipole> for DualNum {
    type Output = Dipole;

    fn join(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
                g2: Simd32x4::from(self.group0()[0]) * other.group2(),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for DualNum {
    type Output = DipoleAligningOrigin;

    fn join(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for DualNum {
    type Output = DipoleAtInfinity;

    fn join(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for DualNum {
    type Output = DipoleAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for DualNum {
    type Output = DipoleOnOrigin;

    fn join(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for DualNum {
    type Output = DipoleOrthogonalOrigin;

    fn join(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
                g2: Simd32x3::from(self.group0()[0]) * other.group2(),
            },
        }
    }
}

impl Join<DualNum> for DualNum {
    type Output = DualNum;

    fn join(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from(self.group0()[0]) * other.group0() + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[0]]),
            },
        }
    }
}

impl Join<FlatPoint> for DualNum {
    type Output = FlatPoint;

    fn join(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for DualNum {
    type Output = FlatPointAtInfinity;

    fn join(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for DualNum {
    type Output = FlatPointAtOrigin;

    fn join(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Join<Flector> for DualNum {
    type Output = Flector;

    fn join(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for DualNum {
    type Output = FlectorAtInfinity;

    fn join(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<Horizon> for DualNum {
    type Output = Horizon;

    fn join(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Join<Infinity> for DualNum {
    type Output = Infinity;

    fn join(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Join<Line> for DualNum {
    type Output = Line;

    fn join(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<LineAtInfinity> for DualNum {
    type Output = LineAtInfinity;

    fn join(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<LineAtOrigin> for DualNum {
    type Output = LineAtOrigin;

    fn join(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<Motor> for DualNum {
    type Output = Motor;

    fn join(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<MultiVector> for DualNum {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * other.group0() + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[0]]),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
                g2: Simd32x2::from(self.group0()[0]) * other.group2(),
                g3: Simd32x4::from(self.group0()[0]) * other.group3(),
                g4: Simd32x3::from(self.group0()[0]) * other.group4(),
                g5: Simd32x3::from(self.group0()[0]) * other.group5(),
                g6: Simd32x3::from(self.group0()[0]) * other.group6(),
                g7: Simd32x3::from(self.group0()[0]) * other.group7(),
                g8: Simd32x4::from(self.group0()[0]) * other.group8(),
                g9: Simd32x3::from(self.group0()[0]) * other.group9(),
                g10: Simd32x2::from(self.group0()[0]) * other.group10(),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for DualNum {
    type Output = NullCircleAtOrigin;

    fn join(self, other: NullCircleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for DualNum {
    type Output = NullDipoleAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<NullSphereAtOrigin> for DualNum {
    type Output = NullSphereAtOrigin;

    fn join(self, other: NullSphereAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Join<Origin> for DualNum {
    type Output = Origin;

    fn join(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Join<Plane> for DualNum {
    type Output = Plane;

    fn join(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<PlaneAtOrigin> for DualNum {
    type Output = PlaneAtOrigin;

    fn join(self, other: PlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<Rotor> for DualNum {
    type Output = Rotor;

    fn join(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<RoundPoint> for DualNum {
    type Output = RoundPoint;

    fn join(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for DualNum {
    type Output = RoundPointAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<Scalar> for DualNum {
    type Output = DualNum;

    fn join(self, other: Scalar) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Join<Sphere> for DualNum {
    type Output = Sphere;

    fn join(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<SphereAtOrigin> for DualNum {
    type Output = SphereAtOrigin;

    fn join(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<SphereOnOrigin> for DualNum {
    type Output = SphereOnOrigin;

    fn join(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<Transflector> for DualNum {
    type Output = Transflector;

    fn join(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<Translator> for DualNum {
    type Output = Translator;

    fn join(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for FlatPoint {
    type Output = Plane;

    fn join(self, other: AntiCircleOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn join(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for FlatPoint {
    type Output = Plane;

    fn join(self, other: AntiLineAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for FlatPoint {
    type Output = Line;

    fn join(self, other: AntiPlane) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for FlatPoint {
    type Output = Line;

    fn join(self, other: AntiPlaneAtOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for FlatPoint {
    type Output = Line;

    fn join(self, other: AntiSphereOnOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Circle> for FlatPoint {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAtInfinity> for FlatPoint {
    type Output = AntiScalar;

    fn join(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<CircleAtOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOnOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn join(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<Dipole> for FlatPoint {
    type Output = Plane;

    fn join(self, other: Dipole) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for FlatPoint {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for FlatPoint {
    type Output = Plane;

    fn join(self, other: DipoleAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for FlatPoint {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for FlatPoint {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for FlatPoint {
    type Output = Plane;

    fn join(self, other: DipoleOrthogonalOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<DualNum> for FlatPoint {
    type Output = FlatPoint;

    fn join(self, other: DualNum) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for FlatPoint {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group8()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[0]) - Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group4(),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn join(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for FlatPoint {
    type Output = PlaneAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Origin> for FlatPoint {
    type Output = LineAtOrigin;

    fn join(self, other: Origin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for FlatPoint {
    type Output = Line;

    fn join(self, other: RoundPoint) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]) - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for FlatPoint {
    type Output = LineAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Scalar> for FlatPoint {
    type Output = FlatPoint;

    fn join(self, other: Scalar) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for FlatPointAtInfinity {
    type Output = Plane;

    fn join(self, other: AntiCircleOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for FlatPointAtInfinity {
    type Output = Horizon;

    fn join(self, other: AntiLineAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for FlatPointAtInfinity {
    type Output = LineAtInfinity;

    fn join(self, other: AntiPlane) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for FlatPointAtInfinity {
    type Output = LineAtInfinity;

    fn join(self, other: AntiPlaneAtOrigin) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for FlatPointAtInfinity {
    type Output = Line;

    fn join(self, other: AntiSphereOnOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Circle> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAtOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOnOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Dipole> for FlatPointAtInfinity {
    type Output = Plane;

    fn join(self, other: Dipole) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for FlatPointAtInfinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for FlatPointAtInfinity {
    type Output = Horizon;

    fn join(self, other: DipoleAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for FlatPointAtInfinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for FlatPointAtInfinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = Plane;

    fn join(self, other: DipoleOrthogonalOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DualNum> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn join(self, other: DualNum) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group6()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0() * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group2()[0]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for FlatPointAtInfinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Origin> for FlatPointAtInfinity {
    type Output = LineAtOrigin;

    fn join(self, other: Origin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for FlatPointAtInfinity {
    type Output = Line;

    fn join(self, other: RoundPoint) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for FlatPointAtInfinity {
    type Output = LineAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Scalar> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn join(self, other: Scalar) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for FlatPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: AntiCircleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for FlatPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for FlatPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for FlatPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: AntiLineAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiPlane> for FlatPointAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: AntiPlane) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for FlatPointAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for FlatPointAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<Circle> for FlatPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group2()[3],
            },
        }
    }
}

impl Join<CircleAtInfinity> for FlatPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for FlatPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Join<Dipole> for FlatPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Dipole) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for FlatPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for FlatPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleOrthogonalOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<DualNum> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn join(self, other: DualNum) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Join<MultiVector> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, -other.group8()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()) * other.group4(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Join<RoundPoint> for FlatPointAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: RoundPoint) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<Scalar> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn join(self, other: Scalar) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for Flector {
    type Output = Plane;

    fn join(self, other: AntiCircleOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for Flector {
    type Output = AntiScalar;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for Flector {
    type Output = AntiScalar;

    fn join(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for Flector {
    type Output = Plane;

    fn join(self, other: AntiLineAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for Flector {
    type Output = Motor;

    fn join(self, other: AntiPlane) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Flector {
    type Output = Motor;

    fn join(self, other: AntiPlaneAtOrigin) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Flector {
    type Output = Motor;

    fn join(self, other: AntiSphereOnOrigin) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Circle> for Flector {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for Flector {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAtInfinity> for Flector {
    type Output = AntiScalar;

    fn join(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<CircleAtOrigin> for Flector {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOnOrigin> for Flector {
    type Output = AntiScalar;

    fn join(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for Flector {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Join<Dipole> for Flector {
    type Output = Plane;

    fn join(self, other: Dipole) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for Flector {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for Flector {
    type Output = Plane;

    fn join(self, other: DipoleAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for Flector {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for Flector {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for Flector {
    type Output = Plane;

    fn join(self, other: DipoleOrthogonalOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<DualNum> for Flector {
    type Output = Flector;

    fn join(self, other: DualNum) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
                g1: self.group1() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for Flector {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group8()[3]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[0]) - Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group4()
                    + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for Flector {
    type Output = AntiScalar;

    fn join(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for Flector {
    type Output = PlaneAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Origin> for Flector {
    type Output = Rotor;

    fn join(self, other: Origin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Join<RoundPoint> for Flector {
    type Output = Motor;

    fn join(self, other: RoundPoint) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[0]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Flector {
    type Output = Rotor;

    fn join(self, other: RoundPointAtOrigin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
            },
        }
    }
}

impl Join<Scalar> for Flector {
    type Output = Flector;

    fn join(self, other: Scalar) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for FlectorAtInfinity {
    type Output = Plane;

    fn join(self, other: AntiCircleOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for FlectorAtInfinity {
    type Output = Horizon;

    fn join(self, other: AntiLineAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for FlectorAtInfinity {
    type Output = LineAtInfinity;

    fn join(self, other: AntiPlane) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for FlectorAtInfinity {
    type Output = LineAtInfinity;

    fn join(self, other: AntiPlaneAtOrigin) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for FlectorAtInfinity {
    type Output = Motor;

    fn join(self, other: AntiSphereOnOrigin) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Circle> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAtOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOnOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Dipole> for FlectorAtInfinity {
    type Output = Plane;

    fn join(self, other: Dipole) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for FlectorAtInfinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for FlectorAtInfinity {
    type Output = Horizon;

    fn join(self, other: DipoleAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for FlectorAtInfinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for FlectorAtInfinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = Plane;

    fn join(self, other: DipoleOrthogonalOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DualNum> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn join(self, other: DualNum) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for FlectorAtInfinity {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[0]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for FlectorAtInfinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Origin> for FlectorAtInfinity {
    type Output = Rotor;

    fn join(self, other: Origin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for FlectorAtInfinity {
    type Output = Motor;

    fn join(self, other: RoundPoint) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() * Simd32x4::from(other.group1()[0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for FlectorAtInfinity {
    type Output = Rotor;

    fn join(self, other: RoundPointAtOrigin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Scalar> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn join(self, other: Scalar) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Horizon {
    type Output = AntiScalar;

    fn join(self, other: AntiSphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Join<DualNum> for Horizon {
    type Output = Horizon;

    fn join(self, other: DualNum) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Join<MultiVector> for Horizon {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group0()[0]]),
            },
        }
    }
}

impl Join<Origin> for Horizon {
    type Output = AntiScalar;

    fn join(self, other: Origin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<RoundPoint> for Horizon {
    type Output = AntiScalar;

    fn join(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group1()[0],
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Horizon {
    type Output = AntiScalar;

    fn join(self, other: RoundPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Join<Scalar> for Horizon {
    type Output = Horizon;

    fn join(self, other: Scalar) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for Infinity {
    type Output = Line;

    fn join(self, other: AntiCircleOnOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for Infinity {
    type Output = Plane;

    fn join(self, other: AntiDipoleOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for Infinity {
    type Output = Horizon;

    fn join(self, other: AntiFlatPointAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for Infinity {
    type Output = LineAtInfinity;

    fn join(self, other: AntiLineAtOrigin) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiPlane> for Infinity {
    type Output = FlatPointAtInfinity;

    fn join(self, other: AntiPlane) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Infinity {
    type Output = FlatPointAtInfinity;

    fn join(self, other: AntiPlaneAtOrigin) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Infinity {
    type Output = FlatPoint;

    fn join(self, other: AntiSphereOnOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<Circle> for Infinity {
    type Output = Plane;

    fn join(self, other: Circle) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
            },
        }
    }
}

impl Join<CircleAligningOrigin> for Infinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: CircleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<CircleAtInfinity> for Infinity {
    type Output = Horizon;

    fn join(self, other: CircleAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Join<CircleAtOrigin> for Infinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: CircleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<CircleOnOrigin> for Infinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: CircleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for Infinity {
    type Output = Plane;

    fn join(self, other: CircleOrthogonalOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl Join<Dipole> for Infinity {
    type Output = Line;

    fn join(self, other: Dipole) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for Infinity {
    type Output = LineAtOrigin;

    fn join(self, other: DipoleAligningOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for Infinity {
    type Output = LineAtInfinity;

    fn join(self, other: DipoleAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for Infinity {
    type Output = LineAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for Infinity {
    type Output = LineAtOrigin;

    fn join(self, other: DipoleOnOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for Infinity {
    type Output = Line;

    fn join(self, other: DipoleOrthogonalOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<DualNum> for Infinity {
    type Output = Infinity;

    fn join(self, other: DualNum) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Join<MultiVector> for Infinity {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group10()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group0()[0]]),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, -other.group2()[0]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group6(),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, -other.group8()[3]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for Infinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: NullCircleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for Infinity {
    type Output = LineAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<NullSphereAtOrigin> for Infinity {
    type Output = AntiScalar;

    fn join(self, other: NullSphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<Origin> for Infinity {
    type Output = FlatPointAtOrigin;

    fn join(self, other: Origin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Join<RoundPoint> for Infinity {
    type Output = FlatPoint;

    fn join(self, other: RoundPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Infinity {
    type Output = FlatPointAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: 0.0 - self.group0() * other.group0()[0],
            },
        }
    }
}

impl Join<Scalar> for Infinity {
    type Output = Infinity;

    fn join(self, other: Scalar) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<Sphere> for Infinity {
    type Output = AntiScalar;

    fn join(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group1()[0],
            },
        }
    }
}

impl Join<SphereAtOrigin> for Infinity {
    type Output = AntiScalar;

    fn join(self, other: SphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Join<SphereOnOrigin> for Infinity {
    type Output = AntiScalar;

    fn join(self, other: SphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for Line {
    type Output = AntiScalar;

    fn join(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for Line {
    type Output = AntiScalar;

    fn join(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for Line {
    type Output = Plane;

    fn join(self, other: AntiPlane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Line {
    type Output = Plane;

    fn join(self, other: AntiPlaneAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Line {
    type Output = Plane;

    fn join(self, other: AntiSphereOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Join<Dipole> for Line {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for Line {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for Line {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for Line {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOnOrigin> for Line {
    type Output = AntiScalar;

    fn join(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for Line {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DualNum> for Line {
    type Output = Line;

    fn join(self, other: DualNum) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for Line {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group3()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - self.group1() * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for Line {
    type Output = AntiScalar;

    fn join(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Origin> for Line {
    type Output = PlaneAtOrigin;

    fn join(self, other: Origin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for Line {
    type Output = Plane;

    fn join(self, other: RoundPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([-other.group1()[0], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, -other.group1()[0], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, -other.group1()[0], other.group0()[2]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Line {
    type Output = PlaneAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Scalar> for Line {
    type Output = Line;

    fn join(self, other: Scalar) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for LineAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for LineAtInfinity {
    type Output = Horizon;

    fn join(self, other: AntiPlane) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for LineAtInfinity {
    type Output = Horizon;

    fn join(self, other: AntiPlaneAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for LineAtInfinity {
    type Output = Plane;

    fn join(self, other: AntiSphereOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Join<Dipole> for LineAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for LineAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for LineAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOnOrigin> for LineAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for LineAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DualNum> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn join(self, other: DualNum) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for LineAtInfinity {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group3()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g9: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for LineAtInfinity {
    type Output = AntiScalar;

    fn join(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Origin> for LineAtInfinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: Origin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for LineAtInfinity {
    type Output = Plane;

    fn join(self, other: RoundPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group1()[0], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group1()[0], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group1()[0], other.group0()[2]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for LineAtInfinity {
    type Output = PlaneAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Scalar> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn join(self, other: Scalar) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for LineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for LineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for LineAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: AntiPlane) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for LineAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for LineAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Dipole> for LineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for LineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for LineAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DualNum> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: DualNum) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for LineAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Join<RoundPoint> for LineAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: RoundPoint) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Scalar> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: Scalar) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for Motor {
    type Output = AntiScalar;

    fn join(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for Motor {
    type Output = AntiScalar;

    fn join(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for Motor {
    type Output = Plane;

    fn join(self, other: AntiPlane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Motor {
    type Output = Plane;

    fn join(self, other: AntiPlaneAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Motor {
    type Output = Plane;

    fn join(self, other: AntiSphereOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Join<Dipole> for Motor {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for Motor {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for Motor {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for Motor {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOnOrigin> for Motor {
    type Output = AntiScalar;

    fn join(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for Motor {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DualNum> for Motor {
    type Output = Motor;

    fn join(self, other: DualNum) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for Motor {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group3()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - self.group1() * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for Motor {
    type Output = AntiScalar;

    fn join(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Origin> for Motor {
    type Output = PlaneAtOrigin;

    fn join(self, other: Origin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for Motor {
    type Output = Plane;

    fn join(self, other: RoundPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([-other.group1()[0], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, -other.group1()[0], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, -other.group1()[0], other.group0()[2]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Motor {
    type Output = PlaneAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Scalar> for Motor {
    type Output = Motor;

    fn join(self, other: Scalar) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[0]) * other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group1(),
                g7: Simd32x3::from(self.group2()[1]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(self.group3()[3]) * other.group1()
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, -other.group0()[3]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0) - Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + self.group2() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, -other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: self.group2() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[0]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group2()[0]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(self.group3()[3]) * other.group0(),
                g10: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group10()[0]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(self.group2()[0]) * other.group0(),
                g4: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g5: self.group1() * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g7: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group4()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group4()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group4()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group5()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group5()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group5()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
                g9: self.group6() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group7()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group7()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g5: Simd32x3::from(0.0) - Simd32x3::from(self.group2()[1]) * other.group0(),
                g6: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g7: Simd32x3::from(0.0) - Simd32x3::from(self.group3()[3]) * other.group0(),
                g8: Simd32x4::from(self.group4()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group4()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group4()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group5()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group5()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group5()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group7()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group7()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiScalar> for MultiVector {
    type Output = AntiScalar;

    fn join(self, other: AntiScalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group10()[1]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([-other.group0()[3], -other.group0()[3], -other.group0()[3], 0.0])
                    + Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[0], self.group2()[1]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
                g4: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g5: Simd32x3::from(0.0) - Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0) - Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])
                    + self.group5() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(self.group4()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group4()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group4()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group5()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group5()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group5()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group7()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group7()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group0()[3]),
                g10: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group8()[3], self.group8()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Join<Circle> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group2()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group2()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group2()[2]])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, -other.group2()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * other.group0(),
                g7: Simd32x3::from(self.group0()[0]) * other.group1(),
                g8: Simd32x4::from(self.group0()[0]) * other.group2(),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    - Simd32x3::from(self.group2()[1]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + self.group2() * Simd32x2::from(other.group2()[3]),
            },
        }
    }
}

impl Join<CircleAligningOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group2()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group2()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group2()[2]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * other.group0(),
                g7: Simd32x3::from(self.group0()[0]) * other.group1(),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group2()
                    - Simd32x3::from(self.group2()[1]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Join<CircleAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, -other.group1()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * other.group0(),
                g8: Simd32x4::from(self.group0()[0]) * other.group1(),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + self.group2() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Join<CircleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(self.group2()[0]) * other.group1() - Simd32x3::from(self.group2()[1]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Join<CircleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * other.group0(),
                g7: Simd32x3::from(self.group0()[0]) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - Simd32x3::from(self.group2()[1]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, -other.group1()[3]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * other.group1(),
                g9: Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    - Simd32x3::from(self.group2()[1]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + self.group2() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Join<Dipole> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group2()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group2()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group2()[2]])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group2()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(self.group0()[0]) * other.group1(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group1(),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    + Simd32x3::from(self.group2()[1]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group3()[3]) * other.group1()
                    + self.group4() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group4()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group4()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group4()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group1()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group2()[1]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group4()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group4()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group4()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group1()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(self.group0()[0]) * other.group0(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(self.group2()[0]) * other.group0(),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group3()[3]) * other.group0()
                    + self.group4() * Simd32x3::from(other.group1()[3]),
                g10: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * other.group1(),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g7: Simd32x3::from(self.group2()[0]) * other.group1() + Simd32x3::from(self.group2()[1]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group4()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group4()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group4()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: self.group4() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group2()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group2()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group2()[2]])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[0]) * other.group1(),
                g5: Simd32x3::from(self.group0()[0]) * other.group2(),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group1(),
                g7: Simd32x3::from(self.group2()[0]) * other.group2() + Simd32x3::from(self.group2()[1]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group3()[3]) * other.group1()
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group4()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group4()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group4()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DualNum> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * other.group0() + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[0]]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
                g2: self.group2() * Simd32x2::from(other.group0()[0]),
                g3: self.group3() * Simd32x4::from(other.group0()[0]),
                g4: self.group4() * Simd32x3::from(other.group0()[0]),
                g5: self.group5() * Simd32x3::from(other.group0()[0]),
                g6: self.group6() * Simd32x3::from(other.group0()[0]),
                g7: self.group7() * Simd32x3::from(other.group0()[0]),
                g8: self.group8() * Simd32x4::from(other.group0()[0]),
                g9: self.group9() * Simd32x3::from(other.group0()[0]),
                g10: self.group10() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group0()[3]),
                g10: Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group2()[0]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()),
                g8: Simd32x4::from(0.0),
                g9: self.group4() * Simd32x3::from(other.group0()),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Join<Flector> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[3]])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group0()[3]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<Horizon> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Join<Infinity> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group10()[0]) * Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() * Simd32x3::from(other.group0()),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()),
                g8: Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group4()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
                g9: self.group6() * Simd32x3::from(other.group0()),
                g10: Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Join<Line> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * other.group0(),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group1(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<LineAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(self.group2()[0]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<LineAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Join<Motor> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group1(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<MultiVector> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * other.group0()
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group10()[1]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group10()[0]])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, -other.group8()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group7()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group3()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group3()[3]])
                    + Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group10()[0]) * Simd32x2::from([0.0, other.group2()[1]])
                    + Simd32x2::from(self.group10()[1]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(self.group0()[0]) * other.group1() + self.group1() * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(self.group0()[0]) * other.group2() + self.group2() * Simd32x2::from(other.group0()[0]),
                g3: Simd32x4::from(self.group0()[0]) * other.group3()
                    + Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                        * Simd32x4::from([-other.group2()[0], -other.group2()[0], -other.group2()[0], 0.0])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group2()[0]])
                    + self.group3() * Simd32x4::from(other.group0()[0]),
                g4: Simd32x3::from(self.group0()[0]) * other.group4()
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from(self.group0()[0]) * other.group5() + self.group1() * Simd32x3::from(other.group2()[1]) - Simd32x3::from(self.group2()[1]) * other.group1()
                    + self.group5() * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(self.group0()[0]) * other.group6()
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group4()
                    + Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group2()[0])
                    + self.group6() * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(self.group0()[0]) * other.group7() - self.group1() * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group2()[0]) * other.group5()
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])
                    + Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group2()[1])
                    - Simd32x3::from(self.group3()[3]) * other.group1()
                    + self.group5() * Simd32x3::from(other.group2()[0])
                    + self.group7() * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from(self.group0()[0]) * other.group8()
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group5()[2], other.group5()[1], -other.group4()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group5()[2], 0.0, -other.group5()[0], -other.group4()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group5()[1], other.group5()[0], 0.0, -other.group4()[2]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], 0.0])
                    + Simd32x4::from(self.group4()[0]) * Simd32x4::from([other.group2()[1], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group4()[1]) * Simd32x4::from([0.0, other.group2()[1], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group4()[2]) * Simd32x4::from([0.0, 0.0, other.group2()[1], -other.group1()[2]])
                    + Simd32x4::from(self.group5()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group5()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group5()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + self.group8() * Simd32x4::from(other.group0()[0]),
                g9: Simd32x3::from(self.group0()[0]) * other.group9()
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group7()[2], -other.group7()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group7()[2], 0.0, other.group7()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group7()[1], -other.group7()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]])
                    - Simd32x3::from(self.group2()[1]) * other.group6()
                    + Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + Simd32x3::from(self.group3()[3]) * other.group4()
                    + self.group4() * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + self.group6() * Simd32x3::from(other.group2()[1])
                    + Simd32x3::from(self.group7()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group7()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group2()[0])
                    + self.group9() * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(self.group0()[0]) * other.group10()
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group6()[0], -other.group8()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group6()[1], -other.group8()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group6()[2], -other.group8()[2]])
                    + self.group2() * Simd32x2::from(other.group8()[3])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    - Simd32x2::from(self.group4()[0]) * Simd32x2::from([other.group3()[0], other.group5()[0]])
                    - Simd32x2::from(self.group4()[1]) * Simd32x2::from([other.group3()[1], other.group5()[1]])
                    - Simd32x2::from(self.group4()[2]) * Simd32x2::from([other.group3()[2], other.group5()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group8()[3]) * other.group2() * Simd32x2::from([-1.0, 1.0])
                    + self.group10() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from(self.group2()[1]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g7: Simd32x3::from(self.group2()[1]) * other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<NullSphereAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Join<Origin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group10()[1]) * Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([-other.group0(), -other.group0(), -other.group0(), 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group4() * Simd32x3::from(other.group0()),
                g7: self.group5() * Simd32x3::from(other.group0()),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group0()),
                g10: Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group0(), 0.0]),
            },
        }
    }
}

impl Join<Plane> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Join<PlaneAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Join<Rotor> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Join<RoundPoint> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group10()[0]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group10()[1]) * Simd32x2::from([0.0, other.group1()[0]]),
                g1: Simd32x3::from(self.group0()[0]) * other.group0(),
                g2: Simd32x2::from(self.group0()[0]) * other.group1(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([-other.group1()[0], -other.group1()[0], -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]]),
                g4: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g5: self.group1() * Simd32x3::from(other.group1()[1]) - Simd32x3::from(self.group2()[1]) * other.group0(),
                g6: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group1()[0]),
                g7: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group1()[1]) - Simd32x3::from(self.group3()[3]) * other.group0()
                    + self.group5() * Simd32x3::from(other.group1()[0]),
                g8: Simd32x4::from(self.group4()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group4()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group4()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group5()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group5()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group5()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
                g9: self.group6() * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group7()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group7()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group1()[0]),
                g10: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group10()[0]) * Simd32x2::from([0.0, other.group0()[1]]) + Simd32x2::from(self.group10()[1]) * Simd32x2::from([0.0, other.group0()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * other.group0(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([-other.group0()[0], -other.group0()[0], -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() * Simd32x3::from(other.group0()[1]),
                g6: self.group4() * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()[1]) + self.group5() * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group4()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: self.group6() * Simd32x3::from(other.group0()[1]) - Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(self.group8()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Join<Scalar> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x2::from(other.group0()),
                g3: self.group3() * Simd32x4::from(other.group0()),
                g4: self.group4() * Simd32x3::from(other.group0()),
                g5: self.group5() * Simd32x3::from(other.group0()),
                g6: self.group6() * Simd32x3::from(other.group0()),
                g7: self.group7() * Simd32x3::from(other.group0()),
                g8: self.group8() * Simd32x4::from(other.group0()),
                g9: self.group9() * Simd32x3::from(other.group0()),
                g10: self.group10() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Join<Sphere> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * other.group0(),
                g10: Simd32x2::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<SphereAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[1]]) + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<SphereOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Join<Transflector> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[3]])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group2()[0]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<Translator> for MultiVector {
    type Output = MultiVector;

    fn join(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: AntiPlane) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for NullCircleAtOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for NullCircleAtOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Dipole> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Join<DualNum> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn join(self, other: DualNum) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Flector> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<FlectorAtInfinity> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Infinity> for NullCircleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Infinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<MultiVector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group2()[1]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<RoundPoint> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: RoundPoint) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for NullCircleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Join<Scalar> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn join(self, other: Scalar) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for NullDipoleAtOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiCircleOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for NullDipoleAtOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiLineAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for NullDipoleAtOrigin {
    type Output = CircleOnOrigin;

    fn join(self, other: AntiPlane) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for NullDipoleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for NullDipoleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Circle> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Join<CircleAtInfinity> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<CircleAtOrigin> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<Dipole> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: Dipole) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: DipoleAtInfinity) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: DipoleOrthogonalOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DualNum> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn join(self, other: DualNum) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPoint) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlatPointAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Flector> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Flector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: FlectorAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Infinity> for NullDipoleAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: Infinity) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Line> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<LineAtInfinity> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Motor> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<MultiVector> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g7: self.group0() * Simd32x3::from(other.group2()[1]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0]),
            },
        }
    }
}

impl Join<RoundPoint> for NullDipoleAtOrigin {
    type Output = CircleOnOrigin;

    fn join(self, other: RoundPoint) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for NullDipoleAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Join<Scalar> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn join(self, other: Scalar) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Transflector> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Transflector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Translator> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for NullSphereAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiPlane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Join<DualNum> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: DualNum) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Join<Infinity> for NullSphereAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Infinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<MultiVector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group2()[1]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPoint> for NullSphereAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group1()[1],
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for NullSphereAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: RoundPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Join<Scalar> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: Scalar) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for Origin {
    type Output = NullCircleAtOrigin;

    fn join(self, other: AntiCircleOnOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for Origin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiDipoleOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for Origin {
    type Output = NullSphereAtOrigin;

    fn join(self, other: AntiFlatPointAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for Origin {
    type Output = NullCircleAtOrigin;

    fn join(self, other: AntiLineAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiPlane> for Origin {
    type Output = DipoleOnOrigin;

    fn join(self, other: AntiPlane) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Origin {
    type Output = NullDipoleAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Origin {
    type Output = NullDipoleAtOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<Circle> for Origin {
    type Output = SphereOnOrigin;

    fn join(self, other: Circle) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Join<CircleAligningOrigin> for Origin {
    type Output = PlaneAtOrigin;

    fn join(self, other: CircleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Join<CircleAtInfinity> for Origin {
    type Output = SphereOnOrigin;

    fn join(self, other: CircleAtInfinity) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<CircleAtOrigin> for Origin {
    type Output = PlaneAtOrigin;

    fn join(self, other: CircleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for Origin {
    type Output = SphereOnOrigin;

    fn join(self, other: CircleOrthogonalOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<Dipole> for Origin {
    type Output = CircleOnOrigin;

    fn join(self, other: Dipole) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for Origin {
    type Output = LineAtOrigin;

    fn join(self, other: DipoleAligningOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for Origin {
    type Output = CircleOnOrigin;

    fn join(self, other: DipoleAtInfinity) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for Origin {
    type Output = LineAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for Origin {
    type Output = CircleOnOrigin;

    fn join(self, other: DipoleOrthogonalOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
                g1: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Join<DualNum> for Origin {
    type Output = Origin;

    fn join(self, other: DualNum) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Join<FlatPoint> for Origin {
    type Output = LineAtOrigin;

    fn join(self, other: FlatPoint) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for Origin {
    type Output = LineAtOrigin;

    fn join(self, other: FlatPointAtInfinity) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<Flector> for Origin {
    type Output = Rotor;

    fn join(self, other: Flector) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for Origin {
    type Output = Rotor;

    fn join(self, other: FlectorAtInfinity) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<Horizon> for Origin {
    type Output = AntiScalar;

    fn join(self, other: Horizon) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<Infinity> for Origin {
    type Output = FlatPointAtOrigin;

    fn join(self, other: Infinity) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<Line> for Origin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Line) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<LineAtInfinity> for Origin {
    type Output = PlaneAtOrigin;

    fn join(self, other: LineAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<Motor> for Origin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Motor) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<MultiVector> for Origin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group10()[1]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[0], 0.0]),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()) * other.group4(),
                g7: Simd32x3::from(self.group0()) * other.group5(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([other.group8()[3], 0.0]),
            },
        }
    }
}

impl Join<Plane> for Origin {
    type Output = AntiScalar;

    fn join(self, other: Plane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Join<RoundPoint> for Origin {
    type Output = DipoleOnOrigin;

    fn join(self, other: RoundPoint) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Origin {
    type Output = FlatPointAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Join<Scalar> for Origin {
    type Output = Origin;

    fn join(self, other: Scalar) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<Sphere> for Origin {
    type Output = AntiScalar;

    fn join(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group1()[1],
            },
        }
    }
}

impl Join<SphereAtOrigin> for Origin {
    type Output = AntiScalar;

    fn join(self, other: SphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Join<Transflector> for Origin {
    type Output = Rotor;

    fn join(self, other: Transflector) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl Join<Translator> for Origin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Translator) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlane> for Plane {
    type Output = AntiScalar;

    fn join(self, other: AntiPlane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Plane {
    type Output = AntiScalar;

    fn join(self, other: AntiPlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Plane {
    type Output = AntiScalar;

    fn join(self, other: AntiSphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<DualNum> for Plane {
    type Output = Plane;

    fn join(self, other: DualNum) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for Plane {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
            },
        }
    }
}

impl Join<Origin> for Plane {
    type Output = AntiScalar;

    fn join(self, other: Origin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Join<RoundPoint> for Plane {
    type Output = AntiScalar;

    fn join(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[0],
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Plane {
    type Output = AntiScalar;

    fn join(self, other: RoundPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0()[0],
            },
        }
    }
}

impl Join<Scalar> for Plane {
    type Output = Plane;

    fn join(self, other: Scalar) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<AntiPlane> for PlaneAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiPlane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for PlaneAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiPlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for PlaneAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiSphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DualNum> for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: DualNum) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for PlaneAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Join<RoundPoint> for PlaneAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Scalar> for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Scalar) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for Rotor {
    type Output = AntiScalar;

    fn join(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for Rotor {
    type Output = AntiScalar;

    fn join(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for Rotor {
    type Output = PlaneAtOrigin;

    fn join(self, other: AntiPlane) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Rotor {
    type Output = PlaneAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Rotor {
    type Output = PlaneAtOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Dipole> for Rotor {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DipoleAtInfinity> for Rotor {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for Rotor {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Join<DualNum> for Rotor {
    type Output = Rotor;

    fn join(self, other: DualNum) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for Rotor {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Join<RoundPoint> for Rotor {
    type Output = PlaneAtOrigin;

    fn join(self, other: RoundPoint) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Scalar> for Rotor {
    type Output = Rotor;

    fn join(self, other: Scalar) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for RoundPoint {
    type Output = Circle;

    fn join(self, other: AntiCircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group1(),
                g1: Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for RoundPoint {
    type Output = Sphere;

    fn join(self, other: AntiDipoleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for RoundPoint {
    type Output = SphereAtOrigin;

    fn join(self, other: AntiFlatPointAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group1() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for RoundPoint {
    type Output = CircleOrthogonalOrigin;

    fn join(self, other: AntiLineAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<AntiPlane> for RoundPoint {
    type Output = Dipole;

    fn join(self, other: AntiPlane) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group1()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for RoundPoint {
    type Output = DipoleOrthogonalOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[1]) * other.group0(),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for RoundPoint {
    type Output = Dipole;

    fn join(self, other: AntiSphereOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x4::from(0.0) - Simd32x4::from(self.group1()[1]) * other.group0(),
            },
        }
    }
}

impl Join<Circle> for RoundPoint {
    type Output = Sphere;

    fn join(self, other: Circle) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + self.group1() * Simd32x2::from(other.group2()[3]),
            },
        }
    }
}

impl Join<CircleAligningOrigin> for RoundPoint {
    type Output = Sphere;

    fn join(self, other: CircleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group2()
                    - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Join<CircleAtInfinity> for RoundPoint {
    type Output = Sphere;

    fn join(self, other: CircleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + self.group1() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Join<CircleAtOrigin> for RoundPoint {
    type Output = Sphere;

    fn join(self, other: CircleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group1() - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Join<CircleOnOrigin> for RoundPoint {
    type Output = SphereOnOrigin;

    fn join(self, other: CircleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for RoundPoint {
    type Output = Sphere;

    fn join(self, other: CircleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + self.group1() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Join<Dipole> for RoundPoint {
    type Output = Circle;

    fn join(self, other: Dipole) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group1(),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for RoundPoint {
    type Output = CircleAligningOrigin;

    fn join(self, other: DipoleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for RoundPoint {
    type Output = Circle;

    fn join(self, other: DipoleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for RoundPoint {
    type Output = CircleAligningOrigin;

    fn join(self, other: DipoleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group1()[0]) * other.group1() + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for RoundPoint {
    type Output = CircleOnOrigin;

    fn join(self, other: DipoleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for RoundPoint {
    type Output = Circle;

    fn join(self, other: DipoleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group1(),
                g1: Simd32x3::from(self.group1()[0]) * other.group2() + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<DualNum> for RoundPoint {
    type Output = RoundPoint;

    fn join(self, other: DualNum) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for RoundPoint {
    type Output = Line;

    fn join(self, other: FlatPoint) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for RoundPoint {
    type Output = Line;

    fn join(self, other: FlatPointAtInfinity) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for RoundPoint {
    type Output = LineAtOrigin;

    fn join(self, other: FlatPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<Flector> for RoundPoint {
    type Output = Motor;

    fn join(self, other: Flector) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for RoundPoint {
    type Output = Motor;

    fn join(self, other: FlectorAtInfinity) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Horizon> for RoundPoint {
    type Output = AntiScalar;

    fn join(self, other: Horizon) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group1()[0] * other.group0(),
            },
        }
    }
}

impl Join<Infinity> for RoundPoint {
    type Output = FlatPoint;

    fn join(self, other: Infinity) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Join<Line> for RoundPoint {
    type Output = Plane;

    fn join(self, other: Line) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<LineAtInfinity> for RoundPoint {
    type Output = Plane;

    fn join(self, other: LineAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<LineAtOrigin> for RoundPoint {
    type Output = PlaneAtOrigin;

    fn join(self, other: LineAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Motor> for RoundPoint {
    type Output = Plane;

    fn join(self, other: Motor) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Join<MultiVector> for RoundPoint {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group10()[1]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group10()[0]]),
                g1: self.group0() * Simd32x3::from(other.group0()[0]),
                g2: self.group1() * Simd32x2::from(other.group0()[0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([-other.group2()[0], -other.group2()[0], -other.group2()[0], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group2()[0]]),
                g4: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g5: self.group0() * Simd32x3::from(other.group2()[1]) - Simd32x3::from(self.group1()[1]) * other.group1(),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group4(),
                g7: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group1()[0]) * other.group5()
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group5()[2], other.group5()[1], -other.group4()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group5()[2], 0.0, -other.group5()[0], -other.group4()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group5()[1], other.group5()[0], 0.0, -other.group4()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group7()[2], -other.group7()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group7()[2], 0.0, other.group7()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group7()[1], -other.group7()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]])
                    - Simd32x3::from(self.group1()[1]) * other.group6(),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], -other.group8()[2]])
                    + self.group1() * Simd32x2::from(other.group8()[3]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for RoundPoint {
    type Output = SphereOnOrigin;

    fn join(self, other: NullCircleAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for RoundPoint {
    type Output = CircleOnOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group1()[1]) * other.group0(),
            },
        }
    }
}

impl Join<NullSphereAtOrigin> for RoundPoint {
    type Output = AntiScalar;

    fn join(self, other: NullSphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group1()[1] * other.group0(),
            },
        }
    }
}

impl Join<Origin> for RoundPoint {
    type Output = DipoleOnOrigin;

    fn join(self, other: Origin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([-other.group0(), -other.group0(), -other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
            },
        }
    }
}

impl Join<Plane> for RoundPoint {
    type Output = AntiScalar;

    fn join(self, other: Plane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[0] * other.group0()[3],
            },
        }
    }
}

impl Join<PlaneAtOrigin> for RoundPoint {
    type Output = AntiScalar;

    fn join(self, other: PlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Rotor> for RoundPoint {
    type Output = PlaneAtOrigin;

    fn join(self, other: Rotor) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPoint> for RoundPoint {
    type Output = Dipole;

    fn join(self, other: RoundPoint) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[0]) + Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    - Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for RoundPoint {
    type Output = DipoleAligningOrigin;

    fn join(self, other: RoundPointAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]]),
            },
        }
    }
}

impl Join<Scalar> for RoundPoint {
    type Output = RoundPoint;

    fn join(self, other: Scalar) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Join<Sphere> for RoundPoint {
    type Output = AntiScalar;

    fn join(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0]
                    + self.group0()[1] * other.group0()[1]
                    + self.group0()[2] * other.group0()[2]
                    + self.group1()[0] * other.group1()[1]
                    + self.group1()[1] * other.group1()[0],
            },
        }
    }
}

impl Join<SphereAtOrigin> for RoundPoint {
    type Output = AntiScalar;

    fn join(self, other: SphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group1()[0] * other.group0()[1] + self.group1()[1] * other.group0()[0],
            },
        }
    }
}

impl Join<SphereOnOrigin> for RoundPoint {
    type Output = AntiScalar;

    fn join(self, other: SphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[1] * other.group0()[3],
            },
        }
    }
}

impl Join<Transflector> for RoundPoint {
    type Output = Motor;

    fn join(self, other: Transflector) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Translator> for RoundPoint {
    type Output = Plane;

    fn join(self, other: Translator) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: AntiCircleOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
                g1: Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for RoundPointAtOrigin {
    type Output = Sphere;

    fn join(self, other: AntiDipoleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for RoundPointAtOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: AntiFlatPointAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for RoundPointAtOrigin {
    type Output = CircleAtOrigin;

    fn join(self, other: AntiLineAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Join<AntiPlane> for RoundPointAtOrigin {
    type Output = DipoleAligningOrigin;

    fn join(self, other: AntiPlane) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for RoundPointAtOrigin {
    type Output = DipoleAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for RoundPointAtOrigin {
    type Output = DipoleAligningOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Join<Circle> for RoundPointAtOrigin {
    type Output = Sphere;

    fn join(self, other: Circle) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    - Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: self.group0() * Simd32x2::from(other.group2()[3]),
            },
        }
    }
}

impl Join<CircleAligningOrigin> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: CircleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group2() - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Join<CircleAtInfinity> for RoundPointAtOrigin {
    type Output = Sphere;

    fn join(self, other: CircleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: self.group0() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Join<CircleAtOrigin> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: CircleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1() - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Join<CircleOnOrigin> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: CircleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = Sphere;

    fn join(self, other: CircleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    - Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: self.group0() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Join<Dipole> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: Dipole) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    + Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for RoundPointAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: DipoleAligningOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: DipoleAtInfinity) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for RoundPointAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1() + Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for RoundPointAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: DipoleOnOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;

    fn join(self, other: DipoleOrthogonalOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
                g1: Simd32x3::from(self.group0()[0]) * other.group2() + Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Join<DualNum> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn join(self, other: DualNum) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Join<FlatPoint> for RoundPointAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: FlatPoint) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for RoundPointAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: FlatPointAtInfinity) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<Flector> for RoundPointAtOrigin {
    type Output = Rotor;

    fn join(self, other: Flector) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for RoundPointAtOrigin {
    type Output = Rotor;

    fn join(self, other: FlectorAtInfinity) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<Horizon> for RoundPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Horizon) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Join<Infinity> for RoundPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn join(self, other: Infinity) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Join<Line> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Line) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<LineAtInfinity> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: LineAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Join<Motor> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Motor) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Join<MultiVector> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group10()[1]]) + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group10()[0]]),
                g1: Simd32x3::from(0.0),
                g2: self.group0() * Simd32x2::from(other.group0()[0]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group2()[0]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group1(),
                g6: Simd32x3::from(self.group0()[0]) * other.group4(),
                g7: Simd32x3::from(self.group0()[0]) * other.group5()
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]])
                    - Simd32x3::from(self.group0()[1]) * other.group6(),
                g10: self.group0() * Simd32x2::from(other.group8()[3]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: NullCircleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for RoundPointAtOrigin {
    type Output = LineAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Join<NullSphereAtOrigin> for RoundPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: NullSphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Join<Origin> for RoundPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn join(self, other: Origin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: 0.0 - self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Join<Plane> for RoundPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Plane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[3],
            },
        }
    }
}

impl Join<RoundPoint> for RoundPointAtOrigin {
    type Output = DipoleAligningOrigin;

    fn join(self, other: RoundPoint) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    - Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for RoundPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[0] * other.group0()[1] - self.group0()[1] * other.group0()[0],
            },
        }
    }
}

impl Join<Scalar> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn join(self, other: Scalar) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Join<Sphere> for RoundPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group1()[1] + self.group0()[1] * other.group1()[0],
            },
        }
    }
}

impl Join<SphereAtOrigin> for RoundPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: SphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[1] + self.group0()[1] * other.group0()[0],
            },
        }
    }
}

impl Join<SphereOnOrigin> for RoundPointAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: SphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[1] * other.group0()[3],
            },
        }
    }
}

impl Join<Transflector> for RoundPointAtOrigin {
    type Output = Rotor;

    fn join(self, other: Transflector) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl Join<Translator> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn join(self, other: Translator) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for Scalar {
    type Output = AntiCircleOnOrigin;

    fn join(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for Scalar {
    type Output = AntiDipoleOnOrigin;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiFlatPointAtOrigin> for Scalar {
    type Output = AntiFlatPointAtOrigin;

    fn join(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for Scalar {
    type Output = AntiLineAtOrigin;

    fn join(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiPlane> for Scalar {
    type Output = AntiPlane;

    fn join(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Scalar {
    type Output = AntiPlaneAtOrigin;

    fn join(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiScalar> for Scalar {
    type Output = AntiScalar;

    fn join(self, other: AntiScalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Scalar {
    type Output = AntiSphereOnOrigin;

    fn join(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<Circle> for Scalar {
    type Output = Circle;

    fn join(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x4::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Join<CircleAligningOrigin> for Scalar {
    type Output = CircleAligningOrigin;

    fn join(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Join<CircleAtInfinity> for Scalar {
    type Output = CircleAtInfinity;

    fn join(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<CircleAtOrigin> for Scalar {
    type Output = CircleAtOrigin;

    fn join(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<CircleOnOrigin> for Scalar {
    type Output = CircleOnOrigin;

    fn join(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for Scalar {
    type Output = CircleOrthogonalOrigin;

    fn join(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<Dipole> for Scalar {
    type Output = Dipole;

    fn join(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x4::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for Scalar {
    type Output = DipoleAligningOrigin;

    fn join(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for Scalar {
    type Output = DipoleAtInfinity;

    fn join(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<DipoleAtOrigin> for Scalar {
    type Output = DipoleAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for Scalar {
    type Output = DipoleOnOrigin;

    fn join(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for Scalar {
    type Output = DipoleOrthogonalOrigin;

    fn join(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Join<DualNum> for Scalar {
    type Output = DualNum;

    fn join(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<FlatPoint> for Scalar {
    type Output = FlatPoint;

    fn join(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<FlatPointAtInfinity> for Scalar {
    type Output = FlatPointAtInfinity;

    fn join(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<FlatPointAtOrigin> for Scalar {
    type Output = FlatPointAtOrigin;

    fn join(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<Flector> for Scalar {
    type Output = Flector;

    fn join(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<FlectorAtInfinity> for Scalar {
    type Output = FlectorAtInfinity;

    fn join(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<Horizon> for Scalar {
    type Output = Horizon;

    fn join(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<Infinity> for Scalar {
    type Output = Infinity;

    fn join(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<Line> for Scalar {
    type Output = Line;

    fn join(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<LineAtInfinity> for Scalar {
    type Output = LineAtInfinity;

    fn join(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<LineAtOrigin> for Scalar {
    type Output = LineAtOrigin;

    fn join(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<Motor> for Scalar {
    type Output = Motor;

    fn join(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<MultiVector> for Scalar {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x2::from(self.group0()) * other.group2(),
                g3: Simd32x4::from(self.group0()) * other.group3(),
                g4: Simd32x3::from(self.group0()) * other.group4(),
                g5: Simd32x3::from(self.group0()) * other.group5(),
                g6: Simd32x3::from(self.group0()) * other.group6(),
                g7: Simd32x3::from(self.group0()) * other.group7(),
                g8: Simd32x4::from(self.group0()) * other.group8(),
                g9: Simd32x3::from(self.group0()) * other.group9(),
                g10: Simd32x2::from(self.group0()) * other.group10(),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for Scalar {
    type Output = NullCircleAtOrigin;

    fn join(self, other: NullCircleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for Scalar {
    type Output = NullDipoleAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<NullSphereAtOrigin> for Scalar {
    type Output = NullSphereAtOrigin;

    fn join(self, other: NullSphereAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<Origin> for Scalar {
    type Output = Origin;

    fn join(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<Plane> for Scalar {
    type Output = Plane;

    fn join(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<PlaneAtOrigin> for Scalar {
    type Output = PlaneAtOrigin;

    fn join(self, other: PlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<Rotor> for Scalar {
    type Output = Rotor;

    fn join(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<RoundPoint> for Scalar {
    type Output = RoundPoint;

    fn join(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x2::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Scalar {
    type Output = RoundPointAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<Scalar> for Scalar {
    type Output = Scalar;

    fn join(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Join<Sphere> for Scalar {
    type Output = Sphere;

    fn join(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x2::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<SphereAtOrigin> for Scalar {
    type Output = SphereAtOrigin;

    fn join(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<SphereOnOrigin> for Scalar {
    type Output = SphereOnOrigin;

    fn join(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<Transflector> for Scalar {
    type Output = Transflector;

    fn join(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Join<Translator> for Scalar {
    type Output = Translator;

    fn join(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Join<AntiPlane> for Sphere {
    type Output = AntiScalar;

    fn join(self, other: AntiPlane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[0] * other.group0()[3],
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Sphere {
    type Output = AntiScalar;

    fn join(self, other: AntiPlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Sphere {
    type Output = AntiScalar;

    fn join(self, other: AntiSphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[1] * other.group0()[3],
            },
        }
    }
}

impl Join<DualNum> for Sphere {
    type Output = Sphere;

    fn join(self, other: DualNum) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Infinity> for Sphere {
    type Output = AntiScalar;

    fn join(self, other: Infinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group1()[0] * other.group0(),
            },
        }
    }
}

impl Join<MultiVector> for Sphere {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group2()[1]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group0()[0]),
                g10: self.group1() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Origin> for Sphere {
    type Output = AntiScalar;

    fn join(self, other: Origin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group1()[1] * other.group0(),
            },
        }
    }
}

impl Join<RoundPoint> for Sphere {
    type Output = AntiScalar;

    fn join(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0]
                    + self.group0()[1] * other.group0()[1]
                    + self.group0()[2] * other.group0()[2]
                    + self.group1()[0] * other.group1()[1]
                    + self.group1()[1] * other.group1()[0],
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Sphere {
    type Output = AntiScalar;

    fn join(self, other: RoundPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group1()[0] * other.group0()[1] + self.group1()[1] * other.group0()[0],
            },
        }
    }
}

impl Join<Scalar> for Sphere {
    type Output = Sphere;

    fn join(self, other: Scalar) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Join<AntiPlane> for SphereAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiPlane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[3],
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for SphereAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiSphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[1] * other.group0()[3],
            },
        }
    }
}

impl Join<DualNum> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: DualNum) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Infinity> for SphereAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Infinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Join<MultiVector> for SphereAtOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group2()[1]]) + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Origin> for SphereAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: Origin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Join<RoundPoint> for SphereAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group1()[1] + self.group0()[1] * other.group1()[0],
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for SphereAtOrigin {
    type Output = AntiScalar;

    fn join(self, other: RoundPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[1] + self.group0()[1] * other.group0()[0],
            },
        }
    }
}

impl Join<Scalar> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn join(self, other: Scalar) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Join<AntiPlane> for SphereOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiPlane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for SphereOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiPlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for SphereOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: AntiSphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DualNum> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: DualNum) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Infinity> for SphereOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: Infinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Join<MultiVector> for SphereOnOrigin {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group2()[1]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPoint> for SphereOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[1],
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for SphereOnOrigin {
    type Output = AntiScalar;

    fn join(self, other: RoundPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0()[1],
            },
        }
    }
}

impl Join<Scalar> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn join(self, other: Scalar) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for Transflector {
    type Output = Plane;

    fn join(self, other: AntiCircleOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<AntiDipoleOnOrigin> for Transflector {
    type Output = AntiScalar;

    fn join(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiLineAtOrigin> for Transflector {
    type Output = Horizon;

    fn join(self, other: AntiLineAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for Transflector {
    type Output = Translator;

    fn join(self, other: AntiPlane) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Transflector {
    type Output = Translator;

    fn join(self, other: AntiPlaneAtOrigin) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Transflector {
    type Output = Motor;

    fn join(self, other: AntiSphereOnOrigin) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Circle> for Transflector {
    type Output = AntiScalar;

    fn join(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAligningOrigin> for Transflector {
    type Output = AntiScalar;

    fn join(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleAtOrigin> for Transflector {
    type Output = AntiScalar;

    fn join(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOnOrigin> for Transflector {
    type Output = AntiScalar;

    fn join(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<CircleOrthogonalOrigin> for Transflector {
    type Output = AntiScalar;

    fn join(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Dipole> for Transflector {
    type Output = Plane;

    fn join(self, other: Dipole) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for Transflector {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleAtInfinity> for Transflector {
    type Output = Horizon;

    fn join(self, other: DipoleAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for Transflector {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOnOrigin> for Transflector {
    type Output = PlaneAtOrigin;

    fn join(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for Transflector {
    type Output = Plane;

    fn join(self, other: DipoleOrthogonalOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Join<DualNum> for Transflector {
    type Output = Transflector;

    fn join(self, other: DualNum) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for Transflector {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0() * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group2()[0]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
            },
        }
    }
}

impl Join<NullCircleAtOrigin> for Transflector {
    type Output = AntiScalar;

    fn join(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for Transflector {
    type Output = PlaneAtOrigin;

    fn join(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<Origin> for Transflector {
    type Output = Rotor;

    fn join(self, other: Origin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Join<RoundPoint> for Transflector {
    type Output = Motor;

    fn join(self, other: RoundPoint) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[0]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Transflector {
    type Output = Rotor;

    fn join(self, other: RoundPointAtOrigin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
            },
        }
    }
}

impl Join<Scalar> for Transflector {
    type Output = Transflector;

    fn join(self, other: Scalar) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Join<AntiCircleOnOrigin> for Translator {
    type Output = AntiScalar;

    fn join(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlane> for Translator {
    type Output = Horizon;

    fn join(self, other: AntiPlane) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiPlaneAtOrigin> for Translator {
    type Output = Horizon;

    fn join(self, other: AntiPlaneAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<AntiSphereOnOrigin> for Translator {
    type Output = Plane;

    fn join(self, other: AntiSphereOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Join<Dipole> for Translator {
    type Output = AntiScalar;

    fn join(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAligningOrigin> for Translator {
    type Output = AntiScalar;

    fn join(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleAtOrigin> for Translator {
    type Output = AntiScalar;

    fn join(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOnOrigin> for Translator {
    type Output = AntiScalar;

    fn join(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DipoleOrthogonalOrigin> for Translator {
    type Output = AntiScalar;

    fn join(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<DualNum> for Translator {
    type Output = Translator;

    fn join(self, other: DualNum) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Join<MultiVector> for Translator {
    type Output = MultiVector;

    fn join(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group3()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Join<NullDipoleAtOrigin> for Translator {
    type Output = AntiScalar;

    fn join(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Join<Origin> for Translator {
    type Output = PlaneAtOrigin;

    fn join(self, other: Origin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Join<RoundPoint> for Translator {
    type Output = Plane;

    fn join(self, other: RoundPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group1()[0], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group1()[0], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group1()[0], other.group0()[2]]),
            },
        }
    }
}

impl Join<RoundPointAtOrigin> for Translator {
    type Output = PlaneAtOrigin;

    fn join(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Join<Scalar> for Translator {
    type Output = Translator;

    fn join(self, other: Scalar) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiScalar> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: AntiScalar) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<CircleAtInfinity> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAtOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<CircleOnOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group1()[0] - self.group1()[1] * other.group1()[1] - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DualNum> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: DualNum) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Flector) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for AntiCircleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: FlectorAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Horizon> for AntiCircleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Horizon) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<LineAtInfinity> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<LineAtOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: LineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group7()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[1]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Plane> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Plane) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: PlaneAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Sphere) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: SphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Transflector) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Translator> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiScalar> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn meet(self, other: AntiScalar) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Circle) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: CircleAligningOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: CircleAtInfinity) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: CircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<Dipole> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Meet<DualNum> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn meet(self, other: DualNum) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for AntiDipoleOnOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: Horizon) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Line) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: LineAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: LineAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Motor> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group3()[3], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group7(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0]),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[1]) - Simd32x3::from(self.group0()[3]) * other.group9(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Plane> for AntiDipoleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: Plane) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: PlaneAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Rotor> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for AntiDipoleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: Sphere) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[1]) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: SphereOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Meet<Transflector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiScalar> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: AntiScalar) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Circle> for AntiFlatPointAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Circle) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleAligningOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for AntiFlatPointAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<Dipole> for AntiFlatPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group2()[3],
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for AntiFlatPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for AntiFlatPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<DualNum> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: DualNum) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Meet<FlatPoint> for AntiFlatPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Line> for AntiFlatPointAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Line) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<LineAtOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: LineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([-other.group3()[3], 0.0]),
                g1: Simd32x3::from(self.group0()) * other.group7(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group9(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Plane> for AntiFlatPointAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: Plane) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: PlaneAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Rotor> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for AntiFlatPointAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: Sphere) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: SphereOnOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Meet<Transflector> for AntiFlatPointAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: Transflector) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
            },
        }
    }
}

impl Meet<Translator> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: Translator) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiScalar> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: AntiScalar) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for AntiLineAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for AntiLineAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<CircleAtInfinity> for AntiLineAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOnOrigin> for AntiLineAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DualNum> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: DualNum) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for AntiLineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Flector) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<Line> for AntiLineAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<LineAtOrigin> for AntiLineAtOrigin {
    type Output = Scalar;

    fn meet(self, other: LineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[1]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Plane> for AntiLineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Plane) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for AntiLineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: PlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for AntiLineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Sphere) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for AntiLineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: SphereOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for AntiLineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Transflector) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<Translator> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: Translator) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiScalar> for AntiPlane {
    type Output = AntiPlane;

    fn meet(self, other: AntiScalar) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<DualNum> for AntiPlane {
    type Output = AntiPlane;

    fn meet(self, other: DualNum) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for AntiPlane {
    type Output = Scalar;

    fn meet(self, other: Flector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<Motor> for AntiPlane {
    type Output = AntiPlane;

    fn meet(self, other: Motor) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for AntiPlane {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group9()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group10()[0], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[1]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for AntiPlane {
    type Output = Scalar;

    fn meet(self, other: NullSphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for AntiPlane {
    type Output = Scalar;

    fn meet(self, other: Plane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for AntiPlane {
    type Output = Scalar;

    fn meet(self, other: PlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Rotor> for AntiPlane {
    type Output = AntiPlane;

    fn meet(self, other: Rotor) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Sphere> for AntiPlane {
    type Output = Scalar;

    fn meet(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[0],
            },
        }
    }
}

impl Meet<SphereAtOrigin> for AntiPlane {
    type Output = Scalar;

    fn meet(self, other: SphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[0],
            },
        }
    }
}

impl Meet<SphereOnOrigin> for AntiPlane {
    type Output = Scalar;

    fn meet(self, other: SphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<Transflector> for AntiPlane {
    type Output = Scalar;

    fn meet(self, other: Transflector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<Translator> for AntiPlane {
    type Output = AntiPlane;

    fn meet(self, other: Translator) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiScalar> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiScalar) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<DualNum> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: DualNum) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for AntiPlaneAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Flector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<Motor> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Motor) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group9()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Plane> for AntiPlaneAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Plane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for AntiPlaneAtOrigin {
    type Output = Scalar;

    fn meet(self, other: PlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Rotor> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Rotor) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Sphere> for AntiPlaneAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<SphereOnOrigin> for AntiPlaneAtOrigin {
    type Output = Scalar;

    fn meet(self, other: SphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Transflector> for AntiPlaneAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Transflector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<Translator> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Translator) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for AntiScalar {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for AntiScalar {
    type Output = AntiDipoleOnOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for AntiScalar {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for AntiScalar {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<AntiPlane> for AntiScalar {
    type Output = AntiPlane;

    fn meet(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<AntiPlaneAtOrigin> for AntiScalar {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<AntiScalar> for AntiScalar {
    type Output = AntiScalar;

    fn meet(self, other: AntiScalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for AntiScalar {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Circle> for AntiScalar {
    type Output = Circle;

    fn meet(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x4::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for AntiScalar {
    type Output = CircleAligningOrigin;

    fn meet(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for AntiScalar {
    type Output = CircleAtInfinity;

    fn meet(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for AntiScalar {
    type Output = CircleAtOrigin;

    fn meet(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for AntiScalar {
    type Output = CircleOnOrigin;

    fn meet(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for AntiScalar {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<Dipole> for AntiScalar {
    type Output = Dipole;

    fn meet(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x4::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for AntiScalar {
    type Output = DipoleAligningOrigin;

    fn meet(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for AntiScalar {
    type Output = DipoleAtInfinity;

    fn meet(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for AntiScalar {
    type Output = DipoleAtOrigin;

    fn meet(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for AntiScalar {
    type Output = DipoleOnOrigin;

    fn meet(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for AntiScalar {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Meet<DualNum> for AntiScalar {
    type Output = DualNum;

    fn meet(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPoint> for AntiScalar {
    type Output = FlatPoint;

    fn meet(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for AntiScalar {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for AntiScalar {
    type Output = FlatPointAtOrigin;

    fn meet(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for AntiScalar {
    type Output = Flector;

    fn meet(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for AntiScalar {
    type Output = FlectorAtInfinity;

    fn meet(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Horizon> for AntiScalar {
    type Output = Horizon;

    fn meet(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Infinity> for AntiScalar {
    type Output = Infinity;

    fn meet(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Line> for AntiScalar {
    type Output = Line;

    fn meet(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<LineAtInfinity> for AntiScalar {
    type Output = LineAtInfinity;

    fn meet(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<LineAtOrigin> for AntiScalar {
    type Output = LineAtOrigin;

    fn meet(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for AntiScalar {
    type Output = Motor;

    fn meet(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<MultiVector> for AntiScalar {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x2::from(self.group0()) * other.group2(),
                g3: Simd32x4::from(self.group0()) * other.group3(),
                g4: Simd32x3::from(self.group0()) * other.group4(),
                g5: Simd32x3::from(self.group0()) * other.group5(),
                g6: Simd32x3::from(self.group0()) * other.group6(),
                g7: Simd32x3::from(self.group0()) * other.group7(),
                g8: Simd32x4::from(self.group0()) * other.group8(),
                g9: Simd32x3::from(self.group0()) * other.group9(),
                g10: Simd32x2::from(self.group0()) * other.group10(),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for AntiScalar {
    type Output = NullCircleAtOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for AntiScalar {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for AntiScalar {
    type Output = NullSphereAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Origin> for AntiScalar {
    type Output = Origin;

    fn meet(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for AntiScalar {
    type Output = Plane;

    fn meet(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for AntiScalar {
    type Output = PlaneAtOrigin;

    fn meet(self, other: PlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Rotor> for AntiScalar {
    type Output = Rotor;

    fn meet(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<RoundPoint> for AntiScalar {
    type Output = RoundPoint;

    fn meet(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x2::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for AntiScalar {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Scalar> for AntiScalar {
    type Output = Scalar;

    fn meet(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Sphere> for AntiScalar {
    type Output = Sphere;

    fn meet(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x2::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for AntiScalar {
    type Output = SphereAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for AntiScalar {
    type Output = SphereOnOrigin;

    fn meet(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Transflector> for AntiScalar {
    type Output = Transflector;

    fn meet(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<Translator> for AntiScalar {
    type Output = Translator;

    fn meet(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<AntiScalar> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiScalar) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<DualNum> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: DualNum) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: Flector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2] + self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: FlectorAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<Horizon> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: Horizon) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Motor) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group9()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group10()[1], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[1], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Plane> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: Plane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: PlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Rotor> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Rotor) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Sphere> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[1],
            },
        }
    }
}

impl Meet<SphereAtOrigin> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: SphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[1],
            },
        }
    }
}

impl Meet<SphereOnOrigin> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: SphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Transflector> for AntiSphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: Transflector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2] + self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<Translator> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Translator) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for Circle {
    type Output = Scalar;

    fn meet(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for Circle {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for Circle {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for Circle {
    type Output = Scalar;

    fn meet(self, other: AntiLineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for Circle {
    type Output = Circle;

    fn meet(self, other: AntiScalar) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for Circle {
    type Output = RoundPoint;

    fn meet(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for Circle {
    type Output = RoundPoint;

    fn meet(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for Circle {
    type Output = RoundPoint;

    fn meet(self, other: CircleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for Circle {
    type Output = RoundPoint;

    fn meet(self, other: CircleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for Circle {
    type Output = RoundPoint;

    fn meet(self, other: CircleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for Circle {
    type Output = RoundPoint;

    fn meet(self, other: CircleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Meet<Dipole> for Circle {
    type Output = Scalar;

    fn meet(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group2()[3],
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for Circle {
    type Output = Scalar;

    fn meet(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for Circle {
    type Output = Scalar;

    fn meet(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for Circle {
    type Output = Scalar;

    fn meet(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for Circle {
    type Output = Scalar;

    fn meet(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for Circle {
    type Output = Scalar;

    fn meet(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DualNum> for Circle {
    type Output = Circle;

    fn meet(self, other: DualNum) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
                g2: self.group2() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for Circle {
    type Output = Scalar;

    fn meet(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for Circle {
    type Output = Scalar;

    fn meet(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for Circle {
    type Output = Scalar;

    fn meet(self, other: FlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for Circle {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group0() * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for Circle {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: self.group1() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for Circle {
    type Output = DipoleAtInfinity;

    fn meet(self, other: Horizon) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
            },
        }
    }
}

impl Meet<Line> for Circle {
    type Output = RoundPoint;

    fn meet(self, other: Line) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for Circle {
    type Output = AntiPlane;

    fn meet(self, other: LineAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for Circle {
    type Output = RoundPoint;

    fn meet(self, other: LineAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group2()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Motor> for Circle {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: self.group2() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for Circle {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([-other.group3()[2], 0.0])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([-other.group3()[3], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group7(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]]),
                g4: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group10()[0])
                    - Simd32x3::from(self.group2()[3]) * other.group9(),
                g5: self.group1() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: self.group0() * Simd32x3::from(other.group0()[1]),
                g7: self.group1() * Simd32x3::from(other.group0()[1]),
                g8: self.group2() * Simd32x4::from(other.group0()[1]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for Circle {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for Circle {
    type Output = Scalar;

    fn meet(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for Circle {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
                g1: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for Circle {
    type Output = Dipole;

    fn meet(self, other: Plane) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for Circle {
    type Output = Dipole;

    fn meet(self, other: PlaneAtOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group2()[3]) * other.group0(),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for Circle {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: self.group2() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for Circle {
    type Output = Dipole;

    fn meet(self, other: Sphere) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group1()[0])
                    - Simd32x3::from(self.group2()[3]) * other.group0(),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Circle {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: SphereAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]) + Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for Circle {
    type Output = Dipole;

    fn meet(self, other: SphereOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for Circle {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group0() * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for Circle {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: self.group2() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for CircleAligningOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for CircleAligningOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiLineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn meet(self, other: AntiScalar) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Meet<Dipole> for CircleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for CircleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DualNum> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn meet(self, other: DualNum) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
                g2: self.group2() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for CircleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for CircleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Flector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for CircleAligningOrigin {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: self.group1() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for CircleAligningOrigin {
    type Output = DipoleAtInfinity;

    fn meet(self, other: Horizon) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
            },
        }
    }
}

impl Meet<Line> for CircleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Line) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for CircleAligningOrigin {
    type Output = AntiPlane;

    fn meet(self, other: LineAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for CircleAligningOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: LineAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Motor> for CircleAligningOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([-other.group3()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]]),
                g4: self.group0() * Simd32x3::from(other.group10()[1]) + self.group2() * Simd32x3::from(other.group10()[0]),
                g5: self.group1() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: self.group0() * Simd32x3::from(other.group0()[1]),
                g7: self.group1() * Simd32x3::from(other.group0()[1]),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for CircleAligningOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for CircleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for CircleAligningOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
                g1: self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for CircleAligningOrigin {
    type Output = Dipole;

    fn meet(self, other: Plane) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for CircleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn meet(self, other: PlaneAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for CircleAligningOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for CircleAligningOrigin {
    type Output = Dipole;

    fn meet(self, other: Sphere) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + self.group2() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for CircleAligningOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: SphereAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]) + self.group2() * Simd32x3::from(other.group0()[0]),
                g2: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for CircleAligningOrigin {
    type Output = Dipole;

    fn meet(self, other: SphereOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group0()[3]),
                g1: self.group2() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for CircleAligningOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for CircleAtInfinity {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for CircleAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: AntiLineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn meet(self, other: AntiScalar) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for CircleAtInfinity {
    type Output = RoundPoint;

    fn meet(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for CircleAtInfinity {
    type Output = RoundPoint;

    fn meet(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for CircleAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: CircleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for CircleAtInfinity {
    type Output = RoundPoint;

    fn meet(self, other: CircleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for CircleAtInfinity {
    type Output = RoundPoint;

    fn meet(self, other: CircleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for CircleAtInfinity {
    type Output = RoundPoint;

    fn meet(self, other: CircleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Meet<Dipole> for CircleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for CircleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DualNum> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn meet(self, other: DualNum) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for CircleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: FlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for CircleAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for CircleAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: FlectorAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Horizon> for CircleAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: Horizon) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for CircleAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: Line) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for CircleAtInfinity {
    type Output = Infinity;

    fn meet(self, other: LineAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<LineAtOrigin> for CircleAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: LineAtOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Motor> for CircleAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: self.group1() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for CircleAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group3()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([-other.group3()[3], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group7(),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]]),
                g4: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group10()[0]) - Simd32x3::from(self.group1()[3]) * other.group9(),
                g5: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[1]),
                g8: self.group1() * Simd32x4::from(other.group0()[1]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for CircleAtInfinity {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for CircleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for CircleAtInfinity {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for CircleAtInfinity {
    type Output = DipoleAtInfinity;

    fn meet(self, other: Plane) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for CircleAtInfinity {
    type Output = DipoleAtInfinity;

    fn meet(self, other: PlaneAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for CircleAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: self.group1() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for CircleAtInfinity {
    type Output = Dipole;

    fn meet(self, other: Sphere) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for CircleAtInfinity {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: SphereAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for CircleAtInfinity {
    type Output = Dipole;

    fn meet(self, other: SphereOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for CircleAtInfinity {
    type Output = DipoleAtInfinity;

    fn meet(self, other: Transflector) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Translator> for CircleAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: self.group1() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for CircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for CircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<AntiScalar> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn meet(self, other: AntiScalar) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for CircleAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for CircleAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for CircleAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for CircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for CircleAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for CircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Dipole> for CircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for CircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for CircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for CircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for CircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for CircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DualNum> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn meet(self, other: DualNum) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for CircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for CircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Flector> for CircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for CircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for CircleAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: Horizon) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for CircleAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Line) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for CircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: LineAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for CircleAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: LineAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Motor> for CircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for CircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group3()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group10()[1]) + self.group1() * Simd32x3::from(other.group10()[0]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: self.group0() * Simd32x3::from(other.group0()[1]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for CircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for CircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for CircleAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for CircleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: Plane) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for CircleAtOrigin {
    type Output = DipoleAtOrigin;

    fn meet(self, other: PlaneAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for CircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for CircleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: Sphere) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + self.group1() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for CircleAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) + self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for CircleAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: SphereOnOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group1() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for CircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for CircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for CircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group1()[0] - self.group1()[1] * other.group1()[1] - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for CircleOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for CircleOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for CircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiLineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn meet(self, other: AntiScalar) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for CircleOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for CircleOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for CircleOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for CircleOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for CircleOnOrigin {
    type Output = Origin;

    fn meet(self, other: CircleOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for CircleOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Meet<Dipole> for CircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for CircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for CircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for CircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for CircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DualNum> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn meet(self, other: DualNum) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for CircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for CircleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Flector> for CircleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: self.group1() * Simd32x3::from(other.group1()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for CircleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: self.group1() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for CircleOnOrigin {
    type Output = DipoleAtInfinity;

    fn meet(self, other: Horizon) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
            },
        }
    }
}

impl Meet<Line> for CircleOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Line) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for CircleOnOrigin {
    type Output = AntiPlane;

    fn meet(self, other: LineAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for CircleOnOrigin {
    type Output = Origin;

    fn meet(self, other: LineAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for CircleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for CircleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group4()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group8()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]]),
                g4: self.group0() * Simd32x3::from(other.group10()[1]),
                g5: self.group1() * Simd32x3::from(other.group10()[1]),
                g6: self.group0() * Simd32x3::from(other.group0()[1]),
                g7: self.group1() * Simd32x3::from(other.group0()[1]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for CircleOnOrigin {
    type Output = Origin;

    fn meet(self, other: NullCircleAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for CircleOnOrigin {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for CircleOnOrigin {
    type Output = Dipole;

    fn meet(self, other: Plane) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for CircleOnOrigin {
    type Output = DipoleOnOrigin;

    fn meet(self, other: PlaneAtOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Rotor> for CircleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for CircleOnOrigin {
    type Output = Dipole;

    fn meet(self, other: Sphere) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for CircleOnOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: SphereAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
                g2: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for CircleOnOrigin {
    type Output = DipoleOnOrigin;

    fn meet(self, other: SphereOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Transflector> for CircleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: self.group1() * Simd32x3::from(other.group1()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for CircleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: self.group1() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<AntiScalar> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: AntiScalar) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for CircleOrthogonalOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for CircleOrthogonalOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Dipole> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DualNum> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: DualNum) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for CircleOrthogonalOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: Horizon) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for CircleOrthogonalOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Line) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: LineAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for CircleOrthogonalOrigin {
    type Output = RoundPoint;

    fn meet(self, other: LineAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Motor> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group3()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([-other.group3()[3], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group7(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group10()[0])
                    - Simd32x3::from(self.group1()[3]) * other.group9(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: self.group0() * Simd32x3::from(other.group0()[1]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from(other.group0()[1]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for CircleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: Plane) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for CircleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: PlaneAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for CircleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: Sphere) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0])
                    - Simd32x3::from(self.group1()[3]) * other.group0(),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for CircleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: SphereOnOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for Dipole {
    type Output = Scalar;

    fn meet(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for Dipole {
    type Output = Scalar;

    fn meet(self, other: AntiFlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[3] * other.group0(),
            },
        }
    }
}

impl Meet<AntiScalar> for Dipole {
    type Output = Dipole;

    fn meet(self, other: AntiScalar) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for Dipole {
    type Output = Scalar;

    fn meet(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group2()[3],
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for Dipole {
    type Output = Scalar;

    fn meet(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAtInfinity> for Dipole {
    type Output = Scalar;

    fn meet(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<CircleAtOrigin> for Dipole {
    type Output = Scalar;

    fn meet(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOnOrigin> for Dipole {
    type Output = Scalar;

    fn meet(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for Dipole {
    type Output = Scalar;

    fn meet(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DualNum> for Dipole {
    type Output = Dipole;

    fn meet(self, other: DualNum) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
                g2: self.group2() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for Dipole {
    type Output = RoundPoint;

    fn meet(self, other: Flector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for Dipole {
    type Output = AntiPlane;

    fn meet(self, other: FlectorAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Meet<Horizon> for Dipole {
    type Output = AntiPlane;

    fn meet(self, other: Horizon) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Meet<Line> for Dipole {
    type Output = Scalar;

    fn meet(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<LineAtInfinity> for Dipole {
    type Output = Scalar;

    fn meet(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<LineAtOrigin> for Dipole {
    type Output = Scalar;

    fn meet(self, other: LineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for Dipole {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for Dipole {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([-other.group8()[3], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0])
                    - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group2()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g4: self.group1() * Simd32x3::from(other.group0()[1]),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for Dipole {
    type Output = Scalar;

    fn meet(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for Dipole {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group2() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for Dipole {
    type Output = RoundPoint;

    fn meet(self, other: Plane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for Dipole {
    type Output = RoundPoint;

    fn meet(self, other: PlaneAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<Rotor> for Dipole {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for Dipole {
    type Output = RoundPoint;

    fn meet(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Dipole {
    type Output = RoundPoint;

    fn meet(self, other: SphereAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group2()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for Dipole {
    type Output = RoundPoint;

    fn meet(self, other: SphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group2()[3], self.group2()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Meet<Transflector> for Dipole {
    type Output = RoundPoint;

    fn meet(self, other: Transflector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Meet<Translator> for Dipole {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiFlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Meet<AntiScalar> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn meet(self, other: AntiScalar) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for DipoleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAtInfinity> for DipoleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<CircleAtOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOnOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DualNum> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn meet(self, other: DualNum) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for DipoleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Flector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for DipoleAligningOrigin {
    type Output = AntiPlane;

    fn meet(self, other: FlectorAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Meet<Horizon> for DipoleAligningOrigin {
    type Output = AntiPlane;

    fn meet(self, other: Horizon) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Meet<Line> for DipoleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<LineAtInfinity> for DipoleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([-other.group8()[3], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group10()[1])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for DipoleAligningOrigin {
    type Output = Scalar;

    fn meet(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for DipoleAligningOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for DipoleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Plane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for DipoleAligningOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: PlaneAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<Rotor> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn meet(self, other: Rotor) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Sphere> for DipoleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1]) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for DipoleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: SphereAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group1()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for DipoleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: SphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group1()[3], self.group1()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Meet<Transflector> for DipoleAligningOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Transflector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Meet<Translator> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: AntiFlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Meet<AntiScalar> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn meet(self, other: AntiScalar) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for DipoleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAtInfinity> for DipoleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<CircleAtOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOnOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DualNum> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn meet(self, other: DualNum) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for DipoleAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: Flector) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for DipoleAtInfinity {
    type Output = Infinity;

    fn meet(self, other: FlectorAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<Horizon> for DipoleAtInfinity {
    type Output = Infinity;

    fn meet(self, other: Horizon) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Line> for DipoleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<LineAtOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: LineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for DipoleAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for DipoleAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([-other.group8()[3], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g4: self.group0() * Simd32x3::from(other.group0()[1]),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for DipoleAtInfinity {
    type Output = Scalar;

    fn meet(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for DipoleAtInfinity {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for DipoleAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: Plane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for DipoleAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: PlaneAtOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<Rotor> for DipoleAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for DipoleAtInfinity {
    type Output = RoundPoint;

    fn meet(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for DipoleAtInfinity {
    type Output = RoundPoint;

    fn meet(self, other: SphereAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group1()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for DipoleAtInfinity {
    type Output = RoundPoint;

    fn meet(self, other: SphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group1()[3], self.group1()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Meet<Transflector> for DipoleAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: Transflector) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
            },
        }
    }
}

impl Meet<Translator> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn meet(self, other: Translator) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for DipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn meet(self, other: AntiScalar) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for DipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for DipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAtInfinity> for DipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<CircleAtOrigin> for DipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOnOrigin> for DipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DualNum> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn meet(self, other: DualNum) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for DipoleAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Flector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for DipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: FlectorAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Horizon> for DipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Horizon) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for DipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<LineAtInfinity> for DipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for DipoleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for DipoleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group6()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group10()[1]) - self.group1() * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group9()[2]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for DipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for DipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for DipoleAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Plane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for DipoleAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: PlaneAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<Rotor> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn meet(self, other: Rotor) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Sphere> for DipoleAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1]) - self.group1() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for DipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for DipoleAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: SphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<Transflector> for DipoleAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Transflector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Meet<Translator> for DipoleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for DipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for DipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiFlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<AntiScalar> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn meet(self, other: AntiScalar) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for DipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for DipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Meet<CircleAtInfinity> for DipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<CircleAtOrigin> for DipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DualNum> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn meet(self, other: DualNum) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for DipoleOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Flector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from([self.group0()[2], self.group0()[3]]) * Simd32x2::from([-other.group1()[2], other.group1()[3]]),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for DipoleOnOrigin {
    type Output = AntiPlane;

    fn meet(self, other: FlectorAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Horizon> for DipoleOnOrigin {
    type Output = AntiPlane;

    fn meet(self, other: Horizon) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for DipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<LineAtInfinity> for DipoleOnOrigin {
    type Output = Scalar;

    fn meet(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for DipoleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0() * Simd32x4::from(other.group0()[3]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for DipoleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group8()[3], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[1]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0]),
                g3: self.group0() * Simd32x4::from(other.group0()[1]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for DipoleOnOrigin {
    type Output = Origin;

    fn meet(self, other: NullSphereAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for DipoleOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Plane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from([self.group0()[2], self.group0()[3]]) * Simd32x2::from([-other.group0()[2], other.group0()[3]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for DipoleOnOrigin {
    type Output = Origin;

    fn meet(self, other: PlaneAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Rotor> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn meet(self, other: Rotor) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Sphere> for DipoleOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[1]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for DipoleOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: SphereAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g1: Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for DipoleOnOrigin {
    type Output = Origin;

    fn meet(self, other: SphereOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<Transflector> for DipoleOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Transflector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from([self.group0()[2], self.group0()[3]]) * Simd32x2::from([-other.group1()[2], other.group1()[3]]),
            },
        }
    }
}

impl Meet<Translator> for DipoleOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0() * Simd32x4::from(other.group0()[3]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: AntiScalar) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DualNum> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: DualNum) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
                g2: self.group2() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Flector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: FlectorAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Horizon> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Horizon) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<LineAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<LineAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: LineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: self.group2() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([-other.group6()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0])
                    - self.group2() * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group9()[2]]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[1]),
                g5: self.group2() * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;

    fn meet(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Plane) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;

    fn meet(self, other: PlaneAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<Rotor> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: self.group2() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - self.group2() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - self.group2() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;

    fn meet(self, other: SphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - self.group2() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<Transflector> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Transflector) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Meet<Translator> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: self.group2() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for DualNum {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for DualNum {
    type Output = AntiDipoleOnOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for DualNum {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for DualNum {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiPlane> for DualNum {
    type Output = AntiPlane;

    fn meet(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiPlaneAtOrigin> for DualNum {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiScalar> for DualNum {
    type Output = DualNum;

    fn meet(self, other: AntiScalar) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for DualNum {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<Circle> for DualNum {
    type Output = Circle;

    fn meet(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
                g2: Simd32x4::from(self.group0()[1]) * other.group2(),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for DualNum {
    type Output = CircleAligningOrigin;

    fn meet(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
                g2: Simd32x3::from(self.group0()[1]) * other.group2(),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for DualNum {
    type Output = CircleAtInfinity;

    fn meet(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x4::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for DualNum {
    type Output = CircleAtOrigin;

    fn meet(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for DualNum {
    type Output = CircleOnOrigin;

    fn meet(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for DualNum {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x4::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<Dipole> for DualNum {
    type Output = Dipole;

    fn meet(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
                g2: Simd32x4::from(self.group0()[1]) * other.group2(),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for DualNum {
    type Output = DipoleAligningOrigin;

    fn meet(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x4::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for DualNum {
    type Output = DipoleAtInfinity;

    fn meet(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x4::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for DualNum {
    type Output = DipoleAtOrigin;

    fn meet(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for DualNum {
    type Output = DipoleOnOrigin;

    fn meet(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for DualNum {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
                g2: Simd32x3::from(self.group0()[1]) * other.group2(),
            },
        }
    }
}

impl Meet<DualNum> for DualNum {
    type Output = DualNum;

    fn meet(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[1], 0.0]) + Simd32x2::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPoint> for DualNum {
    type Output = FlatPoint;

    fn meet(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for DualNum {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for DualNum {
    type Output = FlatPointAtOrigin;

    fn meet(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for DualNum {
    type Output = Flector;

    fn meet(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
                g1: Simd32x4::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for DualNum {
    type Output = FlectorAtInfinity;

    fn meet(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<Horizon> for DualNum {
    type Output = Horizon;

    fn meet(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Meet<Infinity> for DualNum {
    type Output = Infinity;

    fn meet(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Meet<Line> for DualNum {
    type Output = Line;

    fn meet(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<LineAtInfinity> for DualNum {
    type Output = LineAtInfinity;

    fn meet(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<LineAtOrigin> for DualNum {
    type Output = LineAtOrigin;

    fn meet(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for DualNum {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for DualNum {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[1], 0.0]) + Simd32x2::from(self.group0()[1]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group1(),
                g2: Simd32x2::from(self.group0()[1]) * other.group2(),
                g3: Simd32x4::from(self.group0()[1]) * other.group3(),
                g4: Simd32x3::from(self.group0()[1]) * other.group4(),
                g5: Simd32x3::from(self.group0()[1]) * other.group5(),
                g6: Simd32x3::from(self.group0()[1]) * other.group6(),
                g7: Simd32x3::from(self.group0()[1]) * other.group7(),
                g8: Simd32x4::from(self.group0()[1]) * other.group8(),
                g9: Simd32x3::from(self.group0()[1]) * other.group9(),
                g10: Simd32x2::from(self.group0()[1]) * other.group10(),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for DualNum {
    type Output = NullCircleAtOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for DualNum {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for DualNum {
    type Output = NullSphereAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Meet<Origin> for DualNum {
    type Output = Origin;

    fn meet(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for DualNum {
    type Output = Plane;

    fn meet(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for DualNum {
    type Output = PlaneAtOrigin;

    fn meet(self, other: PlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<Rotor> for DualNum {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<RoundPoint> for DualNum {
    type Output = RoundPoint;

    fn meet(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for DualNum {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<Scalar> for DualNum {
    type Output = Scalar;

    fn meet(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Meet<Sphere> for DualNum {
    type Output = Sphere;

    fn meet(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for DualNum {
    type Output = SphereAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for DualNum {
    type Output = SphereOnOrigin;

    fn meet(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<Transflector> for DualNum {
    type Output = Transflector;

    fn meet(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: Simd32x4::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<Translator> for DualNum {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for FlatPoint {
    type Output = Scalar;

    fn meet(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for FlatPoint {
    type Output = Scalar;

    fn meet(self, other: AntiFlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<AntiScalar> for FlatPoint {
    type Output = FlatPoint;

    fn meet(self, other: AntiScalar) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for FlatPoint {
    type Output = Scalar;

    fn meet(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for FlatPoint {
    type Output = Scalar;

    fn meet(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAtInfinity> for FlatPoint {
    type Output = Scalar;

    fn meet(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<CircleAtOrigin> for FlatPoint {
    type Output = Scalar;

    fn meet(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOnOrigin> for FlatPoint {
    type Output = Scalar;

    fn meet(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for FlatPoint {
    type Output = Scalar;

    fn meet(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DualNum> for FlatPoint {
    type Output = FlatPoint;

    fn meet(self, other: DualNum) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for FlatPoint {
    type Output = Infinity;

    fn meet(self, other: Flector) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2] + self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for FlatPoint {
    type Output = Infinity;

    fn meet(self, other: FlectorAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<Horizon> for FlatPoint {
    type Output = Infinity;

    fn meet(self, other: Horizon) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for FlatPoint {
    type Output = FlatPoint;

    fn meet(self, other: Motor) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for FlatPoint {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group8()[3], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for FlatPoint {
    type Output = Scalar;

    fn meet(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for FlatPoint {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for FlatPoint {
    type Output = Infinity;

    fn meet(self, other: Plane) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for FlatPoint {
    type Output = Infinity;

    fn meet(self, other: PlaneAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Rotor> for FlatPoint {
    type Output = FlatPoint;

    fn meet(self, other: Rotor) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Sphere> for FlatPoint {
    type Output = RoundPoint;

    fn meet(self, other: Sphere) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for FlatPoint {
    type Output = RoundPoint;

    fn meet(self, other: SphereAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for FlatPoint {
    type Output = RoundPoint;

    fn meet(self, other: SphereOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group0()[3], self.group0()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Meet<Transflector> for FlatPoint {
    type Output = Infinity;

    fn meet(self, other: Transflector) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2] + self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<Translator> for FlatPoint {
    type Output = FlatPoint;

    fn meet(self, other: Translator) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for FlatPointAtInfinity {
    type Output = Scalar;

    fn meet(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: AntiScalar) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for FlatPointAtInfinity {
    type Output = Scalar;

    fn meet(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for FlatPointAtInfinity {
    type Output = Scalar;

    fn meet(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAtOrigin> for FlatPointAtInfinity {
    type Output = Scalar;

    fn meet(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOnOrigin> for FlatPointAtInfinity {
    type Output = Scalar;

    fn meet(self, other: CircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = Scalar;

    fn meet(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DualNum> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: DualNum) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for FlatPointAtInfinity {
    type Output = Infinity;

    fn meet(self, other: Flector) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<Motor> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: Motor) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group6()[2], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group10()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0() * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for FlatPointAtInfinity {
    type Output = Scalar;

    fn meet(self, other: NullCircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for FlatPointAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for FlatPointAtInfinity {
    type Output = Infinity;

    fn meet(self, other: Plane) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for FlatPointAtInfinity {
    type Output = Infinity;

    fn meet(self, other: PlaneAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Rotor> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: Rotor) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Sphere> for FlatPointAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: Sphere) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group1()[0], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group1()[0], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group1()[0], other.group0()[2]]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for FlatPointAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for FlatPointAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: SphereOnOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Meet<Transflector> for FlatPointAtInfinity {
    type Output = Infinity;

    fn meet(self, other: Transflector) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<Translator> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: Translator) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for FlatPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiDipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for FlatPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiFlatPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<AntiScalar> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn meet(self, other: AntiScalar) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Circle> for FlatPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group2()[3],
            },
        }
    }
}

impl Meet<CircleAtInfinity> for FlatPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for FlatPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Meet<DualNum> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn meet(self, other: DualNum) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Meet<Flector> for FlatPointAtOrigin {
    type Output = Infinity;

    fn meet(self, other: Flector) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group1()[3],
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for FlatPointAtOrigin {
    type Output = Infinity;

    fn meet(self, other: FlectorAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<Horizon> for FlatPointAtOrigin {
    type Output = Infinity;

    fn meet(self, other: Horizon) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn meet(self, other: Motor) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<MultiVector> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([-other.group8()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()) * other.group10() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for FlatPointAtOrigin {
    type Output = Origin;

    fn meet(self, other: NullSphereAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for FlatPointAtOrigin {
    type Output = Infinity;

    fn meet(self, other: Plane) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<Rotor> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn meet(self, other: Rotor) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<Sphere> for FlatPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: Sphere) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for FlatPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for FlatPointAtOrigin {
    type Output = Origin;

    fn meet(self, other: SphereOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<Transflector> for FlatPointAtOrigin {
    type Output = Infinity;

    fn meet(self, other: Transflector) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group1()[3],
            },
        }
    }
}

impl Meet<Translator> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn meet(self, other: Translator) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for Flector {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiCircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for Flector {
    type Output = MultiVector;

    fn meet(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for Flector {
    type Output = MultiVector;

    fn meet(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for Flector {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiLineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<AntiPlane> for Flector {
    type Output = Scalar;

    fn meet(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiPlaneAtOrigin> for Flector {
    type Output = Scalar;

    fn meet(self, other: AntiPlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for Flector {
    type Output = Flector;

    fn meet(self, other: AntiScalar) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for Flector {
    type Output = Scalar;

    fn meet(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2] + self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<Circle> for Flector {
    type Output = MultiVector;

    fn meet(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group2()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for Flector {
    type Output = MultiVector;

    fn meet(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for Flector {
    type Output = MultiVector;

    fn meet(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group1()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[3]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for Flector {
    type Output = MultiVector;

    fn meet(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for Flector {
    type Output = MultiVector;

    fn meet(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for Flector {
    type Output = MultiVector;

    fn meet(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group1()[3], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Dipole> for Flector {
    type Output = RoundPoint;

    fn meet(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group2()[3]]),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for Flector {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group1()[3]]),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for Flector {
    type Output = AntiPlane;

    fn meet(self, other: DipoleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[3]]),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for Flector {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for Flector {
    type Output = RoundPoint;

    fn meet(self, other: DipoleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from([self.group1()[2], self.group1()[3]]) * Simd32x2::from([other.group0()[2], -other.group0()[3]]),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for Flector {
    type Output = RoundPoint;

    fn meet(self, other: DipoleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Meet<DualNum> for Flector {
    type Output = Flector;

    fn meet(self, other: DualNum) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
                g1: self.group1() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for Flector {
    type Output = Infinity;

    fn meet(self, other: FlatPoint) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for Flector {
    type Output = Infinity;

    fn meet(self, other: FlatPointAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for Flector {
    type Output = Infinity;

    fn meet(self, other: FlatPointAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for Flector {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group1()[3]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for Flector {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for Flector {
    type Output = MultiVector;

    fn meet(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Line> for Flector {
    type Output = FlatPoint;

    fn meet(self, other: Line) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for Flector {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: LineAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for Flector {
    type Output = FlatPoint;

    fn meet(self, other: LineAtOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Motor> for Flector {
    type Output = Flector;

    fn meet(self, other: Motor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for Flector {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group8()[3], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group1()[3]) * other.group6(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group7(),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group10()[0]),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group10()[1], other.group10()[1], other.group10()[1], 0.0])
                    - Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[1]),
                g10: Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group0()[1]]),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for Flector {
    type Output = MultiVector;

    fn meet(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for Flector {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: NullDipoleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], other.group0()[2]]),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for Flector {
    type Output = MultiVector;

    fn meet(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([-other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Origin> for Flector {
    type Output = Scalar;

    fn meet(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for Flector {
    type Output = MultiVector;

    fn meet(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for Flector {
    type Output = MultiVector;

    fn meet(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Rotor> for Flector {
    type Output = Flector;

    fn meet(self, other: Rotor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<RoundPoint> for Flector {
    type Output = Scalar;

    fn meet(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2] + self.group1()[3] * other.group1()[0],
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for Flector {
    type Output = Scalar;

    fn meet(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[3] * other.group0()[0],
            },
        }
    }
}

impl Meet<Sphere> for Flector {
    type Output = MultiVector;

    fn meet(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    - Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Flector {
    type Output = MultiVector;

    fn meet(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], -other.group0()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for Flector {
    type Output = MultiVector;

    fn meet(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group0()[3], self.group0()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group1()[3]) * other.group0(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Transflector> for Flector {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group1()[3]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for Flector {
    type Output = Flector;

    fn meet(self, other: Translator) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for FlectorAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiCircleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiScalar> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn meet(self, other: AntiScalar) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for FlectorAtInfinity {
    type Output = Scalar;

    fn meet(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<Circle> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(self.group0()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(self.group0()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for FlectorAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: CircleAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(self.group0()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Dipole> for FlectorAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: Dipole) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for FlectorAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: DipoleAligningOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for FlectorAtInfinity {
    type Output = Infinity;

    fn meet(self, other: DipoleAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for FlectorAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: DipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for FlectorAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: DipoleOnOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: DipoleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<DualNum> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn meet(self, other: DualNum) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for FlectorAtInfinity {
    type Output = Infinity;

    fn meet(self, other: FlatPoint) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for FlectorAtInfinity {
    type Output = Infinity;

    fn meet(self, other: FlatPointAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Line> for FlectorAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: Line) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<LineAtOrigin> for FlectorAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: LineAtOrigin) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn meet(self, other: Motor) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<MultiVector> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(0.0)
                    - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[0])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group6(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]) + Simd32x3::from(self.group0()[3]) * other.group7(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[1]]),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for FlectorAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: NullDipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Origin> for FlectorAtInfinity {
    type Output = Scalar;

    fn meet(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Rotor> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn meet(self, other: Rotor) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<RoundPoint> for FlectorAtInfinity {
    type Output = Scalar;

    fn meet(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group1()[0],
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for FlectorAtInfinity {
    type Output = Scalar;

    fn meet(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[0],
            },
        }
    }
}

impl Meet<Sphere> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * other.group0(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Transflector> for FlectorAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn meet(self, other: Translator) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for Horizon {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiCircleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for Horizon {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Meet<AntiScalar> for Horizon {
    type Output = Horizon;

    fn meet(self, other: AntiScalar) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for Horizon {
    type Output = Scalar;

    fn meet(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<Circle> for Horizon {
    type Output = DipoleAtInfinity;

    fn meet(self, other: Circle) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for Horizon {
    type Output = DipoleAtInfinity;

    fn meet(self, other: CircleAligningOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for Horizon {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: CircleAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for Horizon {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: CircleAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for Horizon {
    type Output = DipoleAtInfinity;

    fn meet(self, other: CircleOnOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for Horizon {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Dipole> for Horizon {
    type Output = AntiPlane;

    fn meet(self, other: Dipole) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for Horizon {
    type Output = AntiPlane;

    fn meet(self, other: DipoleAligningOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for Horizon {
    type Output = Infinity;

    fn meet(self, other: DipoleAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for Horizon {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: DipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for Horizon {
    type Output = AntiPlane;

    fn meet(self, other: DipoleOnOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for Horizon {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: DipoleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<DualNum> for Horizon {
    type Output = Horizon;

    fn meet(self, other: DualNum) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Meet<FlatPoint> for Horizon {
    type Output = Infinity;

    fn meet(self, other: FlatPoint) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for Horizon {
    type Output = Infinity;

    fn meet(self, other: FlatPointAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for Horizon {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, -other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Line> for Horizon {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: Line) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<LineAtOrigin> for Horizon {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: LineAtOrigin) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for Horizon {
    type Output = FlectorAtInfinity;

    fn meet(self, other: Motor) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<MultiVector> for Horizon {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, -other.group3()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()) * other.group6(),
                g5: Simd32x3::from(self.group0()) * other.group7(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group0()[1]]),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for Horizon {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for Horizon {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: NullDipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for Horizon {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Origin> for Horizon {
    type Output = Scalar;

    fn meet(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for Horizon {
    type Output = LineAtInfinity;

    fn meet(self, other: Plane) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for Horizon {
    type Output = LineAtInfinity;

    fn meet(self, other: PlaneAtOrigin) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Rotor> for Horizon {
    type Output = FlectorAtInfinity;

    fn meet(self, other: Rotor) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<RoundPoint> for Horizon {
    type Output = Scalar;

    fn meet(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group1()[0],
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for Horizon {
    type Output = Scalar;

    fn meet(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Meet<Sphere> for Horizon {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: Sphere) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Horizon {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: 0.0 - self.group0() * other.group0()[0],
            },
        }
    }
}

impl Meet<SphereOnOrigin> for Horizon {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: SphereOnOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Transflector> for Horizon {
    type Output = LineAtInfinity;

    fn meet(self, other: Transflector) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
            },
        }
    }
}

impl Meet<Translator> for Horizon {
    type Output = Horizon;

    fn meet(self, other: Translator) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiScalar> for Infinity {
    type Output = Infinity;

    fn meet(self, other: AntiScalar) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<DualNum> for Infinity {
    type Output = Infinity;

    fn meet(self, other: DualNum) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Meet<Motor> for Infinity {
    type Output = Infinity;

    fn meet(self, other: Motor) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<MultiVector> for Infinity {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([other.group10()[0], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group0()[1]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for Infinity {
    type Output = Scalar;

    fn meet(self, other: NullSphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Rotor> for Infinity {
    type Output = Infinity;

    fn meet(self, other: Rotor) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<Sphere> for Infinity {
    type Output = Scalar;

    fn meet(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group1()[0],
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Infinity {
    type Output = Scalar;

    fn meet(self, other: SphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Meet<SphereOnOrigin> for Infinity {
    type Output = Scalar;

    fn meet(self, other: SphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<Translator> for Infinity {
    type Output = Infinity;

    fn meet(self, other: Translator) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for Line {
    type Output = Scalar;

    fn meet(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for Line {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for Line {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for Line {
    type Output = Scalar;

    fn meet(self, other: AntiLineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for Line {
    type Output = Line;

    fn meet(self, other: AntiScalar) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for Line {
    type Output = RoundPoint;

    fn meet(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for Line {
    type Output = RoundPoint;

    fn meet(self, other: CircleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for Line {
    type Output = AntiPlane;

    fn meet(self, other: CircleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for Line {
    type Output = RoundPoint;

    fn meet(self, other: CircleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for Line {
    type Output = RoundPoint;

    fn meet(self, other: CircleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for Line {
    type Output = RoundPoint;

    fn meet(self, other: CircleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Meet<Dipole> for Line {
    type Output = Scalar;

    fn meet(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for Line {
    type Output = Scalar;

    fn meet(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for Line {
    type Output = Scalar;

    fn meet(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for Line {
    type Output = Scalar;

    fn meet(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for Line {
    type Output = Scalar;

    fn meet(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for Line {
    type Output = Scalar;

    fn meet(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DualNum> for Line {
    type Output = Line;

    fn meet(self, other: DualNum) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for Line {
    type Output = FlatPoint;

    fn meet(self, other: Flector) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for Line {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: FlectorAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Horizon> for Line {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: Horizon) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for Line {
    type Output = Infinity;

    fn meet(self, other: Line) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<LineAtInfinity> for Line {
    type Output = Infinity;

    fn meet(self, other: LineAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<LineAtOrigin> for Line {
    type Output = Infinity;

    fn meet(self, other: LineAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for Line {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for Line {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group3()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]]),
                g4: self.group1() * Simd32x3::from(other.group10()[0]),
                g5: self.group0() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[1]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for Line {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for Line {
    type Output = Scalar;

    fn meet(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for Line {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for Line {
    type Output = FlatPoint;

    fn meet(self, other: Plane) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for Line {
    type Output = FlatPoint;

    fn meet(self, other: PlaneAtOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for Line {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for Line {
    type Output = Dipole;

    fn meet(self, other: Sphere) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: self.group1() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Line {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: SphereAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
                g2: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for Line {
    type Output = Dipole;

    fn meet(self, other: SphereOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for Line {
    type Output = FlatPoint;

    fn meet(self, other: Transflector) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Translator> for Line {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for LineAtInfinity {
    type Output = Scalar;

    fn meet(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for LineAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<AntiScalar> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn meet(self, other: AntiScalar) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for LineAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: Circle) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for LineAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: CircleAligningOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for LineAtInfinity {
    type Output = Infinity;

    fn meet(self, other: CircleAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleAtOrigin> for LineAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for LineAtInfinity {
    type Output = AntiPlane;

    fn meet(self, other: CircleOnOrigin) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for LineAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Dipole> for LineAtInfinity {
    type Output = Scalar;

    fn meet(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for LineAtInfinity {
    type Output = Scalar;

    fn meet(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for LineAtInfinity {
    type Output = Scalar;

    fn meet(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for LineAtInfinity {
    type Output = Scalar;

    fn meet(self, other: DipoleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for LineAtInfinity {
    type Output = Scalar;

    fn meet(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DualNum> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn meet(self, other: DualNum) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for LineAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: Flector) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<Line> for LineAtInfinity {
    type Output = Infinity;

    fn meet(self, other: Line) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<LineAtOrigin> for LineAtInfinity {
    type Output = Infinity;

    fn meet(self, other: LineAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for LineAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for LineAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group3()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group10()[0]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for LineAtInfinity {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for LineAtInfinity {
    type Output = Scalar;

    fn meet(self, other: NullDipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for LineAtInfinity {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for LineAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: Plane) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for LineAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: PlaneAtOrigin) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for LineAtInfinity {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for LineAtInfinity {
    type Output = DipoleAtInfinity;

    fn meet(self, other: Sphere) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for LineAtInfinity {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for LineAtInfinity {
    type Output = DipoleAtInfinity;

    fn meet(self, other: SphereOnOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for LineAtInfinity {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: Transflector) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<Translator> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn meet(self, other: Translator) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for LineAtOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiCircleOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for LineAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for LineAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for LineAtOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiLineAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn meet(self, other: AntiScalar) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for LineAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Circle) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group2()[3]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for LineAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: CircleAligningOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for LineAtOrigin {
    type Output = AntiPlane;

    fn meet(self, other: CircleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for LineAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: CircleAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for LineAtOrigin {
    type Output = Origin;

    fn meet(self, other: CircleOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for LineAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: CircleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Meet<Dipole> for LineAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for LineAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for LineAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DualNum> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn meet(self, other: DualNum) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for LineAtOrigin {
    type Output = FlatPoint;

    fn meet(self, other: Flector) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for LineAtOrigin {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: FlectorAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Horizon> for LineAtOrigin {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: Horizon) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for LineAtOrigin {
    type Output = Infinity;

    fn meet(self, other: Line) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<LineAtInfinity> for LineAtOrigin {
    type Output = Infinity;

    fn meet(self, other: LineAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for LineAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for LineAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group8()[3]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]]),
                g4: Simd32x3::from(0.0),
                g5: self.group0() * Simd32x3::from(other.group10()[1]),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[1]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for LineAtOrigin {
    type Output = Origin;

    fn meet(self, other: NullCircleAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for LineAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for LineAtOrigin {
    type Output = FlatPoint;

    fn meet(self, other: Plane) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for LineAtOrigin {
    type Output = FlatPointAtOrigin;

    fn meet(self, other: PlaneAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Rotor> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn meet(self, other: Rotor) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Sphere> for LineAtOrigin {
    type Output = DipoleAligningOrigin;

    fn meet(self, other: Sphere) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for LineAtOrigin {
    type Output = DipoleAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for LineAtOrigin {
    type Output = DipoleOnOrigin;

    fn meet(self, other: SphereOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Transflector> for LineAtOrigin {
    type Output = FlatPoint;

    fn meet(self, other: Transflector) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<Translator> for LineAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiPlane> for Motor {
    type Output = AntiPlane;

    fn meet(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiPlaneAtOrigin> for Motor {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiScalar> for Motor {
    type Output = Motor;

    fn meet(self, other: AntiScalar) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for Motor {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Circle> for Motor {
    type Output = MultiVector;

    fn meet(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[3]) * other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for Motor {
    type Output = MultiVector;

    fn meet(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(self.group0()[3]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Dipole> for Motor {
    type Output = MultiVector;

    fn meet(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for Motor {
    type Output = MultiVector;

    fn meet(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[3]) * other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DualNum> for Motor {
    type Output = MultiVector;

    fn meet(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlatPoint> for Motor {
    type Output = FlatPoint;

    fn meet(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for Motor {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for Motor {
    type Output = FlatPointAtOrigin;

    fn meet(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for Motor {
    type Output = Flector;

    fn meet(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * other.group0()
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for Motor {
    type Output = FlectorAtInfinity;

    fn meet(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Horizon> for Motor {
    type Output = FlectorAtInfinity;

    fn meet(self, other: Horizon) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Infinity> for Motor {
    type Output = Infinity;

    fn meet(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Line> for Motor {
    type Output = MultiVector;

    fn meet(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<LineAtInfinity> for Motor {
    type Output = MultiVector;

    fn meet(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<LineAtOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Motor> for Motor {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0])
                    + Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                        * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for Motor {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group0()
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group3()[2], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group1()
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group2()
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]])
                    + Simd32x4::from(self.group0()[3]) * other.group3(),
                g4: Simd32x3::from(self.group0()[3]) * other.group4() + self.group1() * Simd32x3::from(other.group10()[0]),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group0()[3]) * other.group5()
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0]),
                g6: Simd32x3::from(self.group0()[3]) * other.group6(),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]) + Simd32x3::from(self.group0()[3]) * other.group7(),
                g8: Simd32x4::from(self.group0()[3]) * other.group8()
                    + Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                        * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(self.group0()[3]) * other.group9(),
                g10: Simd32x2::from(self.group0()[3]) * other.group10(),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Meet<Origin> for Motor {
    type Output = Origin;

    fn meet(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for Motor {
    type Output = Flector;

    fn meet(self, other: Plane) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for Motor {
    type Output = Flector;

    fn meet(self, other: PlaneAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for Motor {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<RoundPoint> for Motor {
    type Output = RoundPoint;

    fn meet(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for Motor {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Scalar> for Motor {
    type Output = Scalar;

    fn meet(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Sphere> for Motor {
    type Output = MultiVector;

    fn meet(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[0], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[0], -other.group0()[2]]),
                g4: self.group1() * Simd32x3::from(other.group1()[0]),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[3]) * other.group0(),
                g10: Simd32x2::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for Motor {
    type Output = MultiVector;

    fn meet(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
                g4: self.group1() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for Motor {
    type Output = Flector;

    fn meet(self, other: Transflector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<Translator> for Motor {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0])
                    + Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                        * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group10()[1]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[1]) * other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group0()[3], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: self.group7() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group10()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group0(), 0.0]),
                g1: self.group7() * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group0()),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[1]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiPlane> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + Simd32x2::from(self.group10()[0]) * Simd32x2::from([other.group0()[3], 0.0]),
                g1: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiPlaneAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiScalar> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: AntiScalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x2::from(other.group0()),
                g3: self.group3() * Simd32x4::from(other.group0()),
                g4: self.group4() * Simd32x3::from(other.group0()),
                g5: self.group5() * Simd32x3::from(other.group0()),
                g6: self.group6() * Simd32x3::from(other.group0()),
                g7: self.group7() * Simd32x3::from(other.group0()),
                g8: self.group8() * Simd32x4::from(other.group0()),
                g9: self.group9() * Simd32x3::from(other.group0()),
                g10: self.group10() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + Simd32x2::from(self.group10()[1]) * Simd32x2::from([other.group0()[3], 0.0]),
                g1: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Circle> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group2()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group2()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group2()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group2()[3], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + self.group7() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group8()[3]) * other.group1(),
                g2: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group7()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group7()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group7()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g4: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    + Simd32x3::from(self.group10()[1]) * other.group0(),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group10()[1]) * other.group1(),
                g6: Simd32x3::from(self.group0()[1]) * other.group0(),
                g7: Simd32x3::from(self.group0()[1]) * other.group1(),
                g8: Simd32x4::from(self.group0()[1]) * other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group2()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group2()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group2()[2], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group8()[3]) * other.group1(),
                g2: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group7()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group7()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group7()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g4: Simd32x3::from(self.group10()[0]) * other.group2() + Simd32x3::from(self.group10()[1]) * other.group0(),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group10()[1]) * other.group1(),
                g6: Simd32x3::from(self.group0()[1]) * other.group0(),
                g7: Simd32x3::from(self.group0()[1]) * other.group1(),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group1()[3], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group7() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group8()[3]) * other.group0(),
                g2: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[1]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[1]) * other.group0(),
                g8: Simd32x4::from(self.group0()[1]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group7()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group7()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group7()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(self.group10()[0]) * other.group1() + Simd32x3::from(self.group10()[1]) * other.group0(),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(self.group0()[1]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group8()[3]) * other.group1(),
                g2: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g4: Simd32x3::from(self.group10()[1]) * other.group0(),
                g5: Simd32x3::from(self.group10()[1]) * other.group1(),
                g6: Simd32x3::from(self.group0()[1]) * other.group0(),
                g7: Simd32x3::from(self.group0()[1]) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group1()[3], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + self.group7() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group7()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group7()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group7()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group10()[1]) * other.group0(),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(self.group0()[1]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[1]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Dipole> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group2()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group2()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group2()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group2()[3], 0.0]),
                g1: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    - Simd32x3::from(self.group10()[1]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + self.group10() * Simd32x2::from(other.group2()[3]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(self.group0()[1]) * other.group1(),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group1()[3], 0.0]),
                g1: Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    - Simd32x3::from(self.group10()[1]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + self.group10() * Simd32x2::from(other.group1()[3]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group1()[3], 0.0]),
                g1: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + self.group10() * Simd32x2::from(other.group1()[3]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(self.group0()[1]) * other.group0(),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group10()[0]) * other.group1() - Simd32x3::from(self.group10()[1]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[1]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group10()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + self.group10() * Simd32x2::from(other.group0()[3]),
                g3: Simd32x4::from(self.group0()[1]) * other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group2()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group2()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group2()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[0]) * other.group2()
                    - Simd32x3::from(self.group10()[1]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[1]) * other.group1(),
                g5: Simd32x3::from(self.group0()[1]) * other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DualNum> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[1], 0.0]) + Simd32x2::from(self.group0()[1]) * other.group0(),
                g1: self.group1() * Simd32x3::from(other.group0()[1]),
                g2: self.group2() * Simd32x2::from(other.group0()[1]),
                g3: self.group3() * Simd32x4::from(other.group0()[1]),
                g4: self.group4() * Simd32x3::from(other.group0()[1]),
                g5: self.group5() * Simd32x3::from(other.group0()[1]),
                g6: self.group6() * Simd32x3::from(other.group0()[1]),
                g7: self.group7() * Simd32x3::from(other.group0()[1]),
                g8: self.group8() * Simd32x4::from(other.group0()[1]),
                g9: self.group9() * Simd32x3::from(other.group0()[1]),
                g10: self.group10() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + self.group10() * Simd32x2::from(other.group0()[3]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group10()[0]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[1]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: self.group10() * Simd32x2::from(other.group0()),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Flector> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group1()[3], 0.0])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group0()[3], 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from([self.group3()[2], self.group3()[3]]) * Simd32x2::from([-other.group1()[2], other.group1()[3]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + self.group10() * Simd32x2::from(other.group0()[3]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]])
                    + Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group6() * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])
                    + self.group7() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from([self.group10()[1], self.group10()[1], self.group10()[1], self.group10()[0]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group0()[3], 0.0])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: self.group6() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])
                    + self.group7() * Simd32x3::from(other.group0()[3]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Meet<Horizon> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: self.group6() * Simd32x3::from(other.group0()),
                g5: self.group7() * Simd32x3::from(other.group0()),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Meet<Infinity> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group10()[0]) * Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Line> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group8()[3]) * other.group0(),
                g2: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group10()[0]) * other.group1(),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[1]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[1]) * other.group0(),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<LineAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group10()[0]) * other.group0(),
                g5: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<LineAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group8()[3]) * other.group0(),
                g2: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group10()[1]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[1]) * other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Motor> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: self.group1() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: self.group2() * Simd32x2::from(other.group0()[3])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: self.group3() * Simd32x4::from(other.group0()[3])
                    + Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: self.group4() * Simd32x3::from(other.group0()[3]) + Simd32x3::from(self.group10()[0]) * other.group1(),
                g5: self.group5() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group6() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])
                    + self.group7() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0])
                    + self.group8() * Simd32x4::from(other.group0()[3]),
                g9: self.group9() * Simd32x3::from(other.group0()[3]),
                g10: self.group10() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[1]) * other.group0()
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group9()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group9()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group9()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group10()[1], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group10()[0], 0.0])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group8()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group8()[3], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group5()[2], 0.0])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group3()[2], 0.0])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group3()[3], 0.0])
                    + Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group10()[0]) * Simd32x2::from([other.group2()[1], 0.0])
                    + Simd32x2::from(self.group10()[1]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[1]) * other.group1()
                    + self.group1() * Simd32x3::from(other.group0()[1])
                    + Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0])
                    - self.group5() * Simd32x3::from(other.group10()[0])
                    + Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + self.group7() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0])
                    + Simd32x3::from(self.group8()[3]) * other.group7()
                    + Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0])
                    + Simd32x3::from(self.group10()[0]) * other.group5()
                    - Simd32x3::from(self.group10()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()[1]) * other.group2()
                    + self.group2() * Simd32x2::from(other.group0()[1])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group9()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * other.group10() * Simd32x2::from([-1.0, 1.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group7()[2], 0.0])
                    - Simd32x2::from(self.group7()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group7()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group7()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group7()[2]])
                    + Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]])
                    + self.group10() * Simd32x2::from(other.group3()[3]),
                g3: Simd32x4::from(self.group0()[1]) * other.group3()
                    + self.group3() * Simd32x4::from(other.group0()[1])
                    + Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]])
                    + Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[1]) * other.group4()
                    + self.group4() * Simd32x3::from(other.group0()[1])
                    + self.group6() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group10()[0])
                    - Simd32x3::from(self.group8()[3]) * other.group9()
                    - self.group9() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]])
                    + Simd32x3::from(self.group10()[1]) * other.group6(),
                g5: Simd32x3::from(self.group0()[1]) * other.group5()
                    + self.group5() * Simd32x3::from(other.group0()[1])
                    + self.group7() * Simd32x3::from(other.group10()[1])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0])
                    + Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group10()[1]) * other.group7(),
                g6: Simd32x3::from(self.group0()[1]) * other.group6() + self.group6() * Simd32x3::from(other.group0()[1]) - self.group9() * Simd32x3::from(other.group10()[0])
                    + Simd32x3::from(self.group10()[0]) * other.group9(),
                g7: Simd32x3::from(self.group0()[1]) * other.group7()
                    + self.group7() * Simd32x3::from(other.group0()[1])
                    + Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: Simd32x4::from(self.group0()[1]) * other.group8()
                    + self.group8() * Simd32x4::from(other.group0()[1])
                    + Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                        * Simd32x4::from([other.group10()[1], other.group10()[1], other.group10()[1], 0.0])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group10()[1]])
                    - Simd32x4::from(self.group10()[1]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from(self.group0()[1]) * other.group9() + self.group9() * Simd32x3::from(other.group0()[1]),
                g10: Simd32x2::from(self.group0()[1]) * other.group10() + self.group10() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group5()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group7()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(self.group10()[1]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[1]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group8()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group10()[1]) * other.group0(),
                g2: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0]),
                g3: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0) - self.group5() * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group0(), 0.0]),
                g3: Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group7()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
                g4: Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group0()),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group0()),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group10()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Meet<Origin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group10()[1]) * Simd32x2::from([other.group0(), 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Plane> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group0()[3], 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from([self.group3()[2], self.group3()[3]]) * Simd32x2::from([-other.group0()[2], other.group0()[3]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
                g4: self.group6() * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: self.group7() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from([self.group10()[1], self.group10()[1], self.group10()[1], self.group10()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0]),
                g1: Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from(self.group8()[3]) * other.group0(),
                g5: Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(self.group10()[0]) * other.group0(),
                g7: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from(self.group10()[1]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(self.group0()[1]) * other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Rotor> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: self.group1() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: self.group2() * Simd32x2::from(other.group0()[3])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: self.group3() * Simd32x4::from(other.group0()[3])
                    + Simd32x4::from(self.group9()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group9()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group9()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: self.group4() * Simd32x3::from(other.group0()[3]),
                g5: self.group5() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group10()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: self.group6() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])
                    + self.group7() * Simd32x3::from(other.group0()[3]),
                g8: self.group8() * Simd32x4::from(other.group0()[3]),
                g9: self.group9() * Simd32x3::from(other.group0()[3]),
                g10: self.group10() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<RoundPoint> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + Simd32x2::from(self.group10()[0]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group10()[1]) * Simd32x2::from([other.group1()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x2::from(self.group0()[1]) * other.group1(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group10()[0]) * Simd32x2::from([other.group0()[1], 0.0]) + Simd32x2::from(self.group10()[1]) * Simd32x2::from([other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[1]) * other.group0(),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Scalar> for MultiVector {
    type Output = Scalar;

    fn meet(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Meet<Sphere> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group1()[0], 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - self.group5() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([other.group1()[0], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, other.group1()[0], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[0], -other.group0()[2]]),
                g4: self.group6() * Simd32x3::from(other.group1()[1]) + Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group1()[0])
                    - Simd32x3::from(self.group8()[3]) * other.group0(),
                g5: self.group7() * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group1()[0]) + Simd32x3::from(self.group10()[0]) * other.group0(),
                g7: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    - Simd32x4::from(self.group10()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
                g9: Simd32x3::from(self.group0()[1]) * other.group0(),
                g10: Simd32x2::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group0()[1], 0.0]) + Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()[1]) - self.group5() * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(self.group3()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
                g3: Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group7()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: self.group6() * Simd32x3::from(other.group0()[1]) + Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group0()[0]),
                g5: self.group7() * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group10()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group10()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group0()[3], 0.0]),
                g1: Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    - self.group5() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([-other.group0()[3], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
                g4: Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0) - self.group9() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group10()[1]) * other.group0(),
                g9: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group1()[3], 0.0])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group4()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group4()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group10()[0]) * other.group0(),
                g2: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from([self.group3()[2], self.group3()[3]]) * Simd32x2::from([-other.group1()[2], other.group1()[3]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(self.group6()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group6()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group6()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group7()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group7()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group7()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]]),
                g4: self.group6() * Simd32x3::from(other.group1()[3])
                    - Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g5: Simd32x3::from(self.group0()[1]) * other.group0()
                    + self.group7() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group8()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group8()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g6: Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group9()[0]])
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from([self.group10()[1], self.group10()[1], self.group10()[1], self.group10()[0]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[3]]),
            },
        }
    }
}

impl Meet<Translator> for MultiVector {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: self.group1() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group6()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group6()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: self.group2() * Simd32x2::from(other.group0()[3])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: self.group3() * Simd32x4::from(other.group0()[3]),
                g4: self.group4() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group10()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: self.group5() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group9()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group9()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group9()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g6: self.group6() * Simd32x3::from(other.group0()[3]),
                g7: self.group7() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0])
                    + self.group8() * Simd32x4::from(other.group0()[3]),
                g9: self.group9() * Simd32x3::from(other.group0()[3]),
                g10: self.group10() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiScalar> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn meet(self, other: AntiScalar) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for NullCircleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Circle) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for NullCircleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: CircleAligningOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for NullCircleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: CircleAtInfinity) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for NullCircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for NullCircleAtOrigin {
    type Output = Origin;

    fn meet(self, other: CircleOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<Dipole> for NullCircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Dipole) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for NullCircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for NullCircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for NullCircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: DipoleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Meet<DualNum> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn meet(self, other: DualNum) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for NullCircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for NullCircleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: FlatPointAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Flector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for NullCircleAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: Horizon) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for NullCircleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Line) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for NullCircleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: LineAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for NullCircleAtOrigin {
    type Output = Origin;

    fn meet(self, other: LineAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group5()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group5()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group5()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group7()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group7()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group7()[2], 0.0]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group9()[2], -other.group9()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group9()[2], 0.0, other.group9()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group9()[1], -other.group9()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group10()[1]),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[1]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Plane> for NullCircleAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: Plane) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for NullCircleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: PlaneAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Sphere> for NullCircleAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: Sphere) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for NullCircleAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for NullCircleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: SphereOnOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g4: self.group0() * Simd32x3::from(other.group1()[3]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiScalar> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: AntiScalar) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Circle> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Circle) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAligningOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Meet<CircleAtInfinity> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<CircleAtOrigin> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: CircleOrthogonalOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<DualNum> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: DualNum) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for NullDipoleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Flector) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for NullDipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: FlectorAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Horizon> for NullDipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: Horizon) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Line) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Meet<LineAtInfinity> for NullDipoleAtOrigin {
    type Output = Scalar;

    fn meet(self, other: LineAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group8()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group8()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group8()[2], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group10()[1]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group9()[2], 0.0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Plane> for NullDipoleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Plane) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for NullDipoleAtOrigin {
    type Output = Origin;

    fn meet(self, other: PlaneAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Rotor> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: Rotor) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Sphere> for NullDipoleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Sphere) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for NullDipoleAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for NullDipoleAtOrigin {
    type Output = Origin;

    fn meet(self, other: SphereOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Transflector> for NullDipoleAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Transflector) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<Translator> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiPlane> for NullSphereAtOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiScalar> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn meet(self, other: AntiScalar) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Circle> for NullSphereAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: Circle) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for NullSphereAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: CircleAligningOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
                g1: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for NullSphereAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: CircleAtInfinity) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for NullSphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: CircleAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for NullSphereAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: CircleOnOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for NullSphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
            },
        }
    }
}

impl Meet<Dipole> for NullSphereAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: Dipole) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for NullSphereAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: DipoleAligningOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for NullSphereAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: DipoleAtInfinity) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for NullSphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: DipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for NullSphereAtOrigin {
    type Output = Origin;

    fn meet(self, other: DipoleOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for NullSphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: DipoleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Meet<DualNum> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn meet(self, other: DualNum) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Meet<FlatPoint> for NullSphereAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: FlatPoint) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for NullSphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: FlatPointAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for NullSphereAtOrigin {
    type Output = Origin;

    fn meet(self, other: FlatPointAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for NullSphereAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: Horizon) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Infinity> for NullSphereAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Infinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Line> for NullSphereAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: Line) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Meet<LineAtInfinity> for NullSphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: LineAtInfinity) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<LineAtOrigin> for NullSphereAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: LineAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()) * other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<MultiVector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([other.group2()[1], 0.0]),
                g1: Simd32x3::from(self.group0()) * other.group5(),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([other.group3()[3], 0.0]),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], 0.0]),
                g4: Simd32x3::from(self.group0()) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()) * other.group9(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group10()[1]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[1], 0.0]),
            },
        }
    }
}

impl Meet<Plane> for NullSphereAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn meet(self, other: Plane) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for NullSphereAtOrigin {
    type Output = NullCircleAtOrigin;

    fn meet(self, other: PlaneAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Meet<Rotor> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<RoundPoint> for NullSphereAtOrigin {
    type Output = Scalar;

    fn meet(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group1()[1],
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for NullSphereAtOrigin {
    type Output = Scalar;

    fn meet(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Meet<Sphere> for NullSphereAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn meet(self, other: Sphere) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for NullSphereAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Meet<SphereOnOrigin> for NullSphereAtOrigin {
    type Output = NullCircleAtOrigin;

    fn meet(self, other: SphereOnOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Meet<Transflector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()) * other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<AntiScalar> for Origin {
    type Output = Origin;

    fn meet(self, other: AntiScalar) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<DualNum> for Origin {
    type Output = Origin;

    fn meet(self, other: DualNum) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Meet<Flector> for Origin {
    type Output = Scalar;

    fn meet(self, other: Flector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group1()[3],
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for Origin {
    type Output = Scalar;

    fn meet(self, other: FlectorAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<Horizon> for Origin {
    type Output = Scalar;

    fn meet(self, other: Horizon) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for Origin {
    type Output = Origin;

    fn meet(self, other: Motor) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<MultiVector> for Origin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([other.group10()[1], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[1], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Plane> for Origin {
    type Output = Scalar;

    fn meet(self, other: Plane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<Rotor> for Origin {
    type Output = Origin;

    fn meet(self, other: Rotor) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<Sphere> for Origin {
    type Output = Scalar;

    fn meet(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group1()[1],
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Origin {
    type Output = Scalar;

    fn meet(self, other: SphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Meet<Transflector> for Origin {
    type Output = Scalar;

    fn meet(self, other: Transflector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group1()[3],
            },
        }
    }
}

impl Meet<Translator> for Origin {
    type Output = Origin;

    fn meet(self, other: Translator) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for Plane {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiCircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for Plane {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for Plane {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for Plane {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiLineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<AntiPlane> for Plane {
    type Output = Scalar;

    fn meet(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiPlaneAtOrigin> for Plane {
    type Output = Scalar;

    fn meet(self, other: AntiPlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for Plane {
    type Output = Plane;

    fn meet(self, other: AntiScalar) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for Plane {
    type Output = Scalar;

    fn meet(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<Circle> for Plane {
    type Output = Dipole;

    fn meet(self, other: Circle) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for Plane {
    type Output = Dipole;

    fn meet(self, other: CircleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for Plane {
    type Output = DipoleAtInfinity;

    fn meet(self, other: CircleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for Plane {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: CircleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for Plane {
    type Output = Dipole;

    fn meet(self, other: CircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for Plane {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<Dipole> for Plane {
    type Output = RoundPoint;

    fn meet(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group2()[3]]),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for Plane {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group1()[3]]),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for Plane {
    type Output = AntiPlane;

    fn meet(self, other: DipoleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[3]]),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for Plane {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for Plane {
    type Output = RoundPoint;

    fn meet(self, other: DipoleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from([self.group0()[2], self.group0()[3]]) * Simd32x2::from([other.group0()[2], -other.group0()[3]]),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for Plane {
    type Output = RoundPoint;

    fn meet(self, other: DipoleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Meet<DualNum> for Plane {
    type Output = Plane;

    fn meet(self, other: DualNum) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for Plane {
    type Output = Infinity;

    fn meet(self, other: FlatPoint) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for Plane {
    type Output = Infinity;

    fn meet(self, other: FlatPointAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for Plane {
    type Output = Infinity;

    fn meet(self, other: FlatPointAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for Plane {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for Plane {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for Plane {
    type Output = LineAtInfinity;

    fn meet(self, other: Horizon) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for Plane {
    type Output = FlatPoint;

    fn meet(self, other: Line) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for Plane {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: LineAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for Plane {
    type Output = FlatPoint;

    fn meet(self, other: LineAtOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Motor> for Plane {
    type Output = Flector;

    fn meet(self, other: Motor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for Plane {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group6(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group7(),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[0]),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group10()[1], other.group10()[1], other.group10()[1], 0.0])
                    - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[1]]),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for Plane {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for Plane {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: NullDipoleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], other.group0()[2]]),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for Plane {
    type Output = AntiDipoleOnOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Origin> for Plane {
    type Output = Scalar;

    fn meet(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for Plane {
    type Output = Line;

    fn meet(self, other: Plane) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for Plane {
    type Output = Line;

    fn meet(self, other: PlaneAtOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Rotor> for Plane {
    type Output = Flector;

    fn meet(self, other: Rotor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
                g1: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<RoundPoint> for Plane {
    type Output = Scalar;

    fn meet(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[0],
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for Plane {
    type Output = Scalar;

    fn meet(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[0],
            },
        }
    }
}

impl Meet<Sphere> for Plane {
    type Output = Circle;

    fn meet(self, other: Sphere) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Plane {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: SphereAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], -other.group0()[0]]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for Plane {
    type Output = Circle;

    fn meet(self, other: SphereOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Transflector> for Plane {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for Plane {
    type Output = Transflector;

    fn meet(self, other: Translator) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for PlaneAtOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiCircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for PlaneAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for PlaneAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for PlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiLineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<AntiPlane> for PlaneAtOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiPlaneAtOrigin> for PlaneAtOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiPlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn meet(self, other: AntiScalar) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for PlaneAtOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Circle> for PlaneAtOrigin {
    type Output = Dipole;

    fn meet(self, other: Circle) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group2()[3]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for PlaneAtOrigin {
    type Output = DipoleAligningOrigin;

    fn meet(self, other: CircleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for PlaneAtOrigin {
    type Output = DipoleAtInfinity;

    fn meet(self, other: CircleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for PlaneAtOrigin {
    type Output = DipoleAtOrigin;

    fn meet(self, other: CircleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for PlaneAtOrigin {
    type Output = DipoleOnOrigin;

    fn meet(self, other: CircleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for PlaneAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3]),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<Dipole> for PlaneAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for PlaneAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: DipoleAligningOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for PlaneAtOrigin {
    type Output = AntiPlane;

    fn meet(self, other: DipoleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for PlaneAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: DipoleAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for PlaneAtOrigin {
    type Output = Origin;

    fn meet(self, other: DipoleOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for PlaneAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: DipoleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Meet<DualNum> for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn meet(self, other: DualNum) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for PlaneAtOrigin {
    type Output = Infinity;

    fn meet(self, other: FlatPoint) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for PlaneAtOrigin {
    type Output = Infinity;

    fn meet(self, other: FlatPointAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Flector> for PlaneAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for PlaneAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for PlaneAtOrigin {
    type Output = LineAtInfinity;

    fn meet(self, other: Horizon) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for PlaneAtOrigin {
    type Output = FlatPoint;

    fn meet(self, other: Line) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for PlaneAtOrigin {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: LineAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for PlaneAtOrigin {
    type Output = FlatPointAtOrigin;

    fn meet(self, other: LineAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Motor> for PlaneAtOrigin {
    type Output = Flector;

    fn meet(self, other: Motor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<MultiVector> for PlaneAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]]),
                g4: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group8()[3]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0]),
                g6: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group10()[0]),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group10()[1], other.group10()[1], other.group10()[1], 0.0]),
                g9: self.group0() * Simd32x3::from(other.group0()[1]),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for PlaneAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for PlaneAtOrigin {
    type Output = Origin;

    fn meet(self, other: NullDipoleAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for PlaneAtOrigin {
    type Output = NullCircleAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for PlaneAtOrigin {
    type Output = Line;

    fn meet(self, other: Plane) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for PlaneAtOrigin {
    type Output = LineAtOrigin;

    fn meet(self, other: PlaneAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for PlaneAtOrigin {
    type Output = Flector;

    fn meet(self, other: Rotor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<RoundPoint> for PlaneAtOrigin {
    type Output = Scalar;

    fn meet(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Sphere> for PlaneAtOrigin {
    type Output = CircleAligningOrigin;

    fn meet(self, other: Sphere) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: self.group0() * Simd32x3::from(other.group1()[1]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for PlaneAtOrigin {
    type Output = CircleAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for PlaneAtOrigin {
    type Output = CircleOnOrigin;

    fn meet(self, other: SphereOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for PlaneAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for PlaneAtOrigin {
    type Output = Transflector;

    fn meet(self, other: Translator) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiPlane> for Rotor {
    type Output = AntiPlane;

    fn meet(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiPlaneAtOrigin> for Rotor {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiScalar> for Rotor {
    type Output = Rotor;

    fn meet(self, other: AntiScalar) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for Rotor {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Circle> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[3]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[3]) * other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(self.group0()[3]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Dipole> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for Rotor {
    type Output = DipoleAligningOrigin;

    fn meet(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(self.group0()[3]) * other.group0(),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for Rotor {
    type Output = DipoleAtOrigin;

    fn meet(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for Rotor {
    type Output = DipoleOnOrigin;

    fn meet(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[3]) * other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DualNum> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlatPoint> for Rotor {
    type Output = FlatPoint;

    fn meet(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for Rotor {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for Rotor {
    type Output = FlatPointAtOrigin;

    fn meet(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for Rotor {
    type Output = Flector;

    fn meet(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for Rotor {
    type Output = FlectorAtInfinity;

    fn meet(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Horizon> for Rotor {
    type Output = FlectorAtInfinity;

    fn meet(self, other: Horizon) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Infinity> for Rotor {
    type Output = Infinity;

    fn meet(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Line> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<LineAtInfinity> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<LineAtOrigin> for Rotor {
    type Output = LineAtOrigin;

    fn meet(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group8()[3]) + Simd32x3::from(self.group0()[3]) * other.group1(),
                g2: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], other.group8()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], other.group8()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], other.group8()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group2(),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group10()[0], 0.0, 0.0, -other.group9()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group10()[0], 0.0, -other.group9()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group10()[0], -other.group9()[2]])
                    + Simd32x4::from(self.group0()[3]) * other.group3(),
                g4: Simd32x3::from(self.group0()[3]) * other.group4(),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[1]) + Simd32x3::from(self.group0()[3]) * other.group5(),
                g6: Simd32x3::from(self.group0()[3]) * other.group6(),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]) + Simd32x3::from(self.group0()[3]) * other.group7(),
                g8: Simd32x4::from(self.group0()[3]) * other.group8(),
                g9: Simd32x3::from(self.group0()[3]) * other.group9(),
                g10: Simd32x2::from(self.group0()[3]) * other.group10(),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for Rotor {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Meet<Origin> for Rotor {
    type Output = Origin;

    fn meet(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for Rotor {
    type Output = Flector;

    fn meet(self, other: Plane) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
                g1: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for Rotor {
    type Output = Flector;

    fn meet(self, other: PlaneAtOrigin) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
                g1: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for Rotor {
    type Output = Rotor;

    fn meet(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<RoundPoint> for Rotor {
    type Output = RoundPoint;

    fn meet(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for Rotor {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Scalar> for Rotor {
    type Output = Scalar;

    fn meet(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Sphere> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[0], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[0], -other.group0()[2]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[3]) * other.group0(),
                g10: Simd32x2::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for Rotor {
    type Output = Flector;

    fn meet(self, other: Transflector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<Translator> for Rotor {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiScalar> for RoundPoint {
    type Output = RoundPoint;

    fn meet(self, other: AntiScalar) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Meet<DualNum> for RoundPoint {
    type Output = RoundPoint;

    fn meet(self, other: DualNum) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for RoundPoint {
    type Output = Scalar;

    fn meet(self, other: Flector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2] + self.group1()[0] * other.group1()[3],
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for RoundPoint {
    type Output = Scalar;

    fn meet(self, other: FlectorAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[3],
            },
        }
    }
}

impl Meet<Horizon> for RoundPoint {
    type Output = Scalar;

    fn meet(self, other: Horizon) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for RoundPoint {
    type Output = RoundPoint;

    fn meet(self, other: Motor) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for RoundPoint {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group9()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group9()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group10()[1], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group10()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
                g2: self.group1() * Simd32x2::from(other.group0()[1]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for RoundPoint {
    type Output = Scalar;

    fn meet(self, other: NullSphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[1] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for RoundPoint {
    type Output = Scalar;

    fn meet(self, other: Plane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[0] * other.group0()[3],
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for RoundPoint {
    type Output = Scalar;

    fn meet(self, other: PlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Rotor> for RoundPoint {
    type Output = RoundPoint;

    fn meet(self, other: Rotor) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Sphere> for RoundPoint {
    type Output = Scalar;

    fn meet(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0]
                    + self.group0()[1] * other.group0()[1]
                    + self.group0()[2] * other.group0()[2]
                    + self.group1()[0] * other.group1()[1]
                    + self.group1()[1] * other.group1()[0],
            },
        }
    }
}

impl Meet<SphereAtOrigin> for RoundPoint {
    type Output = Scalar;

    fn meet(self, other: SphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[1] + self.group1()[1] * other.group0()[0],
            },
        }
    }
}

impl Meet<SphereOnOrigin> for RoundPoint {
    type Output = Scalar;

    fn meet(self, other: SphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[1] * other.group0()[3],
            },
        }
    }
}

impl Meet<Transflector> for RoundPoint {
    type Output = Scalar;

    fn meet(self, other: Transflector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[0] + self.group0()[1] * other.group1()[1] + self.group0()[2] * other.group1()[2] + self.group1()[0] * other.group1()[3],
            },
        }
    }
}

impl Meet<Translator> for RoundPoint {
    type Output = RoundPoint;

    fn meet(self, other: Translator) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiScalar> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: AntiScalar) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Meet<DualNum> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: DualNum) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<Flector> for RoundPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Flector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[3],
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for RoundPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: FlectorAtInfinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[3],
            },
        }
    }
}

impl Meet<Horizon> for RoundPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Horizon) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: Motor) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group10()[1], 0.0]) + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group10()[0], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: self.group0() * Simd32x2::from(other.group0()[1]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for RoundPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: NullSphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for RoundPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Plane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[3],
            },
        }
    }
}

impl Meet<Rotor> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: Rotor) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<Sphere> for RoundPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Sphere) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[1] + self.group0()[1] * other.group1()[0],
            },
        }
    }
}

impl Meet<SphereAtOrigin> for RoundPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: SphereAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[1] + self.group0()[1] * other.group0()[0],
            },
        }
    }
}

impl Meet<SphereOnOrigin> for RoundPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: SphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[1] * other.group0()[3],
            },
        }
    }
}

impl Meet<Transflector> for RoundPointAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Transflector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[3],
            },
        }
    }
}

impl Meet<Translator> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: Translator) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiScalar> for Scalar {
    type Output = Scalar;

    fn meet(self, other: AntiScalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Meet<DualNum> for Scalar {
    type Output = Scalar;

    fn meet(self, other: DualNum) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Meet<Motor> for Scalar {
    type Output = Scalar;

    fn meet(self, other: Motor) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<MultiVector> for Scalar {
    type Output = Scalar;

    fn meet(self, other: MultiVector) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Meet<Rotor> for Scalar {
    type Output = Scalar;

    fn meet(self, other: Rotor) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<Translator> for Scalar {
    type Output = Scalar;

    fn meet(self, other: Translator) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for Sphere {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiCircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for Sphere {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for Sphere {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for Sphere {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiLineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<AntiPlane> for Sphere {
    type Output = Scalar;

    fn meet(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[0] * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiPlaneAtOrigin> for Sphere {
    type Output = Scalar;

    fn meet(self, other: AntiPlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for Sphere {
    type Output = Sphere;

    fn meet(self, other: AntiScalar) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for Sphere {
    type Output = Scalar;

    fn meet(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[1] * other.group0()[3],
            },
        }
    }
}

impl Meet<Circle> for Sphere {
    type Output = Dipole;

    fn meet(self, other: Circle) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group1(),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for Sphere {
    type Output = Dipole;

    fn meet(self, other: CircleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group1(),
                g1: Simd32x3::from(self.group1()[0]) * other.group2() + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for Sphere {
    type Output = Dipole;

    fn meet(self, other: CircleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for Sphere {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: CircleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group1()[0]) * other.group1() + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for Sphere {
    type Output = Dipole;

    fn meet(self, other: CircleOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group1(),
                g1: Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for Sphere {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<Dipole> for Sphere {
    type Output = RoundPoint;

    fn meet(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + self.group1() * Simd32x2::from(other.group2()[3]),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for Sphere {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + self.group1() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for Sphere {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + self.group1() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for Sphere {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group1() - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for Sphere {
    type Output = RoundPoint;

    fn meet(self, other: DipoleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for Sphere {
    type Output = RoundPoint;

    fn meet(self, other: DipoleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group2()
                    - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Meet<DualNum> for Sphere {
    type Output = Sphere;

    fn meet(self, other: DualNum) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for Sphere {
    type Output = RoundPoint;

    fn meet(self, other: FlatPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for Sphere {
    type Output = AntiPlane;

    fn meet(self, other: FlatPointAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for Sphere {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: FlatPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group1() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Meet<Flector> for Sphere {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + self.group1() * Simd32x2::from(other.group0()[3]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group1()[0]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for Sphere {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for Sphere {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: Horizon) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Meet<Infinity> for Sphere {
    type Output = Scalar;

    fn meet(self, other: Infinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0(),
            },
        }
    }
}

impl Meet<Line> for Sphere {
    type Output = Dipole;

    fn meet(self, other: Line) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group1()[0]) * other.group1(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for Sphere {
    type Output = DipoleAtInfinity;

    fn meet(self, other: LineAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for Sphere {
    type Output = DipoleAligningOrigin;

    fn meet(self, other: LineAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<Motor> for Sphere {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group1()[0]) * other.group1(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group0()[3]),
                g10: self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for Sphere {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group2()[1], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group5()
                    - Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]])
                    + self.group1() * Simd32x2::from(other.group3()[3]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], 0.0]),
                g4: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]])
                    + Simd32x3::from(self.group1()[1]) * other.group6(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group1()[1]) * other.group7(),
                g6: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group10()[0]) + Simd32x3::from(self.group1()[0]) * other.group9(),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group10()[1], other.group10()[1], other.group10()[1], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group10()[1]])
                    - Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: self.group0() * Simd32x3::from(other.group0()[1]),
                g10: self.group1() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for Sphere {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group1()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for Sphere {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: NullDipoleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for Sphere {
    type Output = AntiDipoleOnOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([-other.group0(), -other.group0(), -other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
            },
        }
    }
}

impl Meet<Origin> for Sphere {
    type Output = Scalar;

    fn meet(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[1] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for Sphere {
    type Output = Circle;

    fn meet(self, other: Plane) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group1()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for Sphere {
    type Output = CircleAligningOrigin;

    fn meet(self, other: PlaneAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<Rotor> for Sphere {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group0()[3]),
                g10: self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<RoundPoint> for Sphere {
    type Output = Scalar;

    fn meet(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0]
                    + self.group0()[1] * other.group0()[1]
                    + self.group0()[2] * other.group0()[2]
                    + self.group1()[0] * other.group1()[1]
                    + self.group1()[1] * other.group1()[0],
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for Sphere {
    type Output = Scalar;

    fn meet(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[1] + self.group1()[1] * other.group0()[0],
            },
        }
    }
}

impl Meet<Sphere> for Sphere {
    type Output = Circle;

    fn meet(self, other: Sphere) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[0]) + Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    - Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Sphere {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: SphereAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for Sphere {
    type Output = Circle;

    fn meet(self, other: SphereOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: Simd32x4::from(0.0) - Simd32x4::from(self.group1()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<Transflector> for Sphere {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group1()[0]) * other.group0(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group1()[0]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for Sphere {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group0()[3]),
                g10: self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for SphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiCircleOnOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for SphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Meet<AntiPlane> for SphereAtOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiScalar> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn meet(self, other: AntiScalar) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for SphereAtOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[1] * other.group0()[3],
            },
        }
    }
}

impl Meet<Circle> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: Circle) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    + Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: CircleAligningOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
                g1: Simd32x3::from(self.group0()[0]) * other.group2() + Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: CircleAtInfinity) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for SphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: CircleAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1() + Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: CircleOnOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
                g1: Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for SphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<Dipole> for SphereAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    - Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: self.group0() * Simd32x2::from(other.group2()[3]),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for SphereAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    - Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: self.group0() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for SphereAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: self.group0() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for SphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: DipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1() - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for SphereAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: DipoleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for SphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: DipoleOrthogonalOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group2() - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<DualNum> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn meet(self, other: DualNum) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for SphereAtOrigin {
    type Output = RoundPoint;

    fn meet(self, other: FlatPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for SphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: FlatPointAtInfinity) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for SphereAtOrigin {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: FlatPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Meet<Flector> for SphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: self.group0() * Simd32x2::from(other.group0()[3]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for SphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for SphereAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: Horizon) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Meet<Infinity> for SphereAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Infinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Meet<Line> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: Line) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
                g2: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<LineAtInfinity> for SphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: LineAtInfinity) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Meet<LineAtOrigin> for SphereAtOrigin {
    type Output = DipoleAtOrigin;

    fn meet(self, other: LineAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<Motor> for SphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[0]) * other.group1(),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for SphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group2()[1], 0.0]) + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * other.group5()
                    - Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: self.group0() * Simd32x2::from(other.group3()[3]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]])
                    + Simd32x3::from(self.group0()[1]) * other.group6(),
                g5: Simd32x3::from(self.group0()[1]) * other.group7(),
                g6: Simd32x3::from(self.group0()[0]) * other.group9(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group10()[1]])
                    - Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from(0.0),
                g10: self.group0() * Simd32x2::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for SphereAtOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for SphereAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: NullDipoleAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for SphereAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: 0.0 - self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Meet<Origin> for SphereAtOrigin {
    type Output = Scalar;

    fn meet(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for SphereAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: Plane) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for SphereAtOrigin {
    type Output = CircleAtOrigin;

    fn meet(self, other: PlaneAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<Rotor> for SphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<RoundPoint> for SphereAtOrigin {
    type Output = Scalar;

    fn meet(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group1()[1] + self.group0()[1] * other.group1()[0],
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for SphereAtOrigin {
    type Output = Scalar;

    fn meet(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[1] + self.group0()[1] * other.group0()[0],
            },
        }
    }
}

impl Meet<Sphere> for SphereAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: Sphere) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    - Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for SphereAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: SphereAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0()[0] * other.group0()[1] - self.group0()[1] * other.group0()[0],
            },
        }
    }
}

impl Meet<SphereOnOrigin> for SphereAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: SphereOnOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Meet<Transflector> for SphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for SphereAtOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for SphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiCircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for SphereOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn meet(self, other: AntiDipoleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for SphereOnOrigin {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for SphereOnOrigin {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiLineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<AntiPlane> for SphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<AntiPlaneAtOrigin> for SphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiPlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn meet(self, other: AntiScalar) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for SphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<Circle> for SphereOnOrigin {
    type Output = Dipole;

    fn meet(self, other: Circle) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group1(),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for SphereOnOrigin {
    type Output = Dipole;

    fn meet(self, other: CircleAligningOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group1(),
                g1: Simd32x3::from(self.group0()[3]) * other.group2(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group2()[2], -other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group2()[2], 0.0, other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[1], -other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for SphereOnOrigin {
    type Output = Dipole;

    fn meet(self, other: CircleAtInfinity) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for SphereOnOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: CircleAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group1(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for SphereOnOrigin {
    type Output = DipoleOnOrigin;

    fn meet(self, other: CircleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for SphereOnOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn meet(self, other: CircleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
            },
        }
    }
}

impl Meet<Dipole> for SphereOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group2()[3], 0.0]),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for SphereOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group1()[3], 0.0]),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for SphereOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAtInfinity) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from([self.group0()[3], self.group0()[2]]) * Simd32x2::from([other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for SphereOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for SphereOnOrigin {
    type Output = Origin;

    fn meet(self, other: DipoleOnOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for SphereOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: DipoleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group2(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Meet<DualNum> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn meet(self, other: DualNum) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for SphereOnOrigin {
    type Output = RoundPoint;

    fn meet(self, other: FlatPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from([self.group0()[3], self.group0()[2]]) * Simd32x2::from([other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for SphereOnOrigin {
    type Output = AntiPlane;

    fn meet(self, other: FlatPointAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for SphereOnOrigin {
    type Output = Origin;

    fn meet(self, other: FlatPointAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for SphereOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from([self.group0()[3], self.group0()[2]]) * Simd32x2::from([other.group0()[3], -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: self.group0() * Simd32x4::from(other.group1()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for SphereOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: self.group0() * Simd32x4::from(other.group0()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for SphereOnOrigin {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: Horizon) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<Infinity> for SphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: Infinity) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Line> for SphereOnOrigin {
    type Output = Dipole;

    fn meet(self, other: Line) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[3]) * other.group1(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for SphereOnOrigin {
    type Output = DipoleAtInfinity;

    fn meet(self, other: LineAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for SphereOnOrigin {
    type Output = DipoleOnOrigin;

    fn meet(self, other: LineAtOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Motor> for SphereOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<MultiVector> for SphereOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group2()[1], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group5(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group3()[3], 0.0]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], 0.0]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0]),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[0])
                    + Simd32x3::from(self.group0()[3]) * other.group9(),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: self.group0() * Simd32x4::from(other.group10()[1]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[1], 0.0]),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for SphereOnOrigin {
    type Output = NullDipoleAtOrigin;

    fn meet(self, other: NullCircleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for SphereOnOrigin {
    type Output = Origin;

    fn meet(self, other: NullDipoleAtOrigin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for SphereOnOrigin {
    type Output = NullCircleAtOrigin;

    fn meet(self, other: NullSphereAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Plane> for SphereOnOrigin {
    type Output = Circle;

    fn meet(self, other: Plane) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for SphereOnOrigin {
    type Output = CircleOnOrigin;

    fn meet(self, other: PlaneAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for SphereOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<RoundPoint> for SphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[1],
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for SphereOnOrigin {
    type Output = Scalar;

    fn meet(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0()[1],
            },
        }
    }
}

impl Meet<Sphere> for SphereOnOrigin {
    type Output = Circle;

    fn meet(self, other: Sphere) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g2: self.group0() * Simd32x4::from(other.group1()[1]),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for SphereOnOrigin {
    type Output = CircleOrthogonalOrigin;

    fn meet(self, other: SphereAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for SphereOnOrigin {
    type Output = CircleOnOrigin;

    fn meet(self, other: SphereOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for SphereOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: self.group0() * Simd32x4::from(other.group1()[3]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for SphereOnOrigin {
    type Output = MultiVector;

    fn meet(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for Transflector {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiCircleOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for Transflector {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for Transflector {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiLineAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<AntiPlane> for Transflector {
    type Output = Scalar;

    fn meet(self, other: AntiPlane) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiPlaneAtOrigin> for Transflector {
    type Output = Scalar;

    fn meet(self, other: AntiPlaneAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<AntiScalar> for Transflector {
    type Output = Transflector;

    fn meet(self, other: AntiScalar) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for Transflector {
    type Output = Scalar;

    fn meet(self, other: AntiSphereOnOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2] + self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<Circle> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group2()[2], -other.group2()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group2()[2], 0.0, other.group2()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group2()[1], -other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for Transflector {
    type Output = DipoleAtInfinity;

    fn meet(self, other: CircleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[3]),
                g1: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Dipole> for Transflector {
    type Output = RoundPoint;

    fn meet(self, other: Dipole) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group2()[3]]),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for Transflector {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAligningOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group1()[3]]),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for Transflector {
    type Output = AntiPlane;

    fn meet(self, other: DipoleAtInfinity) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[3]]),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for Transflector {
    type Output = RoundPoint;

    fn meet(self, other: DipoleAtOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for Transflector {
    type Output = RoundPoint;

    fn meet(self, other: DipoleOnOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from([self.group1()[2], self.group1()[3]]) * Simd32x2::from([other.group0()[2], -other.group0()[3]]),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for Transflector {
    type Output = RoundPoint;

    fn meet(self, other: DipoleOrthogonalOrigin) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Meet<DualNum> for Transflector {
    type Output = Transflector;

    fn meet(self, other: DualNum) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
                g1: self.group1() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Meet<FlatPoint> for Transflector {
    type Output = Infinity;

    fn meet(self, other: FlatPoint) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for Transflector {
    type Output = Infinity;

    fn meet(self, other: FlatPointAtInfinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for Transflector {
    type Output = Infinity;

    fn meet(self, other: FlatPointAtOrigin) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Horizon> for Transflector {
    type Output = LineAtInfinity;

    fn meet(self, other: Horizon) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Meet<Line> for Transflector {
    type Output = FlatPoint;

    fn meet(self, other: Line) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<LineAtInfinity> for Transflector {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: LineAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Meet<LineAtOrigin> for Transflector {
    type Output = FlatPoint;

    fn meet(self, other: LineAtOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Meet<Motor> for Transflector {
    type Output = Flector;

    fn meet(self, other: Motor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<MultiVector> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group6()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group6()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group6()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group2()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group10()[0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group4()[2], other.group4()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group4()[2], 0.0, -other.group4()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group4()[1], other.group4()[0], 0.0])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group3()[0], -other.group5()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group3()[1], -other.group5()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group3()[2], -other.group5()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group6()[2], other.group6()[1], -other.group7()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group6()[2], 0.0, -other.group6()[0], -other.group7()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group6()[1], other.group6()[0], 0.0, -other.group7()[2]]),
                g4: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group8()[3])
                    + Simd32x3::from(self.group1()[3]) * other.group6(),
                g5: self.group0() * Simd32x3::from(other.group0()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group8()[2], -other.group8()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group8()[2], 0.0, other.group8()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group8()[1], -other.group8()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group7(),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group10()[0]),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group9()[2], -other.group9()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group9()[2], 0.0, other.group9()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group9()[1], -other.group9()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group10()[1], other.group10()[1], other.group10()[1], 0.0])
                    - Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group10()[0]]),
                g9: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[1]),
                g10: Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group0()[1]]),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g4: Simd32x3::from(self.group1()[3]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for Transflector {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: NullDipoleAtOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], other.group0()[2]]),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Origin> for Transflector {
    type Output = Scalar;

    fn meet(self, other: Origin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Rotor> for Transflector {
    type Output = Flector;

    fn meet(self, other: Rotor) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<RoundPoint> for Transflector {
    type Output = Scalar;

    fn meet(self, other: RoundPoint) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[0] * other.group0()[0] + self.group1()[1] * other.group0()[1] + self.group1()[2] * other.group0()[2] + self.group1()[3] * other.group1()[0],
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for Transflector {
    type Output = Scalar;

    fn meet(self, other: RoundPointAtOrigin) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group1()[3] * other.group0()[0],
            },
        }
    }
}

impl Meet<Sphere> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    - Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], -other.group0()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g8: Simd32x4::from(0.0) - Simd32x4::from(self.group1()[3]) * other.group0(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Transflector> for Transflector {
    type Output = MultiVector;

    fn meet(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g8: swizzle!(self.group1(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([-other.group1()[0], -other.group1()[1], -other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Translator> for Transflector {
    type Output = Transflector;

    fn meet(self, other: Translator) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: self.group1() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Meet<AntiCircleOnOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiDipoleOnOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<AntiFlatPointAtOrigin> for Translator {
    type Output = AntiFlatPointAtOrigin;

    fn meet(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<AntiLineAtOrigin> for Translator {
    type Output = AntiLineAtOrigin;

    fn meet(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiPlane> for Translator {
    type Output = AntiPlane;

    fn meet(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiPlaneAtOrigin> for Translator {
    type Output = AntiPlaneAtOrigin;

    fn meet(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<AntiScalar> for Translator {
    type Output = Translator;

    fn meet(self, other: AntiScalar) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Meet<AntiSphereOnOrigin> for Translator {
    type Output = AntiSphereOnOrigin;

    fn meet(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Circle> for Translator {
    type Output = MultiVector;

    fn meet(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[3]) * other.group2(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAligningOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAtInfinity> for Translator {
    type Output = MultiVector;

    fn meet(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(self.group0()[3]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleAtOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOnOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<CircleOrthogonalOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * other.group1(),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Dipole> for Translator {
    type Output = MultiVector;

    fn meet(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleAligningOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleAtInfinity> for Translator {
    type Output = DipoleAtInfinity;

    fn meet(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<DipoleAtOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[3]) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleOnOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DipoleOrthogonalOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[3]) * other.group1(),
                g5: Simd32x3::from(self.group0()[3]) * other.group2(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<DualNum> for Translator {
    type Output = MultiVector;

    fn meet(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<FlatPoint> for Translator {
    type Output = FlatPoint;

    fn meet(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtInfinity> for Translator {
    type Output = FlatPointAtInfinity;

    fn meet(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<FlatPointAtOrigin> for Translator {
    type Output = FlatPointAtOrigin;

    fn meet(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Flector> for Translator {
    type Output = Flector;

    fn meet(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<FlectorAtInfinity> for Translator {
    type Output = FlectorAtInfinity;

    fn meet(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Horizon> for Translator {
    type Output = Horizon;

    fn meet(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Infinity> for Translator {
    type Output = Infinity;

    fn meet(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Line> for Translator {
    type Output = MultiVector;

    fn meet(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<LineAtInfinity> for Translator {
    type Output = LineAtInfinity;

    fn meet(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<LineAtOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<Motor> for Translator {
    type Output = MultiVector;

    fn meet(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<MultiVector> for Translator {
    type Output = MultiVector;

    fn meet(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group3()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group3()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group3()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group6()[2], other.group6()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], 0.0, -other.group6()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group6()[1], other.group6()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group1(),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group7()[2]])
                    + Simd32x2::from(self.group0()[3]) * other.group2(),
                g3: Simd32x4::from(self.group0()[3]) * other.group3(),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group10()[0]) + Simd32x3::from(self.group0()[3]) * other.group4(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group9()[2], other.group9()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], 0.0, -other.group9()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group9()[1], other.group9()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group5(),
                g6: Simd32x3::from(self.group0()[3]) * other.group6(),
                g7: Simd32x3::from(self.group0()[3]) * other.group7(),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group8(),
                g9: Simd32x3::from(self.group0()[3]) * other.group9(),
                g10: Simd32x2::from(self.group0()[3]) * other.group10(),
            },
        }
    }
}

impl Meet<NullCircleAtOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[3]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullDipoleAtOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<NullSphereAtOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Meet<Origin> for Translator {
    type Output = Origin;

    fn meet(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Plane> for Translator {
    type Output = Transflector;

    fn meet(self, other: Plane) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<PlaneAtOrigin> for Translator {
    type Output = Transflector;

    fn meet(self, other: PlaneAtOrigin) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Meet<Rotor> for Translator {
    type Output = MultiVector;

    fn meet(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Meet<RoundPoint> for Translator {
    type Output = RoundPoint;

    fn meet(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<RoundPointAtOrigin> for Translator {
    type Output = RoundPointAtOrigin;

    fn meet(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<Scalar> for Translator {
    type Output = Scalar;

    fn meet(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Meet<Sphere> for Translator {
    type Output = MultiVector;

    fn meet(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[3]) * other.group0(),
                g10: Simd32x2::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<SphereAtOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Meet<SphereOnOrigin> for Translator {
    type Output = MultiVector;

    fn meet(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(0.0),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Meet<Transflector> for Translator {
    type Output = Transflector;

    fn meet(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[3]) * other.group1(),
            },
        }
    }
}

impl Meet<Translator> for Translator {
    type Output = Translator;

    fn meet(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiCircleOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for AntiCircleOnOrigin {
    type Output = Circle;

    fn wedge(self, other: AntiPlane) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Circle> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group1()[0] - self.group1()[1] * other.group1()[1] - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<Dipole> for AntiCircleOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for AntiCircleOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for AntiCircleOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn wedge(self, other: DualNum) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for AntiCircleOnOrigin {
    type Output = Plane;

    fn wedge(self, other: FlatPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for AntiCircleOnOrigin {
    type Output = Plane;

    fn wedge(self, other: FlatPointAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for AntiCircleOnOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Flector> for AntiCircleOnOrigin {
    type Output = Plane;

    fn wedge(self, other: Flector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for AntiCircleOnOrigin {
    type Output = Plane;

    fn wedge(self, other: FlectorAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Infinity> for AntiCircleOnOrigin {
    type Output = Line;

    fn wedge(self, other: Infinity) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Line> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<LineAtInfinity> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<LineAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: LineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Motor> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<MultiVector> for AntiCircleOnOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[0]),
                g7: self.group0() * Simd32x3::from(other.group2()[1]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[1], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group2()[1], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group2()[1], -other.group1()[2]]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group3()[3]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group3()[0], other.group5()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group3()[1], other.group5()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group3()[2], other.group5()[2]]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Origin> for AntiCircleOnOrigin {
    type Output = NullCircleAtOrigin;

    fn wedge(self, other: Origin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Rotor> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Rotor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<RoundPoint> for AntiCircleOnOrigin {
    type Output = Circle;

    fn wedge(self, other: RoundPoint) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for AntiCircleOnOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
                g2: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Wedge<Scalar> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn wedge(self, other: Scalar) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for AntiCircleOnOrigin {
    type Output = Plane;

    fn wedge(self, other: Transflector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Translator> for AntiCircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for AntiDipoleOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiPlane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from([self.group0()[2], self.group0()[3]]) * Simd32x2::from([-other.group0()[2], other.group0()[3]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<Dipole> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Wedge<DualNum> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn wedge(self, other: DualNum) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<Flector> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Infinity> for AntiDipoleOnOrigin {
    type Output = Plane;

    fn wedge(self, other: Infinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<MultiVector> for AntiDipoleOnOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[1]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group2() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<Origin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: Origin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<RoundPoint> for AntiDipoleOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: RoundPoint) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[1]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group0()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: RoundPointAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
                g1: Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<Scalar> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn wedge(self, other: Scalar) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for AntiDipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for AntiFlatPointAtOrigin {
    type Output = Horizon;

    fn wedge(self, other: AntiPlane) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for AntiFlatPointAtOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Wedge<Dipole> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group2()[3],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Wedge<DualNum> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn wedge(self, other: DualNum) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Wedge<FlatPoint> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<Flector> for AntiFlatPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Wedge<Infinity> for AntiFlatPointAtOrigin {
    type Output = Horizon;

    fn wedge(self, other: Infinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<MultiVector> for AntiFlatPointAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, -other.group3()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * other.group2() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<Origin> for AntiFlatPointAtOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: Origin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<RoundPoint> for AntiFlatPointAtOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: RoundPoint) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for AntiFlatPointAtOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<Scalar> for AntiFlatPointAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn wedge(self, other: Scalar) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for AntiLineAtOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiCircleOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for AntiLineAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn wedge(self, other: AntiPlane) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for AntiLineAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for AntiLineAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Circle> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<Dipole> for AntiLineAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group2()[3]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for AntiLineAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for AntiLineAtOrigin {
    type Output = Plane;

    fn wedge(self, other: DipoleAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for AntiLineAtOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for AntiLineAtOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for AntiLineAtOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn wedge(self, other: DualNum) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for AntiLineAtOrigin {
    type Output = Plane;

    fn wedge(self, other: FlatPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for AntiLineAtOrigin {
    type Output = Horizon;

    fn wedge(self, other: FlatPointAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for AntiLineAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Flector> for AntiLineAtOrigin {
    type Output = Plane;

    fn wedge(self, other: Flector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for AntiLineAtOrigin {
    type Output = Horizon;

    fn wedge(self, other: FlectorAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Infinity> for AntiLineAtOrigin {
    type Output = LineAtInfinity;

    fn wedge(self, other: Infinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Line> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<LineAtOrigin> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: LineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Motor> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<MultiVector> for AntiLineAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group7()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: self.group0() * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group2()[0]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[1], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group2()[1], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group2()[1], -other.group1()[2]]),
                g9: self.group0() * Simd32x3::from(other.group3()[3]),
                g10: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group5()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group5()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group5()[2]]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for AntiLineAtOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Origin> for AntiLineAtOrigin {
    type Output = NullCircleAtOrigin;

    fn wedge(self, other: Origin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Rotor> for AntiLineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Rotor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<RoundPoint> for AntiLineAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn wedge(self, other: RoundPoint) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for AntiLineAtOrigin {
    type Output = CircleAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Wedge<Scalar> for AntiLineAtOrigin {
    type Output = AntiLineAtOrigin;

    fn wedge(self, other: Scalar) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for AntiLineAtOrigin {
    type Output = Horizon;

    fn wedge(self, other: Transflector) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for AntiPlane {
    type Output = Circle;

    fn wedge(self, other: AntiCircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for AntiPlane {
    type Output = Sphere;

    fn wedge(self, other: AntiDipoleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from([self.group0()[2], self.group0()[3]]) * Simd32x2::from([other.group0()[2], -other.group0()[3]]),
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for AntiPlane {
    type Output = Horizon;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for AntiPlane {
    type Output = CircleOrthogonalOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for AntiPlane {
    type Output = DipoleAtInfinity;

    fn wedge(self, other: AntiPlane) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for AntiPlane {
    type Output = DipoleAtInfinity;

    fn wedge(self, other: AntiPlaneAtOrigin) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for AntiPlane {
    type Output = Dipole;

    fn wedge(self, other: AntiSphereOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Wedge<Circle> for AntiPlane {
    type Output = Sphere;

    fn wedge(self, other: Circle) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group2()[3]]),
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for AntiPlane {
    type Output = Sphere;

    fn wedge(self, other: CircleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for AntiPlane {
    type Output = Plane;

    fn wedge(self, other: CircleAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[3]]),
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for AntiPlane {
    type Output = Sphere;

    fn wedge(self, other: CircleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for AntiPlane {
    type Output = SphereOnOrigin;

    fn wedge(self, other: CircleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for AntiPlane {
    type Output = Sphere;

    fn wedge(self, other: CircleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group1()[3]]),
            },
        }
    }
}

impl Wedge<Dipole> for AntiPlane {
    type Output = Circle;

    fn wedge(self, other: Dipole) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for AntiPlane {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for AntiPlane {
    type Output = CircleAtInfinity;

    fn wedge(self, other: DipoleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for AntiPlane {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for AntiPlane {
    type Output = CircleOnOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for AntiPlane {
    type Output = Circle;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DualNum> for AntiPlane {
    type Output = AntiPlane;

    fn wedge(self, other: DualNum) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for AntiPlane {
    type Output = Line;

    fn wedge(self, other: FlatPoint) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for AntiPlane {
    type Output = LineAtInfinity;

    fn wedge(self, other: FlatPointAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for AntiPlane {
    type Output = LineAtOrigin;

    fn wedge(self, other: FlatPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Flector> for AntiPlane {
    type Output = Motor;

    fn wedge(self, other: Flector) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group1()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for AntiPlane {
    type Output = LineAtInfinity;

    fn wedge(self, other: FlectorAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Infinity> for AntiPlane {
    type Output = FlatPointAtInfinity;

    fn wedge(self, other: Infinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Line> for AntiPlane {
    type Output = Plane;

    fn wedge(self, other: Line) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<LineAtInfinity> for AntiPlane {
    type Output = Horizon;

    fn wedge(self, other: LineAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<LineAtOrigin> for AntiPlane {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: LineAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Motor> for AntiPlane {
    type Output = Plane;

    fn wedge(self, other: Motor) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<MultiVector> for AntiPlane {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group10()[0]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
                g3: Simd32x4::from(0.0) - self.group0() * Simd32x4::from(other.group2()[0]),
                g4: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[1]) - Simd32x3::from(self.group0()[3]) * other.group1(),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0]),
                g7: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group5()[2], other.group5()[1], -other.group4()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group5()[2], 0.0, -other.group5()[0], -other.group4()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group5()[1], other.group5()[0], 0.0, -other.group4()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group7()[2], -other.group7()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group7()[2], 0.0, other.group7()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group7()[1], -other.group7()[0], 0.0])
                    - Simd32x3::from(self.group0()[3]) * other.group6(),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], -other.group8()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group8()[3]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for AntiPlane {
    type Output = SphereOnOrigin;

    fn wedge(self, other: NullCircleAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for AntiPlane {
    type Output = CircleOnOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Wedge<NullSphereAtOrigin> for AntiPlane {
    type Output = AntiScalar;

    fn wedge(self, other: NullSphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<Origin> for AntiPlane {
    type Output = DipoleOnOrigin;

    fn wedge(self, other: Origin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<Plane> for AntiPlane {
    type Output = AntiScalar;

    fn wedge(self, other: Plane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<PlaneAtOrigin> for AntiPlane {
    type Output = AntiScalar;

    fn wedge(self, other: PlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Rotor> for AntiPlane {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Rotor) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPoint> for AntiPlane {
    type Output = Dipole;

    fn wedge(self, other: RoundPoint) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    - Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for AntiPlane {
    type Output = DipoleAligningOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], -other.group0()[0]]),
            },
        }
    }
}

impl Wedge<Scalar> for AntiPlane {
    type Output = AntiPlane;

    fn wedge(self, other: Scalar) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<Sphere> for AntiPlane {
    type Output = AntiScalar;

    fn wedge(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[0],
            },
        }
    }
}

impl Wedge<SphereAtOrigin> for AntiPlane {
    type Output = AntiScalar;

    fn wedge(self, other: SphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0()[0],
            },
        }
    }
}

impl Wedge<SphereOnOrigin> for AntiPlane {
    type Output = AntiScalar;

    fn wedge(self, other: SphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<Transflector> for AntiPlane {
    type Output = Translator;

    fn wedge(self, other: Transflector) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, other.group1()[2]]),
            },
        }
    }
}

impl Wedge<Translator> for AntiPlane {
    type Output = Horizon;

    fn wedge(self, other: Translator) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for AntiPlaneAtOrigin {
    type Output = AntiDipoleOnOrigin;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for AntiPlaneAtOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiDipoleOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for AntiPlaneAtOrigin {
    type Output = AntiFlatPointAtOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for AntiPlaneAtOrigin {
    type Output = DipoleAtInfinity;

    fn wedge(self, other: AntiPlane) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for AntiPlaneAtOrigin {
    type Output = AntiLineAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for AntiPlaneAtOrigin {
    type Output = AntiCircleOnOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for AntiPlaneAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: Circle) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for AntiPlaneAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: CircleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for AntiPlaneAtOrigin {
    type Output = Plane;

    fn wedge(self, other: CircleAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for AntiPlaneAtOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: CircleAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for AntiPlaneAtOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: CircleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for AntiPlaneAtOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: CircleOrthogonalOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<Dipole> for AntiPlaneAtOrigin {
    type Output = Circle;

    fn wedge(self, other: Dipole) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group2()[3]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for AntiPlaneAtOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3]),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for AntiPlaneAtOrigin {
    type Output = CircleAtInfinity;

    fn wedge(self, other: DipoleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for AntiPlaneAtOrigin {
    type Output = CircleAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for AntiPlaneAtOrigin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for AntiPlaneAtOrigin {
    type Output = CircleOrthogonalOrigin;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn wedge(self, other: DualNum) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for AntiPlaneAtOrigin {
    type Output = Line;

    fn wedge(self, other: FlatPoint) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for AntiPlaneAtOrigin {
    type Output = LineAtInfinity;

    fn wedge(self, other: FlatPointAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for AntiPlaneAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: FlatPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Flector> for AntiPlaneAtOrigin {
    type Output = Motor;

    fn wedge(self, other: Flector) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group1()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for AntiPlaneAtOrigin {
    type Output = LineAtInfinity;

    fn wedge(self, other: FlectorAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Infinity> for AntiPlaneAtOrigin {
    type Output = FlatPointAtInfinity;

    fn wedge(self, other: Infinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Line> for AntiPlaneAtOrigin {
    type Output = Plane;

    fn wedge(self, other: Line) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<LineAtInfinity> for AntiPlaneAtOrigin {
    type Output = Horizon;

    fn wedge(self, other: LineAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<LineAtOrigin> for AntiPlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: LineAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Motor> for AntiPlaneAtOrigin {
    type Output = Plane;

    fn wedge(self, other: Motor) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<MultiVector> for AntiPlaneAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]]),
                g1: self.group0() * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([-other.group2()[0], -other.group2()[0], -other.group2()[0], 0.0]),
                g4: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g5: self.group0() * Simd32x3::from(other.group2()[1]),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0]),
                g7: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group3()[3]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group5()[2], other.group5()[1], -other.group4()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group5()[2], 0.0, -other.group5()[0], -other.group4()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group5()[1], other.group5()[0], 0.0, -other.group4()[2]]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group7()[2], -other.group7()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group7()[2], 0.0, other.group7()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group7()[1], -other.group7()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], -other.group8()[2]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for AntiPlaneAtOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: NullCircleAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for AntiPlaneAtOrigin {
    type Output = NullCircleAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for AntiPlaneAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn wedge(self, other: Origin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Plane> for AntiPlaneAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Plane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<PlaneAtOrigin> for AntiPlaneAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: PlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Rotor> for AntiPlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Rotor) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPoint> for AntiPlaneAtOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn wedge(self, other: RoundPoint) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: self.group0() * Simd32x3::from(other.group1()[1]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for AntiPlaneAtOrigin {
    type Output = DipoleAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Wedge<Scalar> for AntiPlaneAtOrigin {
    type Output = AntiPlaneAtOrigin;

    fn wedge(self, other: Scalar) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Sphere> for AntiPlaneAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<SphereOnOrigin> for AntiPlaneAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: SphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Transflector> for AntiPlaneAtOrigin {
    type Output = Translator;

    fn wedge(self, other: Transflector) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, other.group1()[2]]),
            },
        }
    }
}

impl Wedge<Translator> for AntiPlaneAtOrigin {
    type Output = Horizon;

    fn wedge(self, other: Translator) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DualNum> for AntiScalar {
    type Output = AntiScalar;

    fn wedge(self, other: DualNum) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Wedge<MultiVector> for AntiScalar {
    type Output = AntiScalar;

    fn wedge(self, other: MultiVector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Wedge<Scalar> for AntiScalar {
    type Output = AntiScalar;

    fn wedge(self, other: Scalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for AntiSphereOnOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiDipoleOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for AntiSphereOnOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for AntiSphereOnOrigin {
    type Output = AntiDipoleOnOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for AntiSphereOnOrigin {
    type Output = Dipole;

    fn wedge(self, other: AntiPlane) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: self.group0() * Simd32x4::from(other.group0()[3]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for AntiSphereOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiCircleOnOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for AntiSphereOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: Circle) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group2()[3], 0.0]),
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for AntiSphereOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: CircleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group2(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for AntiSphereOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: CircleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from([self.group0()[3], self.group0()[2]]) * Simd32x2::from([other.group1()[3], -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for AntiSphereOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: CircleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for AntiSphereOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: CircleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = Sphere;

    fn wedge(self, other: CircleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group1()[3], 0.0]),
            },
        }
    }
}

impl Wedge<Dipole> for AntiSphereOnOrigin {
    type Output = Circle;

    fn wedge(self, other: Dipole) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group1(),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for AntiSphereOnOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for AntiSphereOnOrigin {
    type Output = Circle;

    fn wedge(self, other: DipoleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for AntiSphereOnOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group0()[3]) * other.group1(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for AntiSphereOnOrigin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = Circle;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group1(),
                g1: Simd32x3::from(self.group0()[3]) * other.group2(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn wedge(self, other: DualNum) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for AntiSphereOnOrigin {
    type Output = Line;

    fn wedge(self, other: FlatPoint) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for AntiSphereOnOrigin {
    type Output = Line;

    fn wedge(self, other: FlatPointAtInfinity) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for AntiSphereOnOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: FlatPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Flector> for AntiSphereOnOrigin {
    type Output = Motor;

    fn wedge(self, other: Flector) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for AntiSphereOnOrigin {
    type Output = Motor;

    fn wedge(self, other: FlectorAtInfinity) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Horizon> for AntiSphereOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Horizon) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<Infinity> for AntiSphereOnOrigin {
    type Output = FlatPoint;

    fn wedge(self, other: Infinity) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<Line> for AntiSphereOnOrigin {
    type Output = Plane;

    fn wedge(self, other: Line) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<LineAtInfinity> for AntiSphereOnOrigin {
    type Output = Plane;

    fn wedge(self, other: LineAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<LineAtOrigin> for AntiSphereOnOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: LineAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Motor> for AntiSphereOnOrigin {
    type Output = Plane;

    fn wedge(self, other: Motor) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<MultiVector> for AntiSphereOnOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group10()[1]]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[0], 0.0]),
                g3: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([-other.group2()[0], -other.group2()[0], -other.group2()[0], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]),
                g4: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[1]),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group4(),
                g7: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group0()[3]) * other.group5(),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group5()[2], other.group5()[1], -other.group4()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group5()[2], 0.0, -other.group5()[0], -other.group4()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group5()[1], other.group5()[0], 0.0, -other.group4()[2]]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group7()[2], -other.group7()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group7()[2], 0.0, other.group7()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group7()[1], -other.group7()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], -other.group8()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group8()[3], 0.0]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for AntiSphereOnOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: NullCircleAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for AntiSphereOnOrigin {
    type Output = NullCircleAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for AntiSphereOnOrigin {
    type Output = NullDipoleAtOrigin;

    fn wedge(self, other: Origin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Plane> for AntiSphereOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Plane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<PlaneAtOrigin> for AntiSphereOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: PlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Rotor> for AntiSphereOnOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Rotor) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPoint> for AntiSphereOnOrigin {
    type Output = Dipole;

    fn wedge(self, other: RoundPoint) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0])
                    + Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: self.group0() * Simd32x4::from(other.group1()[1]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for AntiSphereOnOrigin {
    type Output = DipoleAligningOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x4::from(other.group0()[1]),
            },
        }
    }
}

impl Wedge<Scalar> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;

    fn wedge(self, other: Scalar) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<Sphere> for AntiSphereOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[1],
            },
        }
    }
}

impl Wedge<SphereAtOrigin> for AntiSphereOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: SphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0()[1],
            },
        }
    }
}

impl Wedge<SphereOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: SphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Transflector> for AntiSphereOnOrigin {
    type Output = Motor;

    fn wedge(self, other: Transflector) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Translator> for AntiSphereOnOrigin {
    type Output = Plane;

    fn wedge(self, other: Translator) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for Circle {
    type Output = Sphere;

    fn wedge(self, other: AntiPlane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Circle {
    type Output = Sphere;

    fn wedge(self, other: AntiPlaneAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Circle {
    type Output = Sphere;

    fn wedge(self, other: AntiSphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group2()[3], self.group2()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Dipole> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group2()[3],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DualNum> for Circle {
    type Output = Circle;

    fn wedge(self, other: DualNum) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
                g2: self.group2() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<Flector> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Infinity> for Circle {
    type Output = Plane;

    fn wedge(self, other: Infinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Wedge<MultiVector> for Circle {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group3()[2]])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[0]),
                g7: self.group1() * Simd32x3::from(other.group0()[0]),
                g8: self.group2() * Simd32x4::from(other.group0()[0]),
                g9: self.group0() * Simd32x3::from(other.group2()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group2()[3]) * other.group2() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Origin> for Circle {
    type Output = SphereOnOrigin;

    fn wedge(self, other: Origin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group2() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for Circle {
    type Output = Sphere;

    fn wedge(self, other: RoundPoint) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Circle {
    type Output = Sphere;

    fn wedge(self, other: RoundPointAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group2()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<Scalar> for Circle {
    type Output = Circle;

    fn wedge(self, other: Scalar) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for Circle {
    type Output = AntiScalar;

    fn wedge(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for CircleAligningOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiPlane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for CircleAligningOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiPlaneAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for CircleAligningOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiSphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - self.group2() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Dipole> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DualNum> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: DualNum) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
                g2: self.group2() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Flector> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Infinity> for CircleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Infinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<MultiVector> for CircleAligningOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group3()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[0]),
                g7: self.group1() * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g9: self.group0() * Simd32x3::from(other.group2()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - self.group2() * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Origin> for CircleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Origin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for CircleAligningOrigin {
    type Output = Sphere;

    fn wedge(self, other: RoundPoint) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - self.group2() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for CircleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - self.group2() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Scalar> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: Scalar) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for CircleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for CircleAtInfinity {
    type Output = Plane;

    fn wedge(self, other: AntiPlane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for CircleAtInfinity {
    type Output = Plane;

    fn wedge(self, other: AntiPlaneAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for CircleAtInfinity {
    type Output = Sphere;

    fn wedge(self, other: AntiSphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group1()[3], self.group1()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Dipole> for CircleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for CircleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DualNum> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn wedge(self, other: DualNum) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for CircleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<Flector> for CircleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<Infinity> for CircleAtInfinity {
    type Output = Horizon;

    fn wedge(self, other: Infinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<MultiVector> for CircleAtInfinity {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group3()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[0]),
                g8: self.group1() * Simd32x4::from(other.group0()[0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group2() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Origin> for CircleAtInfinity {
    type Output = SphereOnOrigin;

    fn wedge(self, other: Origin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for CircleAtInfinity {
    type Output = Sphere;

    fn wedge(self, other: RoundPoint) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for CircleAtInfinity {
    type Output = Sphere;

    fn wedge(self, other: RoundPointAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group1()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<Scalar> for CircleAtInfinity {
    type Output = CircleAtInfinity;

    fn wedge(self, other: Scalar) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for CircleAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiPlane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for CircleAtOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for CircleAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiSphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Dipole> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DualNum> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn wedge(self, other: DualNum) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Flector> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Infinity> for CircleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Infinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<MultiVector> for CircleAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group3()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g9: self.group0() * Simd32x3::from(other.group2()[1]) - self.group1() * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Origin> for CircleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Origin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for CircleAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: RoundPoint) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1]) - self.group1() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for CircleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Scalar> for CircleAtOrigin {
    type Output = CircleAtOrigin;

    fn wedge(self, other: Scalar) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for CircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for CircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group1()[0] - self.group1()[1] * other.group1()[1] - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for CircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for CircleOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: AntiPlane) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for CircleOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for CircleOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<Dipole> for CircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for CircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for CircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for CircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for CircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DualNum> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: DualNum) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for CircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for CircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Flector> for CircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for CircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Infinity> for CircleOnOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Infinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<MultiVector> for CircleOnOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[0]),
                g7: self.group1() * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group2()[1])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPoint> for CircleOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: RoundPoint) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for CircleOnOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Wedge<Scalar> for CircleOnOrigin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: Scalar) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for CircleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for CircleOrthogonalOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiPlane) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for CircleOrthogonalOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for CircleOrthogonalOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiSphereOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group1()[3], self.group1()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Dipole> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DualNum> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn wedge(self, other: DualNum) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<Flector> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Infinity> for CircleOrthogonalOrigin {
    type Output = Plane;

    fn wedge(self, other: Infinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Wedge<MultiVector> for CircleOrthogonalOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group3()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group3()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: self.group1() * Simd32x4::from(other.group0()[0]),
                g9: self.group0() * Simd32x3::from(other.group2()[1]) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group2() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Origin> for CircleOrthogonalOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: Origin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(0.0) - self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for CircleOrthogonalOrigin {
    type Output = Sphere;

    fn wedge(self, other: RoundPoint) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[1]) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group1()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = Sphere;

    fn wedge(self, other: RoundPointAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) - Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g1: Simd32x2::from(self.group1()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<Scalar> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn wedge(self, other: Scalar) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for CircleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for Dipole {
    type Output = Sphere;

    fn wedge(self, other: AntiCircleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2] - self.group2()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for Dipole {
    type Output = Sphere;

    fn wedge(self, other: AntiLineAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group2()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for Dipole {
    type Output = Circle;

    fn wedge(self, other: AntiPlane) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Dipole {
    type Output = Circle;

    fn wedge(self, other: AntiPlaneAtOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group2()[3]) * other.group0(),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Dipole {
    type Output = Circle;

    fn wedge(self, other: AntiSphereOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group2()[3],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2]
                    - self.group2()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<Dipole> for Dipole {
    type Output = Sphere;

    fn wedge(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for Dipole {
    type Output = Sphere;

    fn wedge(self, other: DipoleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for Dipole {
    type Output = Sphere;

    fn wedge(self, other: DipoleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for Dipole {
    type Output = Sphere;

    fn wedge(self, other: DipoleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for Dipole {
    type Output = SphereOnOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for Dipole {
    type Output = Sphere;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for Dipole {
    type Output = Dipole;

    fn wedge(self, other: DualNum) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
                g2: self.group2() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for Dipole {
    type Output = Plane;

    fn wedge(self, other: FlatPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for Dipole {
    type Output = Plane;

    fn wedge(self, other: FlatPointAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for Dipole {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Flector> for Dipole {
    type Output = Plane;

    fn wedge(self, other: Flector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for Dipole {
    type Output = Plane;

    fn wedge(self, other: FlectorAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Infinity> for Dipole {
    type Output = Line;

    fn wedge(self, other: Infinity) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Line> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<LineAtInfinity> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<LineAtOrigin> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: LineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Motor> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<MultiVector> for Dipole {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group2()[3]) * Simd32x2::from([0.0, -other.group8()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g4: self.group1() * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[0]),
                g7: self.group0() * Simd32x3::from(other.group2()[1]) + Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group2()[0])
                    - Simd32x3::from(self.group2()[3]) * other.group1(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[1], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group2()[1], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group2()[1], -other.group1()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group2()[3]) * other.group4(),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group3()[0], other.group5()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group3()[1], other.group5()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group3()[2], other.group5()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for Dipole {
    type Output = SphereOnOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for Dipole {
    type Output = CircleOnOrigin;

    fn wedge(self, other: Origin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
                g1: Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Rotor> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: Rotor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<RoundPoint> for Dipole {
    type Output = Circle;

    fn wedge(self, other: RoundPoint) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group1()[0])
                    - Simd32x3::from(self.group2()[3]) * other.group0(),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Dipole {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]) + Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Wedge<Scalar> for Dipole {
    type Output = Dipole;

    fn wedge(self, other: Scalar) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for Dipole {
    type Output = Plane;

    fn wedge(self, other: Transflector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Translator> for Dipole {
    type Output = AntiScalar;

    fn wedge(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for DipoleAligningOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiCircleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for DipoleAligningOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiLineAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: AntiPlane) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<Dipole> for DipoleAligningOrigin {
    type Output = Sphere;

    fn wedge(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for DipoleAligningOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn wedge(self, other: DualNum) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPoint) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPointAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Flector> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Flector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlectorAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Infinity> for DipoleAligningOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: Infinity) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Line> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<LineAtInfinity> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Motor> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<MultiVector> for DipoleAligningOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group8()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g7: self.group0() * Simd32x3::from(other.group2()[1]) + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group2()[0])
                    - Simd32x3::from(self.group1()[3]) * other.group1(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group4(),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for DipoleAligningOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: Origin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: RoundPoint) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0])
                    - Simd32x3::from(self.group1()[3]) * other.group0(),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for DipoleAligningOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Scalar> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;

    fn wedge(self, other: Scalar) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for DipoleAligningOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Transflector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Translator> for DipoleAligningOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for DipoleAtInfinity {
    type Output = Sphere;

    fn wedge(self, other: AntiCircleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for DipoleAtInfinity {
    type Output = Plane;

    fn wedge(self, other: AntiLineAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for DipoleAtInfinity {
    type Output = CircleAtInfinity;

    fn wedge(self, other: AntiPlane) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for DipoleAtInfinity {
    type Output = CircleAtInfinity;

    fn wedge(self, other: AntiPlaneAtOrigin) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for DipoleAtInfinity {
    type Output = Circle;

    fn wedge(self, other: AntiSphereOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2]
                    - self.group1()[3] * other.group2()[3],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2] - self.group1()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<Dipole> for DipoleAtInfinity {
    type Output = Sphere;

    fn wedge(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for DipoleAtInfinity {
    type Output = Sphere;

    fn wedge(self, other: DipoleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for DipoleAtInfinity {
    type Output = Plane;

    fn wedge(self, other: DipoleAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[3], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[3], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for DipoleAtInfinity {
    type Output = Sphere;

    fn wedge(self, other: DipoleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for DipoleAtInfinity {
    type Output = SphereOnOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = Sphere;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group1(),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn wedge(self, other: DualNum) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for DipoleAtInfinity {
    type Output = Plane;

    fn wedge(self, other: FlatPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for DipoleAtInfinity {
    type Output = Horizon;

    fn wedge(self, other: FlatPointAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for DipoleAtInfinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Flector> for DipoleAtInfinity {
    type Output = Plane;

    fn wedge(self, other: Flector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for DipoleAtInfinity {
    type Output = Horizon;

    fn wedge(self, other: FlectorAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Infinity> for DipoleAtInfinity {
    type Output = LineAtInfinity;

    fn wedge(self, other: Infinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Line> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<LineAtOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: LineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Motor> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<MultiVector> for DipoleAtInfinity {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group7()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, -other.group8()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g4: self.group0() * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g6: self.group0() * Simd32x3::from(other.group2()[0]),
                g7: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group2()[0]) - Simd32x3::from(self.group1()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[1], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group2()[1], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group2()[1], -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: self.group0() * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group1()[3]) * other.group4(),
                g10: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group5()[0]])
                    - Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group5()[1]])
                    - Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group5()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for DipoleAtInfinity {
    type Output = SphereOnOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for DipoleAtInfinity {
    type Output = CircleOnOrigin;

    fn wedge(self, other: Origin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Rotor> for DipoleAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: Rotor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<RoundPoint> for DipoleAtInfinity {
    type Output = Circle;

    fn wedge(self, other: RoundPoint) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group1()[0]) - Simd32x3::from(self.group1()[3]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for DipoleAtInfinity {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g2: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Wedge<Scalar> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;

    fn wedge(self, other: Scalar) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for DipoleAtInfinity {
    type Output = Horizon;

    fn wedge(self, other: Transflector) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for DipoleAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiCircleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for DipoleAtOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for DipoleAtOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: AntiPlane) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for DipoleAtOrigin {
    type Output = CircleAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for DipoleAtOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group1() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Dipole> for DipoleAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for DipoleAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn wedge(self, other: DualNum) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPoint) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPointAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Flector> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Flector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlectorAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Infinity> for DipoleAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: Infinity) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Line> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<LineAtInfinity> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Motor> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<MultiVector> for DipoleAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group6()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g7: self.group0() * Simd32x3::from(other.group2()[1]) + self.group1() * Simd32x3::from(other.group2()[0]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for DipoleAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: Origin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for DipoleAtOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: RoundPoint) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + self.group1() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for DipoleAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]) + self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Scalar> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;

    fn wedge(self, other: Scalar) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for DipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Transflector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Translator> for DipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for DipoleOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: AntiCircleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for DipoleOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for DipoleOnOrigin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: AntiPlane) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for DipoleOnOrigin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for DipoleOnOrigin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Circle> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<Dipole> for DipoleOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: Dipole) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for DipoleOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: DipoleAtInfinity) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DualNum> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn wedge(self, other: DualNum) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPoint) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPointAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Flector> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Flector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlectorAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Infinity> for DipoleOnOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: Infinity) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Line> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<LineAtInfinity> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Motor> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<MultiVector> for DipoleOnOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group8()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: self.group0() * Simd32x4::from(other.group0()[0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[1]) - Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group4(),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPoint> for DipoleOnOrigin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: RoundPoint) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[1]) - Simd32x3::from(self.group0()[3]) * other.group0(),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for DipoleOnOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Wedge<Scalar> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;

    fn wedge(self, other: Scalar) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for DipoleOnOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Transflector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Translator> for DipoleOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiCircleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for DipoleOrthogonalOrigin {
    type Output = Circle;

    fn wedge(self, other: AntiPlane) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for DipoleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Circle;

    fn wedge(self, other: AntiSphereOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group0()[3]),
                g1: self.group2() * Simd32x3::from(other.group0()[3]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group2()[0]
                    - self.group0()[1] * other.group2()[1]
                    - self.group0()[2] * other.group2()[2]
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group1()[0] * other.group1()[0]
                    - self.group1()[1] * other.group1()[1]
                    - self.group1()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group2()[0] * other.group0()[0]
                    - self.group2()[1] * other.group0()[1]
                    - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Dipole> for DipoleOrthogonalOrigin {
    type Output = Sphere;

    fn wedge(self, other: Dipole) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[3]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn wedge(self, other: DualNum) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
                g2: self.group2() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for DipoleOrthogonalOrigin {
    type Output = Plane;

    fn wedge(self, other: FlatPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Plane;

    fn wedge(self, other: FlatPointAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for DipoleOrthogonalOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Flector> for DipoleOrthogonalOrigin {
    type Output = Plane;

    fn wedge(self, other: Flector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Plane;

    fn wedge(self, other: FlectorAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Infinity> for DipoleOrthogonalOrigin {
    type Output = Line;

    fn wedge(self, other: Infinity) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Line> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<LineAtInfinity> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<LineAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: LineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Motor> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<MultiVector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group7()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group6()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: self.group1() * Simd32x3::from(other.group0()[0]),
                g5: self.group2() * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group2()[0]),
                g7: self.group0() * Simd32x3::from(other.group2()[1]) + self.group2() * Simd32x3::from(other.group2()[0]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[1], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group2()[1], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group2()[1], -other.group1()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    - Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group3()[0], other.group5()[0]])
                    - Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group3()[1], other.group5()[1]])
                    - Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group3()[2], other.group5()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group2()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group2()[0] * other.group0()[0] - self.group2()[1] * other.group0()[1] - self.group2()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for DipoleOrthogonalOrigin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: Origin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()),
                g1: self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Rotor> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Rotor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<RoundPoint> for DipoleOrthogonalOrigin {
    type Output = Circle;

    fn wedge(self, other: RoundPoint) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group1() * Simd32x3::from(other.group1()[0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]) + self.group2() * Simd32x3::from(other.group1()[0]),
                g2: Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for DipoleOrthogonalOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: self.group1() * Simd32x3::from(other.group0()[0]),
                g1: self.group0() * Simd32x3::from(other.group0()[1]) + self.group2() * Simd32x3::from(other.group0()[0]),
                g2: self.group1() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Wedge<Scalar> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;

    fn wedge(self, other: Scalar) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for DipoleOrthogonalOrigin {
    type Output = Plane;

    fn wedge(self, other: Transflector) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Translator> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for DualNum {
    type Output = AntiCircleOnOrigin;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for DualNum {
    type Output = AntiDipoleOnOrigin;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for DualNum {
    type Output = AntiFlatPointAtOrigin;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for DualNum {
    type Output = AntiLineAtOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiPlane> for DualNum {
    type Output = AntiPlane;

    fn wedge(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for DualNum {
    type Output = AntiPlaneAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiScalar> for DualNum {
    type Output = AntiScalar;

    fn wedge(self, other: AntiScalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for DualNum {
    type Output = AntiSphereOnOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<Circle> for DualNum {
    type Output = Circle;

    fn wedge(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
                g2: Simd32x4::from(self.group0()[0]) * other.group2(),
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for DualNum {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
                g2: Simd32x3::from(self.group0()[0]) * other.group2(),
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for DualNum {
    type Output = CircleAtInfinity;

    fn wedge(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for DualNum {
    type Output = CircleAtOrigin;

    fn wedge(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for DualNum {
    type Output = CircleOnOrigin;

    fn wedge(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for DualNum {
    type Output = CircleOrthogonalOrigin;

    fn wedge(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<Dipole> for DualNum {
    type Output = Dipole;

    fn wedge(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
                g2: Simd32x4::from(self.group0()[0]) * other.group2(),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for DualNum {
    type Output = DipoleAligningOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for DualNum {
    type Output = DipoleAtInfinity;

    fn wedge(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for DualNum {
    type Output = DipoleAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for DualNum {
    type Output = DipoleOnOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for DualNum {
    type Output = DipoleOrthogonalOrigin;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
                g2: Simd32x3::from(self.group0()[0]) * other.group2(),
            },
        }
    }
}

impl Wedge<DualNum> for DualNum {
    type Output = DualNum;

    fn wedge(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from(self.group0()[0]) * other.group0() + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[0]]),
            },
        }
    }
}

impl Wedge<FlatPoint> for DualNum {
    type Output = FlatPoint;

    fn wedge(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for DualNum {
    type Output = FlatPointAtInfinity;

    fn wedge(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for DualNum {
    type Output = FlatPointAtOrigin;

    fn wedge(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<Flector> for DualNum {
    type Output = Flector;

    fn wedge(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for DualNum {
    type Output = FlectorAtInfinity;

    fn wedge(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<Horizon> for DualNum {
    type Output = Horizon;

    fn wedge(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<Infinity> for DualNum {
    type Output = Infinity;

    fn wedge(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<Line> for DualNum {
    type Output = Line;

    fn wedge(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<LineAtInfinity> for DualNum {
    type Output = LineAtInfinity;

    fn wedge(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<LineAtOrigin> for DualNum {
    type Output = LineAtOrigin;

    fn wedge(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<Motor> for DualNum {
    type Output = Motor;

    fn wedge(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<MultiVector> for DualNum {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * other.group0() + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[0]]),
                g1: Simd32x3::from(self.group0()[0]) * other.group1(),
                g2: Simd32x2::from(self.group0()[0]) * other.group2(),
                g3: Simd32x4::from(self.group0()[0]) * other.group3(),
                g4: Simd32x3::from(self.group0()[0]) * other.group4(),
                g5: Simd32x3::from(self.group0()[0]) * other.group5(),
                g6: Simd32x3::from(self.group0()[0]) * other.group6(),
                g7: Simd32x3::from(self.group0()[0]) * other.group7(),
                g8: Simd32x4::from(self.group0()[0]) * other.group8(),
                g9: Simd32x3::from(self.group0()[0]) * other.group9(),
                g10: Simd32x2::from(self.group0()[0]) * other.group10(),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for DualNum {
    type Output = NullCircleAtOrigin;

    fn wedge(self, other: NullCircleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for DualNum {
    type Output = NullDipoleAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<NullSphereAtOrigin> for DualNum {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: NullSphereAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<Origin> for DualNum {
    type Output = Origin;

    fn wedge(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<Plane> for DualNum {
    type Output = Plane;

    fn wedge(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<PlaneAtOrigin> for DualNum {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: PlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<Rotor> for DualNum {
    type Output = Rotor;

    fn wedge(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<RoundPoint> for DualNum {
    type Output = RoundPoint;

    fn wedge(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for DualNum {
    type Output = RoundPointAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<Scalar> for DualNum {
    type Output = DualNum;

    fn wedge(self, other: Scalar) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Wedge<Sphere> for DualNum {
    type Output = Sphere;

    fn wedge(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<SphereAtOrigin> for DualNum {
    type Output = SphereAtOrigin;

    fn wedge(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<SphereOnOrigin> for DualNum {
    type Output = SphereOnOrigin;

    fn wedge(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<Transflector> for DualNum {
    type Output = Transflector;

    fn wedge(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<Translator> for DualNum {
    type Output = Translator;

    fn wedge(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for FlatPoint {
    type Output = Plane;

    fn wedge(self, other: AntiCircleOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for FlatPoint {
    type Output = Plane;

    fn wedge(self, other: AntiLineAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for FlatPoint {
    type Output = Line;

    fn wedge(self, other: AntiPlane) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for FlatPoint {
    type Output = Line;

    fn wedge(self, other: AntiPlaneAtOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for FlatPoint {
    type Output = Line;

    fn wedge(self, other: AntiSphereOnOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for FlatPoint {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for FlatPoint {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<Dipole> for FlatPoint {
    type Output = Plane;

    fn wedge(self, other: Dipole) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for FlatPoint {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for FlatPoint {
    type Output = Plane;

    fn wedge(self, other: DipoleAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for FlatPoint {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for FlatPoint {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for FlatPoint {
    type Output = Plane;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DualNum> for FlatPoint {
    type Output = FlatPoint;

    fn wedge(self, other: DualNum) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for FlatPoint {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group8()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[0]) - Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group4(),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for FlatPoint {
    type Output = AntiScalar;

    fn wedge(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for FlatPoint {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for FlatPoint {
    type Output = LineAtOrigin;

    fn wedge(self, other: Origin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for FlatPoint {
    type Output = Line;

    fn wedge(self, other: RoundPoint) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group1()[0]) - Simd32x3::from(self.group0()[3]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for FlatPoint {
    type Output = LineAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Scalar> for FlatPoint {
    type Output = FlatPoint;

    fn wedge(self, other: Scalar) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for FlatPointAtInfinity {
    type Output = Plane;

    fn wedge(self, other: AntiCircleOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for FlatPointAtInfinity {
    type Output = Horizon;

    fn wedge(self, other: AntiLineAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for FlatPointAtInfinity {
    type Output = LineAtInfinity;

    fn wedge(self, other: AntiPlane) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for FlatPointAtInfinity {
    type Output = LineAtInfinity;

    fn wedge(self, other: AntiPlaneAtOrigin) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for FlatPointAtInfinity {
    type Output = Line;

    fn wedge(self, other: AntiSphereOnOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Dipole> for FlatPointAtInfinity {
    type Output = Plane;

    fn wedge(self, other: Dipole) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for FlatPointAtInfinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for FlatPointAtInfinity {
    type Output = Horizon;

    fn wedge(self, other: DipoleAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for FlatPointAtInfinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for FlatPointAtInfinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = Plane;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn wedge(self, other: DualNum) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for FlatPointAtInfinity {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group6()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0() * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group2()[0]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for FlatPointAtInfinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for FlatPointAtInfinity {
    type Output = LineAtOrigin;

    fn wedge(self, other: Origin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for FlatPointAtInfinity {
    type Output = Line;

    fn wedge(self, other: RoundPoint) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group1()[0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for FlatPointAtInfinity {
    type Output = LineAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Scalar> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;

    fn wedge(self, other: Scalar) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for FlatPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: AntiCircleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for FlatPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for FlatPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for FlatPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiPlane> for FlatPointAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: AntiPlane) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for FlatPointAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for FlatPointAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Circle> for FlatPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group2()[3],
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for FlatPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for FlatPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Wedge<Dipole> for FlatPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Dipole) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for FlatPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for FlatPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<DualNum> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn wedge(self, other: DualNum) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Wedge<MultiVector> for FlatPointAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, -other.group8()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()) * other.group4(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Wedge<RoundPoint> for FlatPointAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: RoundPoint) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<Scalar> for FlatPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn wedge(self, other: Scalar) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for Flector {
    type Output = Plane;

    fn wedge(self, other: AntiCircleOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for Flector {
    type Output = AntiScalar;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for Flector {
    type Output = AntiScalar;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for Flector {
    type Output = Plane;

    fn wedge(self, other: AntiLineAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for Flector {
    type Output = Motor;

    fn wedge(self, other: AntiPlane) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Flector {
    type Output = Motor;

    fn wedge(self, other: AntiPlaneAtOrigin) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Flector {
    type Output = Motor;

    fn wedge(self, other: AntiSphereOnOrigin) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for Flector {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group2()[3],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for Flector {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for Flector {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for Flector {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for Flector {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for Flector {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2] - self.group0()[3] * other.group1()[3],
            },
        }
    }
}

impl Wedge<Dipole> for Flector {
    type Output = Plane;

    fn wedge(self, other: Dipole) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for Flector {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for Flector {
    type Output = Plane;

    fn wedge(self, other: DipoleAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for Flector {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for Flector {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for Flector {
    type Output = Plane;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DualNum> for Flector {
    type Output = Flector;

    fn wedge(self, other: DualNum) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
                g1: self.group1() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for Flector {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, -other.group8()[3]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[0]) - Simd32x3::from(self.group0()[3]) * other.group1(),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group0()[3]) * other.group4()
                    + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for Flector {
    type Output = AntiScalar;

    fn wedge(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for Flector {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for Flector {
    type Output = Rotor;

    fn wedge(self, other: Origin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Wedge<RoundPoint> for Flector {
    type Output = Motor;

    fn wedge(self, other: RoundPoint) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[3]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[0]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Flector {
    type Output = Rotor;

    fn wedge(self, other: RoundPointAtOrigin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
            },
        }
    }
}

impl Wedge<Scalar> for Flector {
    type Output = Flector;

    fn wedge(self, other: Scalar) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for FlectorAtInfinity {
    type Output = Plane;

    fn wedge(self, other: AntiCircleOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for FlectorAtInfinity {
    type Output = Horizon;

    fn wedge(self, other: AntiLineAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for FlectorAtInfinity {
    type Output = LineAtInfinity;

    fn wedge(self, other: AntiPlane) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for FlectorAtInfinity {
    type Output = LineAtInfinity;

    fn wedge(self, other: AntiPlaneAtOrigin) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for FlectorAtInfinity {
    type Output = Motor;

    fn wedge(self, other: AntiSphereOnOrigin) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[3]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Dipole> for FlectorAtInfinity {
    type Output = Plane;

    fn wedge(self, other: Dipole) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for FlectorAtInfinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for FlectorAtInfinity {
    type Output = Horizon;

    fn wedge(self, other: DipoleAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for FlectorAtInfinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for FlectorAtInfinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = Plane;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn wedge(self, other: DualNum) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for FlectorAtInfinity {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[0]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for FlectorAtInfinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for FlectorAtInfinity {
    type Output = Rotor;

    fn wedge(self, other: Origin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for FlectorAtInfinity {
    type Output = Motor;

    fn wedge(self, other: RoundPoint) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() * Simd32x4::from(other.group1()[0]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for FlectorAtInfinity {
    type Output = Rotor;

    fn wedge(self, other: RoundPointAtOrigin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Scalar> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;

    fn wedge(self, other: Scalar) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Horizon {
    type Output = AntiScalar;

    fn wedge(self, other: AntiSphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Wedge<DualNum> for Horizon {
    type Output = Horizon;

    fn wedge(self, other: DualNum) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Wedge<MultiVector> for Horizon {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group0()[0]]),
            },
        }
    }
}

impl Wedge<Origin> for Horizon {
    type Output = AntiScalar;

    fn wedge(self, other: Origin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<RoundPoint> for Horizon {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group1()[0],
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Horizon {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Wedge<Scalar> for Horizon {
    type Output = Horizon;

    fn wedge(self, other: Scalar) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for Infinity {
    type Output = Line;

    fn wedge(self, other: AntiCircleOnOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for Infinity {
    type Output = Plane;

    fn wedge(self, other: AntiDipoleOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for Infinity {
    type Output = Horizon;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for Infinity {
    type Output = LineAtInfinity;

    fn wedge(self, other: AntiLineAtOrigin) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiPlane> for Infinity {
    type Output = FlatPointAtInfinity;

    fn wedge(self, other: AntiPlane) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Infinity {
    type Output = FlatPointAtInfinity;

    fn wedge(self, other: AntiPlaneAtOrigin) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Infinity {
    type Output = FlatPoint;

    fn wedge(self, other: AntiSphereOnOrigin) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<Circle> for Infinity {
    type Output = Plane;

    fn wedge(self, other: Circle) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for Infinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: CircleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for Infinity {
    type Output = Horizon;

    fn wedge(self, other: CircleAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0() * other.group1()[3],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for Infinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: CircleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for Infinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: CircleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for Infinity {
    type Output = Plane;

    fn wedge(self, other: CircleOrthogonalOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl Wedge<Dipole> for Infinity {
    type Output = Line;

    fn wedge(self, other: Dipole) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for Infinity {
    type Output = LineAtOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for Infinity {
    type Output = LineAtInfinity;

    fn wedge(self, other: DipoleAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for Infinity {
    type Output = LineAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for Infinity {
    type Output = LineAtOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for Infinity {
    type Output = Line;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<DualNum> for Infinity {
    type Output = Infinity;

    fn wedge(self, other: DualNum) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Wedge<MultiVector> for Infinity {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group10()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group0()[0]]),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([0.0, 0.0, 0.0, -other.group2()[0]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group1(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g8: Simd32x4::from(self.group0()) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group6(),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, -other.group8()[3]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for Infinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: NullCircleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for Infinity {
    type Output = LineAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<NullSphereAtOrigin> for Infinity {
    type Output = AntiScalar;

    fn wedge(self, other: NullSphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<Origin> for Infinity {
    type Output = FlatPointAtOrigin;

    fn wedge(self, other: Origin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: 0.0 - self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<RoundPoint> for Infinity {
    type Output = FlatPoint;

    fn wedge(self, other: RoundPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(0.0) - Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Infinity {
    type Output = FlatPointAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: 0.0 - self.group0() * other.group0()[0],
            },
        }
    }
}

impl Wedge<Scalar> for Infinity {
    type Output = Infinity;

    fn wedge(self, other: Scalar) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<Sphere> for Infinity {
    type Output = AntiScalar;

    fn wedge(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group1()[0],
            },
        }
    }
}

impl Wedge<SphereAtOrigin> for Infinity {
    type Output = AntiScalar;

    fn wedge(self, other: SphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Wedge<SphereOnOrigin> for Infinity {
    type Output = AntiScalar;

    fn wedge(self, other: SphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for Line {
    type Output = AntiScalar;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for Line {
    type Output = AntiScalar;

    fn wedge(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for Line {
    type Output = Plane;

    fn wedge(self, other: AntiPlane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Line {
    type Output = Plane;

    fn wedge(self, other: AntiPlaneAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Line {
    type Output = Plane;

    fn wedge(self, other: AntiSphereOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Dipole> for Line {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for Line {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for Line {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for Line {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for Line {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for Line {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DualNum> for Line {
    type Output = Line;

    fn wedge(self, other: DualNum) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for Line {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group3()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - self.group1() * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for Line {
    type Output = AntiScalar;

    fn wedge(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Origin> for Line {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Origin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for Line {
    type Output = Plane;

    fn wedge(self, other: RoundPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([-other.group1()[0], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, -other.group1()[0], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, -other.group1()[0], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Line {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Scalar> for Line {
    type Output = Line;

    fn wedge(self, other: Scalar) -> Line {
        Line {
            groups: LineGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for LineAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for LineAtInfinity {
    type Output = Horizon;

    fn wedge(self, other: AntiPlane) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for LineAtInfinity {
    type Output = Horizon;

    fn wedge(self, other: AntiPlaneAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for LineAtInfinity {
    type Output = Plane;

    fn wedge(self, other: AntiSphereOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Dipole> for LineAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for LineAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for LineAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for LineAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for LineAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DualNum> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn wedge(self, other: DualNum) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for LineAtInfinity {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group3()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g9: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for LineAtInfinity {
    type Output = AntiScalar;

    fn wedge(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Origin> for LineAtInfinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Origin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for LineAtInfinity {
    type Output = Plane;

    fn wedge(self, other: RoundPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group1()[0], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group1()[0], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group1()[0], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for LineAtInfinity {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Scalar> for LineAtInfinity {
    type Output = LineAtInfinity;

    fn wedge(self, other: Scalar) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for LineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for LineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for LineAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: AntiPlane) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for LineAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for LineAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Dipole> for LineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for LineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for LineAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DualNum> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: DualNum) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for LineAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Wedge<RoundPoint> for LineAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: RoundPoint) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Scalar> for LineAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: Scalar) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for Motor {
    type Output = AntiScalar;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for Motor {
    type Output = AntiScalar;

    fn wedge(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for Motor {
    type Output = Plane;

    fn wedge(self, other: AntiPlane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Motor {
    type Output = Plane;

    fn wedge(self, other: AntiPlaneAtOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Motor {
    type Output = Plane;

    fn wedge(self, other: AntiSphereOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Dipole> for Motor {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for Motor {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for Motor {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for Motor {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for Motor {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for Motor {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0
                    - self.group0()[0] * other.group1()[0]
                    - self.group0()[1] * other.group1()[1]
                    - self.group0()[2] * other.group1()[2]
                    - self.group1()[0] * other.group0()[0]
                    - self.group1()[1] * other.group0()[1]
                    - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DualNum> for Motor {
    type Output = Motor;

    fn wedge(self, other: DualNum) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for Motor {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group3()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - self.group1() * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for Motor {
    type Output = AntiScalar;

    fn wedge(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group1()[0] * other.group0()[0] - self.group1()[1] * other.group0()[1] - self.group1()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Origin> for Motor {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Origin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for Motor {
    type Output = Plane;

    fn wedge(self, other: RoundPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([-other.group1()[0], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, -other.group1()[0], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, -other.group1()[0], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Motor {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Scalar> for Motor {
    type Output = Motor;

    fn wedge(self, other: Scalar) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: AntiCircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[0]) * other.group1(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group1(),
                g7: Simd32x3::from(self.group2()[1]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(self.group3()[3]) * other.group1()
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: AntiDipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, -other.group0()[3]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g9: Simd32x3::from(0.0) - Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + self.group2() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, -other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g9: Simd32x3::from(0.0),
                g10: self.group2() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: AntiLineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(self.group0()[0]) * other.group0(),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group2()[0]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(self.group3()[3]) * other.group0(),
                g10: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: AntiPlane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group10()[0]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[3]]),
                g3: Simd32x4::from(self.group2()[0]) * other.group0(),
                g4: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g5: self.group1() * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g7: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()[3])
                    - Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group4()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group4()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group4()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]])
                    + Simd32x4::from(self.group5()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group5()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group5()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
                g9: self.group6() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group7()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group7()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: AntiPlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * other.group0(),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g5: Simd32x3::from(0.0) - Simd32x3::from(self.group2()[1]) * other.group0(),
                g6: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g7: Simd32x3::from(0.0) - Simd32x3::from(self.group3()[3]) * other.group0(),
                g8: Simd32x4::from(self.group4()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group4()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group4()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group5()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group5()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group5()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group7()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group7()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiScalar> for MultiVector {
    type Output = AntiScalar;

    fn wedge(self, other: AntiScalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: AntiSphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group10()[1]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[3], 0.0]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([-other.group0()[3], -other.group0()[3], -other.group0()[3], 0.0])
                    + Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[0], self.group2()[1]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
                g4: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g5: Simd32x3::from(0.0) - Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group0()[3]),
                g7: Simd32x3::from(0.0) - Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])
                    + self.group5() * Simd32x3::from(other.group0()[3]),
                g8: Simd32x4::from(self.group4()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group4()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group4()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group5()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group5()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group5()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group7()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group7()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group0()[3]),
                g10: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from([self.group8()[3], self.group8()[2]]) * Simd32x2::from([-other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Circle> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Circle) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group2()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group2()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group2()[2]])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, -other.group2()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * other.group0(),
                g7: Simd32x3::from(self.group0()[0]) * other.group1(),
                g8: Simd32x4::from(self.group0()[0]) * other.group2(),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    - Simd32x3::from(self.group2()[1]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + self.group2() * Simd32x2::from(other.group2()[3]),
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: CircleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group2()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group2()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group2()[2]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * other.group0(),
                g7: Simd32x3::from(self.group0()[0]) * other.group1(),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], 0.0]),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group2()
                    - Simd32x3::from(self.group2()[1]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: CircleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, -other.group1()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * other.group0(),
                g8: Simd32x4::from(self.group0()[0]) * other.group1(),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + self.group2() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: CircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(self.group2()[0]) * other.group1() - Simd32x3::from(self.group2()[1]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: CircleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * other.group0(),
                g7: Simd32x3::from(self.group0()[0]) * other.group1(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - Simd32x3::from(self.group2()[1]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: CircleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, -other.group1()[3]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * other.group1(),
                g9: Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    - Simd32x3::from(self.group2()[1]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + self.group2() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Wedge<Dipole> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Dipole) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group2()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group2()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group2()[2]])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group2()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]),
                g4: Simd32x3::from(self.group0()[0]) * other.group1(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group1(),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    + Simd32x3::from(self.group2()[1]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group3()[3]) * other.group1()
                    + self.group4() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group4()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group4()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group4()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: DipoleAligningOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group1()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group2()[1]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group4()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group4()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group4()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: DipoleAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group1()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[3]]),
                g4: Simd32x3::from(self.group0()[0]) * other.group0(),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g6: Simd32x3::from(self.group2()[0]) * other.group0(),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group3()[3]) * other.group0()
                    + self.group4() * Simd32x3::from(other.group1()[3]),
                g10: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: DipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * other.group1(),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g7: Simd32x3::from(self.group2()[0]) * other.group1() + Simd32x3::from(self.group2()[1]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(0.0)
                    - Simd32x2::from(self.group4()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]])
                    - Simd32x2::from(self.group4()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]])
                    - Simd32x2::from(self.group4()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: DipoleOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * other.group0(),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: self.group4() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group2()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group2()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group2()[2]])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(self.group0()[0]) * other.group1(),
                g5: Simd32x3::from(self.group0()[0]) * other.group2(),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group1(),
                g7: Simd32x3::from(self.group2()[0]) * other.group2() + Simd32x3::from(self.group2()[1]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group2()[2], other.group2()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group2()[2], 0.0, -other.group2()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group2()[1], other.group2()[0], 0.0])
                    + Simd32x3::from(self.group3()[3]) * other.group1()
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    - Simd32x2::from(self.group4()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]])
                    - Simd32x2::from(self.group4()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]])
                    - Simd32x2::from(self.group4()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: DualNum) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * other.group0() + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[0]]),
                g1: self.group1() * Simd32x3::from(other.group0()[0]),
                g2: self.group2() * Simd32x2::from(other.group0()[0]),
                g3: self.group3() * Simd32x4::from(other.group0()[0]),
                g4: self.group4() * Simd32x3::from(other.group0()[0]),
                g5: self.group5() * Simd32x3::from(other.group0()[0]),
                g6: self.group6() * Simd32x3::from(other.group0()[0]),
                g7: self.group7() * Simd32x3::from(other.group0()[0]),
                g8: self.group8() * Simd32x4::from(other.group0()[0]),
                g9: self.group9() * Simd32x3::from(other.group0()[0]),
                g10: self.group10() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: FlatPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group0()[3]),
                g10: Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: FlatPointAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group2()[0]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: FlatPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()),
                g8: Simd32x4::from(0.0),
                g9: self.group4() * Simd32x3::from(other.group0()),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Wedge<Flector> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Flector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[3]])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0) - self.group1() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group0()[3]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: FlectorAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Horizon> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Horizon) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Wedge<Infinity> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Infinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group10()[0]) * Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()]),
                g3: Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() * Simd32x3::from(other.group0()),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()),
                g8: Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group4()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0]),
                g9: self.group6() * Simd32x3::from(other.group0()),
                g10: Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, other.group0()]),
            },
        }
    }
}

impl Wedge<Line> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Line) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * other.group0(),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group1(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<LineAtInfinity> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: LineAtInfinity) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(self.group2()[0]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<LineAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: LineAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Wedge<Motor> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Motor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group1(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<MultiVector> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * other.group0()
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group10()[1]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group10()[0]])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group8()[2]])
                    + Simd32x2::from(self.group3()[3]) * Simd32x2::from([0.0, -other.group8()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group7()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group7()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group7()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group5()[2]])
                    + Simd32x2::from(self.group7()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group7()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group7()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group3()[2]])
                    + Simd32x2::from(self.group8()[3]) * Simd32x2::from([0.0, -other.group3()[3]])
                    + Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group10()[0]) * Simd32x2::from([0.0, other.group2()[1]])
                    + Simd32x2::from(self.group10()[1]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(self.group0()[0]) * other.group1() + self.group1() * Simd32x3::from(other.group0()[0]),
                g2: Simd32x2::from(self.group0()[0]) * other.group2() + self.group2() * Simd32x2::from(other.group0()[0]),
                g3: Simd32x4::from(self.group0()[0]) * other.group3()
                    + Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                        * Simd32x4::from([-other.group2()[0], -other.group2()[0], -other.group2()[0], 0.0])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group2()[0]])
                    + self.group3() * Simd32x4::from(other.group0()[0]),
                g4: Simd32x3::from(self.group0()[0]) * other.group4()
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group0()[0]),
                g5: Simd32x3::from(self.group0()[0]) * other.group5() + self.group1() * Simd32x3::from(other.group2()[1]) - Simd32x3::from(self.group2()[1]) * other.group1()
                    + self.group5() * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(self.group0()[0]) * other.group6()
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * other.group4()
                    + Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group2()[0])
                    + self.group6() * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(self.group0()[0]) * other.group7() - self.group1() * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group2()[0]) * other.group5()
                    + Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])
                    + Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group2()[1])
                    - Simd32x3::from(self.group3()[3]) * other.group1()
                    + self.group5() * Simd32x3::from(other.group2()[0])
                    + self.group7() * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from(self.group0()[0]) * other.group8()
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group5()[2], other.group5()[1], -other.group4()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group5()[2], 0.0, -other.group5()[0], -other.group4()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group5()[1], other.group5()[0], 0.0, -other.group4()[2]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], 0.0])
                    + Simd32x4::from(self.group4()[0]) * Simd32x4::from([other.group2()[1], 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group4()[1]) * Simd32x4::from([0.0, other.group2()[1], 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group4()[2]) * Simd32x4::from([0.0, 0.0, other.group2()[1], -other.group1()[2]])
                    + Simd32x4::from(self.group5()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group5()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group5()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0])
                    + self.group8() * Simd32x4::from(other.group0()[0]),
                g9: Simd32x3::from(self.group0()[0]) * other.group9()
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group7()[2], -other.group7()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group7()[2], 0.0, other.group7()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group7()[1], -other.group7()[0], 0.0])
                    + Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]])
                    - Simd32x3::from(self.group2()[1]) * other.group6()
                    + Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0])
                    + Simd32x3::from(self.group3()[3]) * other.group4()
                    + self.group4() * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + self.group6() * Simd32x3::from(other.group2()[1])
                    + Simd32x3::from(self.group7()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group7()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    - Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group2()[0])
                    + self.group9() * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(self.group0()[0]) * other.group10()
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group6()[0], -other.group8()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group6()[1], -other.group8()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group6()[2], -other.group8()[2]])
                    + self.group2() * Simd32x2::from(other.group8()[3])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([-other.group4()[2], 0.0])
                    - Simd32x2::from(self.group4()[0]) * Simd32x2::from([other.group3()[0], other.group5()[0]])
                    - Simd32x2::from(self.group4()[1]) * Simd32x2::from([other.group3()[1], other.group5()[1]])
                    - Simd32x2::from(self.group4()[2]) * Simd32x2::from([other.group3()[2], other.group5()[2]])
                    + Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group1()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group8()[3]) * other.group2() * Simd32x2::from([-1.0, 1.0])
                    + self.group10() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: NullCircleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group5()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group5()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group5()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * other.group0(),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from(self.group2()[1]) * other.group0(),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: NullDipoleAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g7: Simd32x3::from(self.group2()[1]) * other.group0(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group5()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group5()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group5()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group4()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([-other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<NullSphereAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: NullSphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0(), 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Origin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group10()[1]) * Simd32x2::from([0.0, other.group0()]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0(), 0.0]),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([-other.group0(), -other.group0(), -other.group0(), 0.0])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group4() * Simd32x3::from(other.group0()),
                g7: self.group5() * Simd32x3::from(other.group0()),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0) - Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group0()),
                g10: Simd32x2::from(self.group8()[3]) * Simd32x2::from([-other.group0(), 0.0]),
            },
        }
    }
}

impl Wedge<Plane> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Plane) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[3]]),
            },
        }
    }
}

impl Wedge<PlaneAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: PlaneAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * other.group0(),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Wedge<Rotor> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Rotor) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Wedge<RoundPoint> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: RoundPoint) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group9()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group9()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group9()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group10()[0]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group10()[1]) * Simd32x2::from([0.0, other.group1()[0]]),
                g1: Simd32x3::from(self.group0()[0]) * other.group0(),
                g2: Simd32x2::from(self.group0()[0]) * other.group1(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([-other.group1()[0], -other.group1()[0], -other.group1()[0], 0.0])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]]),
                g4: Simd32x3::from(self.group1()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group1()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g5: self.group1() * Simd32x3::from(other.group1()[1]) - Simd32x3::from(self.group2()[1]) * other.group0(),
                g6: Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0])
                    + self.group4() * Simd32x3::from(other.group1()[0]),
                g7: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group1()[1]) - Simd32x3::from(self.group3()[3]) * other.group0()
                    + self.group5() * Simd32x3::from(other.group1()[0]),
                g8: Simd32x4::from(self.group4()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group4()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group4()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]])
                    + Simd32x4::from(self.group5()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group5()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group5()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0]),
                g9: self.group6() * Simd32x3::from(other.group1()[1])
                    + Simd32x3::from(self.group7()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group7()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    - Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group1()[0]),
                g10: Simd32x2::from(self.group6()[0]) * Simd32x2::from([-other.group0()[0], 0.0])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([-other.group0()[1], 0.0])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([-other.group0()[2], 0.0])
                    + Simd32x2::from(self.group8()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group8()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group8()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group8()[3]) * other.group1() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: RoundPointAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group10()[0]) * Simd32x2::from([0.0, other.group0()[1]]) + Simd32x2::from(self.group10()[1]) * Simd32x2::from([0.0, other.group0()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()[0]) * other.group0(),
                g3: Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[0]])
                    * Simd32x4::from([-other.group0()[0], -other.group0()[0], -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group2()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group2()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]]),
                g4: Simd32x3::from(0.0),
                g5: self.group1() * Simd32x3::from(other.group0()[1]),
                g6: self.group4() * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(other.group0()[1]) + self.group5() * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group4()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0]),
                g9: self.group6() * Simd32x3::from(other.group0()[1]) - Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(self.group8()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0]),
            },
        }
    }
}

impl Wedge<Scalar> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Scalar) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
                g1: self.group1() * Simd32x3::from(other.group0()),
                g2: self.group2() * Simd32x2::from(other.group0()),
                g3: self.group3() * Simd32x4::from(other.group0()),
                g4: self.group4() * Simd32x3::from(other.group0()),
                g5: self.group5() * Simd32x3::from(other.group0()),
                g6: self.group6() * Simd32x3::from(other.group0()),
                g7: self.group7() * Simd32x3::from(other.group0()),
                g8: self.group8() * Simd32x4::from(other.group0()),
                g9: self.group9() * Simd32x3::from(other.group0()),
                g10: self.group10() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Wedge<Sphere> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Sphere) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group1()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * other.group0(),
                g10: Simd32x2::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<SphereAtOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: SphereAtOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group0()[1]]) + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<SphereOnOrigin> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: SphereOnOrigin) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group0()[2]])
                    + Simd32x2::from(self.group2()[1]) * Simd32x2::from([0.0, other.group0()[3]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[3], 0.0]),
            },
        }
    }
}

impl Wedge<Transflector> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Transflector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group2()[0]) * Simd32x2::from([0.0, other.group1()[3]])
                    + Simd32x2::from(self.group6()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group6()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group6()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(self.group0()[0]) * other.group0(),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(self.group2()[0]) * other.group0(),
                g8: Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, -other.group0()[2], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[2], 0.0, -other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([-other.group0()[1], other.group0()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group3()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group3()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group3()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[3]])
                    + Simd32x2::from(self.group4()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group4()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group4()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Translator> for MultiVector {
    type Output = MultiVector;

    fn wedge(self, other: Translator) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group0()[3]])
                    + Simd32x2::from(self.group3()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group3()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group3()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
                g9: Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g10: Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, -other.group0()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, -other.group0()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: AntiPlane) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group0()[3], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group0()[3], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for NullCircleAtOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for NullCircleAtOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Dipole> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Wedge<DualNum> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn wedge(self, other: DualNum) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlatPointAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Flector> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Flector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: FlectorAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Infinity> for NullCircleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Infinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<MultiVector> for NullCircleAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group5()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group5()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group5()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: self.group0() * Simd32x3::from(other.group0()[0]),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group2()[1]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group1()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group1()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPoint> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: RoundPoint) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[1], 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, other.group1()[1], 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, other.group1()[1], -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for NullCircleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Wedge<Scalar> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn wedge(self, other: Scalar) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for NullCircleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Transflector) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for NullDipoleAtOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiCircleOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for NullDipoleAtOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for NullDipoleAtOrigin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: AntiPlane) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group0()[3]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for NullDipoleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for NullDipoleAtOrigin {
    type Output = NullCircleAtOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group2()[0] - self.group0()[1] * other.group2()[1] - self.group0()[2] * other.group2()[2],
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<Dipole> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: Dipole) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: DipoleAtInfinity) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn wedge(self, other: DualNum) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPoint) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlatPointAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Flector> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Flector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: FlectorAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Infinity> for NullDipoleAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: Infinity) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Line> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Line) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<LineAtInfinity> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: LineAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Motor> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Motor) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<MultiVector> for NullDipoleAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group8()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g7: self.group0() * Simd32x3::from(other.group2()[1]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group5()[2], other.group5()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], 0.0, -other.group5()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group5()[1], other.group5()[0], 0.0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([-other.group4()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([-other.group4()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([-other.group4()[2], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPoint> for NullDipoleAtOrigin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: RoundPoint) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g1: self.group0() * Simd32x3::from(other.group1()[1]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for NullDipoleAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[1]),
            },
        }
    }
}

impl Wedge<Scalar> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;

    fn wedge(self, other: Scalar) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Transflector> for NullDipoleAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Transflector) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Translator> for NullDipoleAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Translator) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for NullSphereAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiPlane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Wedge<DualNum> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: DualNum) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Wedge<Infinity> for NullSphereAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Infinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<MultiVector> for NullSphereAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group2()[1]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPoint> for NullSphereAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group1()[1],
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for NullSphereAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Wedge<Scalar> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: Scalar) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for Origin {
    type Output = NullCircleAtOrigin;

    fn wedge(self, other: AntiCircleOnOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for Origin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiDipoleOnOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for Origin {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for Origin {
    type Output = NullCircleAtOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiPlane> for Origin {
    type Output = DipoleOnOrigin;

    fn wedge(self, other: AntiPlane) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Origin {
    type Output = NullDipoleAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Origin {
    type Output = NullDipoleAtOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Circle> for Origin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: Circle) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for Origin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: CircleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for Origin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: CircleAtInfinity) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for Origin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: CircleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for Origin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: CircleOrthogonalOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<Dipole> for Origin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: Dipole) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for Origin {
    type Output = LineAtOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for Origin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: DipoleAtInfinity) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for Origin {
    type Output = LineAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for Origin {
    type Output = CircleOnOrigin;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
                g1: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Wedge<DualNum> for Origin {
    type Output = Origin;

    fn wedge(self, other: DualNum) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0()[0],
            },
        }
    }
}

impl Wedge<FlatPoint> for Origin {
    type Output = LineAtOrigin;

    fn wedge(self, other: FlatPoint) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for Origin {
    type Output = LineAtOrigin;

    fn wedge(self, other: FlatPointAtInfinity) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<Flector> for Origin {
    type Output = Rotor;

    fn wedge(self, other: Flector) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for Origin {
    type Output = Rotor;

    fn wedge(self, other: FlectorAtInfinity) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<Horizon> for Origin {
    type Output = AntiScalar;

    fn wedge(self, other: Horizon) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<Infinity> for Origin {
    type Output = FlatPointAtOrigin;

    fn wedge(self, other: Infinity) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<Line> for Origin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Line) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<LineAtInfinity> for Origin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: LineAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<Motor> for Origin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Motor) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<MultiVector> for Origin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * Simd32x2::from([0.0, other.group10()[1]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(self.group0()) * Simd32x2::from([other.group0()[0], 0.0]),
                g3: Simd32x4::from(self.group0()) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(self.group0()) * other.group4(),
                g7: Simd32x3::from(self.group0()) * other.group5(),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]),
                g10: Simd32x2::from(self.group0()) * Simd32x2::from([other.group8()[3], 0.0]),
            },
        }
    }
}

impl Wedge<Plane> for Origin {
    type Output = AntiScalar;

    fn wedge(self, other: Plane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[3],
            },
        }
    }
}

impl Wedge<RoundPoint> for Origin {
    type Output = DipoleOnOrigin;

    fn wedge(self, other: RoundPoint) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Origin {
    type Output = FlatPointAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Wedge<Scalar> for Origin {
    type Output = Origin;

    fn wedge(self, other: Scalar) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<Sphere> for Origin {
    type Output = AntiScalar;

    fn wedge(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group1()[1],
            },
        }
    }
}

impl Wedge<SphereAtOrigin> for Origin {
    type Output = AntiScalar;

    fn wedge(self, other: SphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0()[1],
            },
        }
    }
}

impl Wedge<Transflector> for Origin {
    type Output = Rotor;

    fn wedge(self, other: Transflector) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl Wedge<Translator> for Origin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Translator) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlane> for Plane {
    type Output = AntiScalar;

    fn wedge(self, other: AntiPlane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Plane {
    type Output = AntiScalar;

    fn wedge(self, other: AntiPlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Plane {
    type Output = AntiScalar;

    fn wedge(self, other: AntiSphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<DualNum> for Plane {
    type Output = Plane;

    fn wedge(self, other: DualNum) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for Plane {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
            },
        }
    }
}

impl Wedge<Origin> for Plane {
    type Output = AntiScalar;

    fn wedge(self, other: Origin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<RoundPoint> for Plane {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[0],
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Plane {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0()[0],
            },
        }
    }
}

impl Wedge<Scalar> for Plane {
    type Output = Plane;

    fn wedge(self, other: Scalar) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiPlane> for PlaneAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiPlane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for PlaneAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiPlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for PlaneAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiSphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DualNum> for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DualNum) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for PlaneAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Wedge<RoundPoint> for PlaneAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Scalar> for PlaneAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Scalar) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for Rotor {
    type Output = AntiScalar;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for Rotor {
    type Output = AntiScalar;

    fn wedge(self, other: AntiLineAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for Rotor {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: AntiPlane) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Rotor {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Rotor {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Dipole> for Rotor {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for Rotor {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtInfinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for Rotor {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group1()[0] - self.group0()[1] * other.group1()[1] - self.group0()[2] * other.group1()[2],
            },
        }
    }
}

impl Wedge<DualNum> for Rotor {
    type Output = Rotor;

    fn wedge(self, other: DualNum) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for Rotor {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0]),
                g10: Simd32x2::from(0.0),
            },
        }
    }
}

impl Wedge<RoundPoint> for Rotor {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: RoundPoint) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Scalar> for Rotor {
    type Output = Rotor;

    fn wedge(self, other: Scalar) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for RoundPoint {
    type Output = Circle;

    fn wedge(self, other: AntiCircleOnOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group1(),
                g1: Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for RoundPoint {
    type Output = Sphere;

    fn wedge(self, other: AntiDipoleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], 0.0])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], 0.0])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], 0.0])
                    + self.group1() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for RoundPoint {
    type Output = SphereAtOrigin;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group1() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for RoundPoint {
    type Output = CircleOrthogonalOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<AntiPlane> for RoundPoint {
    type Output = Dipole;

    fn wedge(self, other: AntiPlane) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group1()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for RoundPoint {
    type Output = DipoleOrthogonalOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x3::from(0.0) - Simd32x3::from(self.group1()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for RoundPoint {
    type Output = Dipole;

    fn wedge(self, other: AntiSphereOnOrigin) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x4::from(0.0) - Simd32x4::from(self.group1()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<Circle> for RoundPoint {
    type Output = Sphere;

    fn wedge(self, other: Circle) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]])
                    + self.group1() * Simd32x2::from(other.group2()[3]),
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for RoundPoint {
    type Output = Sphere;

    fn wedge(self, other: CircleAligningOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group1()[2], -other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group1()[2], 0.0, other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], -other.group1()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group2()
                    - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group2()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group2()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group2()[2]]),
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for RoundPoint {
    type Output = Sphere;

    fn wedge(self, other: CircleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group1()[2]])
                    + self.group1() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for RoundPoint {
    type Output = Sphere;

    fn wedge(self, other: CircleAtOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group1() - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for RoundPoint {
    type Output = SphereOnOrigin;

    fn wedge(self, other: CircleOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for RoundPoint {
    type Output = Sphere;

    fn wedge(self, other: CircleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    - Simd32x3::from(self.group1()[1]) * other.group0(),
                g1: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], -other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], -other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], -other.group1()[2]])
                    + self.group1() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Wedge<Dipole> for RoundPoint {
    type Output = Circle;

    fn wedge(self, other: Dipole) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group1(),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group2()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for RoundPoint {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for RoundPoint {
    type Output = Circle;

    fn wedge(self, other: DipoleAtInfinity) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group1()[2], other.group1()[1], -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], 0.0, -other.group1()[0], -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group1()[1], other.group1()[0], 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for RoundPoint {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group1()[0]) * other.group1() + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for RoundPoint {
    type Output = CircleOnOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for RoundPoint {
    type Output = Circle;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group1(),
                g1: Simd32x3::from(self.group1()[0]) * other.group2() + Simd32x3::from(self.group1()[1]) * other.group0(),
                g2: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group2()[2], other.group2()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[2], 0.0, -other.group2()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group2()[1], other.group2()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<DualNum> for RoundPoint {
    type Output = RoundPoint;

    fn wedge(self, other: DualNum) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for RoundPoint {
    type Output = Line;

    fn wedge(self, other: FlatPoint) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[3])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for RoundPoint {
    type Output = Line;

    fn wedge(self, other: FlatPointAtInfinity) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for RoundPoint {
    type Output = LineAtOrigin;

    fn wedge(self, other: FlatPointAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<Flector> for RoundPoint {
    type Output = Motor;

    fn wedge(self, other: Flector) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for RoundPoint {
    type Output = Motor;

    fn wedge(self, other: FlectorAtInfinity) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Horizon> for RoundPoint {
    type Output = AntiScalar;

    fn wedge(self, other: Horizon) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group1()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<Infinity> for RoundPoint {
    type Output = FlatPoint;

    fn wedge(self, other: Infinity) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Wedge<Line> for RoundPoint {
    type Output = Plane;

    fn wedge(self, other: Line) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<LineAtInfinity> for RoundPoint {
    type Output = Plane;

    fn wedge(self, other: LineAtInfinity) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<LineAtOrigin> for RoundPoint {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: LineAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Motor> for RoundPoint {
    type Output = Plane;

    fn wedge(self, other: Motor) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], 0.0]),
            },
        }
    }
}

impl Wedge<MultiVector> for RoundPoint {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group9()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group9()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group9()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group10()[1]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group10()[0]]),
                g1: self.group0() * Simd32x3::from(other.group0()[0]),
                g2: self.group1() * Simd32x2::from(other.group0()[0]),
                g3: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([-other.group2()[0], -other.group2()[0], -other.group2()[0], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group2()[0]]),
                g4: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group1()[2], other.group1()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], 0.0, -other.group1()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group1()[1], other.group1()[0], 0.0]),
                g5: self.group0() * Simd32x3::from(other.group2()[1]) - Simd32x3::from(self.group1()[1]) * other.group1(),
                g6: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * other.group4(),
                g7: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group3()[3])
                    + Simd32x3::from(self.group1()[0]) * other.group5()
                    + Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, -other.group5()[2], other.group5()[1], -other.group4()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group5()[2], 0.0, -other.group5()[0], -other.group4()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([-other.group5()[1], other.group5()[0], 0.0, -other.group4()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group7()[2], -other.group7()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group7()[2], 0.0, other.group7()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group7()[1], -other.group7()[0], 0.0])
                    + Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]])
                    - Simd32x3::from(self.group1()[1]) * other.group6(),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[0], -other.group8()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group6()[1], -other.group8()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[2], -other.group8()[2]])
                    + self.group1() * Simd32x2::from(other.group8()[3]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for RoundPoint {
    type Output = SphereOnOrigin;

    fn wedge(self, other: NullCircleAtOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([-other.group0()[0], -other.group0()[1], -other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for RoundPoint {
    type Output = CircleOnOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
                g1: Simd32x3::from(self.group1()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<NullSphereAtOrigin> for RoundPoint {
    type Output = AntiScalar;

    fn wedge(self, other: NullSphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group1()[1] * other.group0(),
            },
        }
    }
}

impl Wedge<Origin> for RoundPoint {
    type Output = DipoleOnOrigin;

    fn wedge(self, other: Origin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([-other.group0(), -other.group0(), -other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()]),
            },
        }
    }
}

impl Wedge<Plane> for RoundPoint {
    type Output = AntiScalar;

    fn wedge(self, other: Plane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[0] * other.group0()[3],
            },
        }
    }
}

impl Wedge<PlaneAtOrigin> for RoundPoint {
    type Output = AntiScalar;

    fn wedge(self, other: PlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Rotor> for RoundPoint {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Rotor) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPoint> for RoundPoint {
    type Output = Dipole;

    fn wedge(self, other: RoundPoint) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group1()[0]) + Simd32x3::from(self.group1()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
                g2: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    - Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for RoundPoint {
    type Output = DipoleAligningOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(0.0) - self.group0() * Simd32x3::from(other.group0()[0]),
                g1: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]]),
            },
        }
    }
}

impl Wedge<Scalar> for RoundPoint {
    type Output = RoundPoint;

    fn wedge(self, other: Scalar) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Wedge<Sphere> for RoundPoint {
    type Output = AntiScalar;

    fn wedge(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0]
                    + self.group0()[1] * other.group0()[1]
                    + self.group0()[2] * other.group0()[2]
                    + self.group1()[0] * other.group1()[1]
                    + self.group1()[1] * other.group1()[0],
            },
        }
    }
}

impl Wedge<SphereAtOrigin> for RoundPoint {
    type Output = AntiScalar;

    fn wedge(self, other: SphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group1()[0] * other.group0()[1] + self.group1()[1] * other.group0()[0],
            },
        }
    }
}

impl Wedge<SphereOnOrigin> for RoundPoint {
    type Output = AntiScalar;

    fn wedge(self, other: SphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[1] * other.group0()[3],
            },
        }
    }
}

impl Wedge<Transflector> for RoundPoint {
    type Output = Motor;

    fn wedge(self, other: Transflector) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, -other.group0()[2], other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], 0.0, -other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([-other.group0()[1], other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Translator> for RoundPoint {
    type Output = Plane;

    fn wedge(self, other: Translator) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group0()[2]])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], 0.0]),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: AntiCircleOnOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
                g1: Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for RoundPointAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: AntiDipoleOnOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: self.group0() * Simd32x2::from(other.group0()[3]),
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for RoundPointAtOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for RoundPointAtOrigin {
    type Output = CircleAtOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiPlane> for RoundPointAtOrigin {
    type Output = DipoleAligningOrigin;

    fn wedge(self, other: AntiPlane) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for RoundPointAtOrigin {
    type Output = DipoleAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for RoundPointAtOrigin {
    type Output = DipoleAligningOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
                g1: Simd32x4::from(0.0) - Simd32x4::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<Circle> for RoundPointAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: Circle) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    - Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: self.group0() * Simd32x2::from(other.group2()[3]),
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: CircleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group2() - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for RoundPointAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: CircleAtInfinity) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g1: self.group0() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: CircleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1() - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: CircleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = Sphere;

    fn wedge(self, other: CircleOrthogonalOrigin) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    - Simd32x3::from(self.group0()[1]) * other.group0(),
                g1: self.group0() * Simd32x2::from(other.group1()[3]),
            },
        }
    }
}

impl Wedge<Dipole> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: Dipole) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])
                    + Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for RoundPointAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])
                    + Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: DipoleAtInfinity) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]),
                g2: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for RoundPointAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1() + Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for RoundPointAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
                g1: Simd32x3::from(self.group0()[0]) * other.group2() + Simd32x3::from(self.group0()[1]) * other.group0(),
                g2: Simd32x3::from(self.group0()[1]) * other.group1(),
            },
        }
    }
}

impl Wedge<DualNum> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn wedge(self, other: DualNum) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<FlatPoint> for RoundPointAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: FlatPoint) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for RoundPointAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: FlatPointAtInfinity) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<Flector> for RoundPointAtOrigin {
    type Output = Rotor;

    fn wedge(self, other: Flector) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for RoundPointAtOrigin {
    type Output = Rotor;

    fn wedge(self, other: FlectorAtInfinity) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<Horizon> for RoundPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Horizon) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<Infinity> for RoundPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn wedge(self, other: Infinity) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<Line> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Line) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<LineAtInfinity> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: LineAtInfinity) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
            },
        }
    }
}

impl Wedge<Motor> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Motor) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group1(),
            },
        }
    }
}

impl Wedge<MultiVector> for RoundPointAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group10()[1]]) + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group10()[0]]),
                g1: Simd32x3::from(0.0),
                g2: self.group0() * Simd32x2::from(other.group0()[0]),
                g3: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, 0.0, 0.0, -other.group2()[0]]),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group1(),
                g6: Simd32x3::from(self.group0()[0]) * other.group4(),
                g7: Simd32x3::from(self.group0()[0]) * other.group5()
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]),
                g8: Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]])
                    - Simd32x3::from(self.group0()[1]) * other.group6(),
                g10: self.group0() * Simd32x2::from(other.group8()[3]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: NullCircleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for RoundPointAtOrigin {
    type Output = LineAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()[1]) * other.group0(),
            },
        }
    }
}

impl Wedge<NullSphereAtOrigin> for RoundPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: NullSphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Wedge<Origin> for RoundPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn wedge(self, other: Origin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: 0.0 - self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Wedge<Plane> for RoundPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Plane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[3],
            },
        }
    }
}

impl Wedge<RoundPoint> for RoundPointAtOrigin {
    type Output = DipoleAligningOrigin;

    fn wedge(self, other: RoundPoint) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * other.group0(),
                g1: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[1]])
                    - Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for RoundPointAtOrigin {
    type Output = FlatPointAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0()[0] * other.group0()[1] - self.group0()[1] * other.group0()[0],
            },
        }
    }
}

impl Wedge<Scalar> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;

    fn wedge(self, other: Scalar) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Wedge<Sphere> for RoundPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Sphere) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group1()[1] + self.group0()[1] * other.group1()[0],
            },
        }
    }
}

impl Wedge<SphereAtOrigin> for RoundPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: SphereAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[1] + self.group0()[1] * other.group0()[0],
            },
        }
    }
}

impl Wedge<SphereOnOrigin> for RoundPointAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: SphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[1] * other.group0()[3],
            },
        }
    }
}

impl Wedge<Transflector> for RoundPointAtOrigin {
    type Output = Rotor;

    fn wedge(self, other: Transflector) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]),
            },
        }
    }
}

impl Wedge<Translator> for RoundPointAtOrigin {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Translator) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for Scalar {
    type Output = AntiCircleOnOrigin;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiCircleOnOrigin {
        AntiCircleOnOrigin {
            groups: AntiCircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for Scalar {
    type Output = AntiDipoleOnOrigin;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiDipoleOnOrigin {
        AntiDipoleOnOrigin {
            groups: AntiDipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiFlatPointAtOrigin> for Scalar {
    type Output = AntiFlatPointAtOrigin;

    fn wedge(self, other: AntiFlatPointAtOrigin) -> AntiFlatPointAtOrigin {
        AntiFlatPointAtOrigin {
            groups: AntiFlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for Scalar {
    type Output = AntiLineAtOrigin;

    fn wedge(self, other: AntiLineAtOrigin) -> AntiLineAtOrigin {
        AntiLineAtOrigin {
            groups: AntiLineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiPlane> for Scalar {
    type Output = AntiPlane;

    fn wedge(self, other: AntiPlane) -> AntiPlane {
        AntiPlane {
            groups: AntiPlaneGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Scalar {
    type Output = AntiPlaneAtOrigin;

    fn wedge(self, other: AntiPlaneAtOrigin) -> AntiPlaneAtOrigin {
        AntiPlaneAtOrigin {
            groups: AntiPlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiScalar> for Scalar {
    type Output = AntiScalar;

    fn wedge(self, other: AntiScalar) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Scalar {
    type Output = AntiSphereOnOrigin;

    fn wedge(self, other: AntiSphereOnOrigin) -> AntiSphereOnOrigin {
        AntiSphereOnOrigin {
            groups: AntiSphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<Circle> for Scalar {
    type Output = Circle;

    fn wedge(self, other: Circle) -> Circle {
        Circle {
            groups: CircleGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x4::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for Scalar {
    type Output = CircleAligningOrigin;

    fn wedge(self, other: CircleAligningOrigin) -> CircleAligningOrigin {
        CircleAligningOrigin {
            groups: CircleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Wedge<CircleAtInfinity> for Scalar {
    type Output = CircleAtInfinity;

    fn wedge(self, other: CircleAtInfinity) -> CircleAtInfinity {
        CircleAtInfinity {
            groups: CircleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for Scalar {
    type Output = CircleAtOrigin;

    fn wedge(self, other: CircleAtOrigin) -> CircleAtOrigin {
        CircleAtOrigin {
            groups: CircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for Scalar {
    type Output = CircleOnOrigin;

    fn wedge(self, other: CircleOnOrigin) -> CircleOnOrigin {
        CircleOnOrigin {
            groups: CircleOnOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for Scalar {
    type Output = CircleOrthogonalOrigin;

    fn wedge(self, other: CircleOrthogonalOrigin) -> CircleOrthogonalOrigin {
        CircleOrthogonalOrigin {
            groups: CircleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<Dipole> for Scalar {
    type Output = Dipole;

    fn wedge(self, other: Dipole) -> Dipole {
        Dipole {
            groups: DipoleGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x4::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for Scalar {
    type Output = DipoleAligningOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> DipoleAligningOrigin {
        DipoleAligningOrigin {
            groups: DipoleAligningOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for Scalar {
    type Output = DipoleAtInfinity;

    fn wedge(self, other: DipoleAtInfinity) -> DipoleAtInfinity {
        DipoleAtInfinity {
            groups: DipoleAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for Scalar {
    type Output = DipoleAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> DipoleAtOrigin {
        DipoleAtOrigin {
            groups: DipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for Scalar {
    type Output = DipoleOnOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> DipoleOnOrigin {
        DipoleOnOrigin {
            groups: DipoleOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for Scalar {
    type Output = DipoleOrthogonalOrigin;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> DipoleOrthogonalOrigin {
        DipoleOrthogonalOrigin {
            groups: DipoleOrthogonalOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x3::from(self.group0()) * other.group2(),
            },
        }
    }
}

impl Wedge<DualNum> for Scalar {
    type Output = DualNum;

    fn wedge(self, other: DualNum) -> DualNum {
        DualNum {
            groups: DualNumGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<FlatPoint> for Scalar {
    type Output = FlatPoint;

    fn wedge(self, other: FlatPoint) -> FlatPoint {
        FlatPoint {
            groups: FlatPointGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<FlatPointAtInfinity> for Scalar {
    type Output = FlatPointAtInfinity;

    fn wedge(self, other: FlatPointAtInfinity) -> FlatPointAtInfinity {
        FlatPointAtInfinity {
            groups: FlatPointAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<FlatPointAtOrigin> for Scalar {
    type Output = FlatPointAtOrigin;

    fn wedge(self, other: FlatPointAtOrigin) -> FlatPointAtOrigin {
        FlatPointAtOrigin {
            groups: FlatPointAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<Flector> for Scalar {
    type Output = Flector;

    fn wedge(self, other: Flector) -> Flector {
        Flector {
            groups: FlectorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<FlectorAtInfinity> for Scalar {
    type Output = FlectorAtInfinity;

    fn wedge(self, other: FlectorAtInfinity) -> FlectorAtInfinity {
        FlectorAtInfinity {
            groups: FlectorAtInfinityGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<Horizon> for Scalar {
    type Output = Horizon;

    fn wedge(self, other: Horizon) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<Infinity> for Scalar {
    type Output = Infinity;

    fn wedge(self, other: Infinity) -> Infinity {
        Infinity {
            groups: InfinityGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<Line> for Scalar {
    type Output = Line;

    fn wedge(self, other: Line) -> Line {
        Line {
            groups: LineGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<LineAtInfinity> for Scalar {
    type Output = LineAtInfinity;

    fn wedge(self, other: LineAtInfinity) -> LineAtInfinity {
        LineAtInfinity {
            groups: LineAtInfinityGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<LineAtOrigin> for Scalar {
    type Output = LineAtOrigin;

    fn wedge(self, other: LineAtOrigin) -> LineAtOrigin {
        LineAtOrigin {
            groups: LineAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<Motor> for Scalar {
    type Output = Motor;

    fn wedge(self, other: Motor) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<MultiVector> for Scalar {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
                g1: Simd32x3::from(self.group0()) * other.group1(),
                g2: Simd32x2::from(self.group0()) * other.group2(),
                g3: Simd32x4::from(self.group0()) * other.group3(),
                g4: Simd32x3::from(self.group0()) * other.group4(),
                g5: Simd32x3::from(self.group0()) * other.group5(),
                g6: Simd32x3::from(self.group0()) * other.group6(),
                g7: Simd32x3::from(self.group0()) * other.group7(),
                g8: Simd32x4::from(self.group0()) * other.group8(),
                g9: Simd32x3::from(self.group0()) * other.group9(),
                g10: Simd32x2::from(self.group0()) * other.group10(),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for Scalar {
    type Output = NullCircleAtOrigin;

    fn wedge(self, other: NullCircleAtOrigin) -> NullCircleAtOrigin {
        NullCircleAtOrigin {
            groups: NullCircleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for Scalar {
    type Output = NullDipoleAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> NullDipoleAtOrigin {
        NullDipoleAtOrigin {
            groups: NullDipoleAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<NullSphereAtOrigin> for Scalar {
    type Output = NullSphereAtOrigin;

    fn wedge(self, other: NullSphereAtOrigin) -> NullSphereAtOrigin {
        NullSphereAtOrigin {
            groups: NullSphereAtOriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<Origin> for Scalar {
    type Output = Origin;

    fn wedge(self, other: Origin) -> Origin {
        Origin {
            groups: OriginGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<Plane> for Scalar {
    type Output = Plane;

    fn wedge(self, other: Plane) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<PlaneAtOrigin> for Scalar {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: PlaneAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<Rotor> for Scalar {
    type Output = Rotor;

    fn wedge(self, other: Rotor) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<RoundPoint> for Scalar {
    type Output = RoundPoint;

    fn wedge(self, other: RoundPoint) -> RoundPoint {
        RoundPoint {
            groups: RoundPointGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x2::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Scalar {
    type Output = RoundPointAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> RoundPointAtOrigin {
        RoundPointAtOrigin {
            groups: RoundPointAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<Scalar> for Scalar {
    type Output = Scalar;

    fn wedge(self, other: Scalar) -> Scalar {
        Scalar {
            groups: ScalarGroups {
                g0: self.group0() * other.group0(),
            },
        }
    }
}

impl Wedge<Sphere> for Scalar {
    type Output = Sphere;

    fn wedge(self, other: Sphere) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x2::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<SphereAtOrigin> for Scalar {
    type Output = SphereAtOrigin;

    fn wedge(self, other: SphereAtOrigin) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: Simd32x2::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<SphereOnOrigin> for Scalar {
    type Output = SphereOnOrigin;

    fn wedge(self, other: SphereOnOrigin) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<Transflector> for Scalar {
    type Output = Transflector;

    fn wedge(self, other: Transflector) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: Simd32x3::from(self.group0()) * other.group0(),
                g1: Simd32x4::from(self.group0()) * other.group1(),
            },
        }
    }
}

impl Wedge<Translator> for Scalar {
    type Output = Translator;

    fn wedge(self, other: Translator) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()) * other.group0(),
            },
        }
    }
}

impl Wedge<AntiPlane> for Sphere {
    type Output = AntiScalar;

    fn wedge(self, other: AntiPlane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[0] * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Sphere {
    type Output = AntiScalar;

    fn wedge(self, other: AntiPlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Sphere {
    type Output = AntiScalar;

    fn wedge(self, other: AntiSphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group1()[1] * other.group0()[3],
            },
        }
    }
}

impl Wedge<DualNum> for Sphere {
    type Output = Sphere;

    fn wedge(self, other: DualNum) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Infinity> for Sphere {
    type Output = AntiScalar;

    fn wedge(self, other: Infinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group1()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<MultiVector> for Sphere {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group2()[1]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: self.group0() * Simd32x3::from(other.group0()[0]),
                g10: self.group1() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Origin> for Sphere {
    type Output = AntiScalar;

    fn wedge(self, other: Origin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group1()[1] * other.group0(),
            },
        }
    }
}

impl Wedge<RoundPoint> for Sphere {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0]
                    + self.group0()[1] * other.group0()[1]
                    + self.group0()[2] * other.group0()[2]
                    + self.group1()[0] * other.group1()[1]
                    + self.group1()[1] * other.group1()[0],
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Sphere {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group1()[0] * other.group0()[1] + self.group1()[1] * other.group0()[0],
            },
        }
    }
}

impl Wedge<Scalar> for Sphere {
    type Output = Sphere;

    fn wedge(self, other: Scalar) -> Sphere {
        Sphere {
            groups: SphereGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiPlane> for SphereAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiPlane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for SphereAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiSphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[1] * other.group0()[3],
            },
        }
    }
}

impl Wedge<DualNum> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: DualNum) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Infinity> for SphereAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Infinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0(),
            },
        }
    }
}

impl Wedge<MultiVector> for SphereAtOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group2()[1]]) + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from(0.0),
                g10: self.group0() * Simd32x2::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Origin> for SphereAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Origin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[1] * other.group0(),
            },
        }
    }
}

impl Wedge<RoundPoint> for SphereAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group1()[1] + self.group0()[1] * other.group1()[0],
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for SphereAtOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[1] + self.group0()[1] * other.group0()[0],
            },
        }
    }
}

impl Wedge<Scalar> for SphereAtOrigin {
    type Output = SphereAtOrigin;

    fn wedge(self, other: Scalar) -> SphereAtOrigin {
        SphereAtOrigin {
            groups: SphereAtOriginGroups {
                g0: self.group0() * Simd32x2::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiPlane> for SphereOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiPlane) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group0()[3],
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for SphereOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiPlaneAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for SphereOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: AntiSphereOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DualNum> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: DualNum) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Infinity> for SphereOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: Infinity) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0(),
            },
        }
    }
}

impl Wedge<MultiVector> for SphereOnOrigin {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group2()[1]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: Simd32x4::from(0.0),
                g9: Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPoint> for SphereOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPoint) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2] + self.group0()[3] * other.group1()[1],
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for SphereOnOrigin {
    type Output = AntiScalar;

    fn wedge(self, other: RoundPointAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: self.group0()[3] * other.group0()[1],
            },
        }
    }
}

impl Wedge<Scalar> for SphereOnOrigin {
    type Output = SphereOnOrigin;

    fn wedge(self, other: Scalar) -> SphereOnOrigin {
        SphereOnOrigin {
            groups: SphereOnOriginGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for Transflector {
    type Output = Plane;

    fn wedge(self, other: AntiCircleOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<AntiDipoleOnOrigin> for Transflector {
    type Output = AntiScalar;

    fn wedge(self, other: AntiDipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiLineAtOrigin> for Transflector {
    type Output = Horizon;

    fn wedge(self, other: AntiLineAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for Transflector {
    type Output = Translator;

    fn wedge(self, other: AntiPlane) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Transflector {
    type Output = Translator;

    fn wedge(self, other: AntiPlaneAtOrigin) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]]),
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Transflector {
    type Output = Motor;

    fn wedge(self, other: AntiSphereOnOrigin) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[3]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Circle> for Transflector {
    type Output = AntiScalar;

    fn wedge(self, other: Circle) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAligningOrigin> for Transflector {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleAtOrigin> for Transflector {
    type Output = AntiScalar;

    fn wedge(self, other: CircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOnOrigin> for Transflector {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<CircleOrthogonalOrigin> for Transflector {
    type Output = AntiScalar;

    fn wedge(self, other: CircleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Dipole> for Transflector {
    type Output = Plane;

    fn wedge(self, other: Dipole) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for Transflector {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAligningOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleAtInfinity> for Transflector {
    type Output = Horizon;

    fn wedge(self, other: DipoleAtInfinity) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for Transflector {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for Transflector {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: DipoleOnOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for Transflector {
    type Output = Plane;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group0()[2], -other.group0()[1], -other.group1()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group0()[2], 0.0, other.group0()[0], -other.group1()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[1], -other.group0()[0], 0.0, -other.group1()[2]]),
            },
        }
    }
}

impl Wedge<DualNum> for Transflector {
    type Output = Transflector;

    fn wedge(self, other: DualNum) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() * Simd32x3::from(other.group0()[0]),
                g1: self.group1() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for Transflector {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group6()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group6()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group6()[2]])
                    + Simd32x2::from(self.group1()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group1()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group1()[2]) * Simd32x2::from([0.0, other.group1()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group2()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: self.group0() * Simd32x3::from(other.group0()[0]),
                g6: Simd32x3::from(0.0),
                g7: self.group0() * Simd32x3::from(other.group2()[0]),
                g8: Simd32x4::from(self.group0()[0]) * Simd32x4::from([0.0, other.group1()[2], -other.group1()[1], 0.0])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([-other.group1()[2], 0.0, other.group1()[0], 0.0])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], -other.group1()[0], 0.0, 0.0]),
                g9: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group3()[2], -other.group3()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group3()[2], 0.0, other.group3()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[1], -other.group3()[0], 0.0])
                    + Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(other.group0()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group4()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group4()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group4()[2]])
                    + Simd32x2::from(self.group1()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
            },
        }
    }
}

impl Wedge<NullCircleAtOrigin> for Transflector {
    type Output = AntiScalar;

    fn wedge(self, other: NullCircleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for Transflector {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: NullDipoleAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<Origin> for Transflector {
    type Output = Rotor;

    fn wedge(self, other: Origin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0(), other.group0(), other.group0(), 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()]),
            },
        }
    }
}

impl Wedge<RoundPoint> for Transflector {
    type Output = Motor;

    fn wedge(self, other: RoundPoint) -> Motor {
        Motor {
            groups: MotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], 0.0])
                    + Simd32x4::from(self.group1()[0]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group1()[1]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group1()[2]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[2]])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group1()[0]]),
                g1: Simd32x3::from(self.group0()[0]) * Simd32x3::from([0.0, other.group0()[2], -other.group0()[1]])
                    + Simd32x3::from(self.group0()[1]) * Simd32x3::from([-other.group0()[2], 0.0, other.group0()[0]])
                    + Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group0()[1], -other.group0()[0], 0.0]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Transflector {
    type Output = Rotor;

    fn wedge(self, other: RoundPointAtOrigin) -> Rotor {
        Rotor {
            groups: RotorGroups {
                g0: Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                    * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0])
                    + Simd32x4::from(self.group1()[3]) * Simd32x4::from([0.0, 0.0, 0.0, other.group0()[0]]),
            },
        }
    }
}

impl Wedge<Scalar> for Transflector {
    type Output = Transflector;

    fn wedge(self, other: Scalar) -> Transflector {
        Transflector {
            groups: TransflectorGroups {
                g0: self.group0() * Simd32x3::from(other.group0()),
                g1: self.group1() * Simd32x4::from(other.group0()),
            },
        }
    }
}

impl Wedge<AntiCircleOnOrigin> for Translator {
    type Output = AntiScalar;

    fn wedge(self, other: AntiCircleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlane> for Translator {
    type Output = Horizon;

    fn wedge(self, other: AntiPlane) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiPlaneAtOrigin> for Translator {
    type Output = Horizon;

    fn wedge(self, other: AntiPlaneAtOrigin) -> Horizon {
        Horizon {
            groups: HorizonGroups {
                g0: self.group0()[0] * other.group0()[0] + self.group0()[1] * other.group0()[1] + self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<AntiSphereOnOrigin> for Translator {
    type Output = Plane;

    fn wedge(self, other: AntiSphereOnOrigin) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group0()[3], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group0()[3], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group0()[3], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<Dipole> for Translator {
    type Output = AntiScalar;

    fn wedge(self, other: Dipole) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAligningOrigin> for Translator {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAligningOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleAtOrigin> for Translator {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOnOrigin> for Translator {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOnOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DipoleOrthogonalOrigin> for Translator {
    type Output = AntiScalar;

    fn wedge(self, other: DipoleOrthogonalOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<DualNum> for Translator {
    type Output = Translator;

    fn wedge(self, other: DualNum) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<MultiVector> for Translator {
    type Output = MultiVector;

    fn wedge(self, other: MultiVector) -> MultiVector {
        MultiVector {
            groups: MultiVectorGroups {
                g0: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, -other.group3()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, -other.group3()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, -other.group3()[2]])
                    + Simd32x2::from(self.group0()[3]) * Simd32x2::from([0.0, other.group0()[0]]),
                g1: Simd32x3::from(0.0),
                g2: Simd32x2::from(0.0),
                g3: Simd32x4::from(0.0),
                g4: Simd32x3::from(0.0),
                g5: Simd32x3::from(0.0),
                g6: Simd32x3::from(0.0),
                g7: Simd32x3::from(0.0),
                g8: swizzle!(self.group0(), 0, 1, 2, 0) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], 0.0]),
                g9: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group2()[0]),
                g10: Simd32x2::from(self.group0()[0]) * Simd32x2::from([0.0, other.group1()[0]])
                    + Simd32x2::from(self.group0()[1]) * Simd32x2::from([0.0, other.group1()[1]])
                    + Simd32x2::from(self.group0()[2]) * Simd32x2::from([0.0, other.group1()[2]]),
            },
        }
    }
}

impl Wedge<NullDipoleAtOrigin> for Translator {
    type Output = AntiScalar;

    fn wedge(self, other: NullDipoleAtOrigin) -> AntiScalar {
        AntiScalar {
            groups: AntiScalarGroups {
                g0: 0.0 - self.group0()[0] * other.group0()[0] - self.group0()[1] * other.group0()[1] - self.group0()[2] * other.group0()[2],
            },
        }
    }
}

impl Wedge<Origin> for Translator {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: Origin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()),
            },
        }
    }
}

impl Wedge<RoundPoint> for Translator {
    type Output = Plane;

    fn wedge(self, other: RoundPoint) -> Plane {
        Plane {
            groups: PlaneGroups {
                g0: Simd32x4::from(self.group0()[0]) * Simd32x4::from([-other.group1()[0], 0.0, 0.0, other.group0()[0]])
                    + Simd32x4::from(self.group0()[1]) * Simd32x4::from([0.0, -other.group1()[0], 0.0, other.group0()[1]])
                    + Simd32x4::from(self.group0()[2]) * Simd32x4::from([0.0, 0.0, -other.group1()[0], other.group0()[2]]),
            },
        }
    }
}

impl Wedge<RoundPointAtOrigin> for Translator {
    type Output = PlaneAtOrigin;

    fn wedge(self, other: RoundPointAtOrigin) -> PlaneAtOrigin {
        PlaneAtOrigin {
            groups: PlaneAtOriginGroups {
                g0: Simd32x3::from(0.0) - Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(other.group0()[0]),
            },
        }
    }
}

impl Wedge<Scalar> for Translator {
    type Output = Translator;

    fn wedge(self, other: Scalar) -> Translator {
        Translator {
            groups: TranslatorGroups {
                g0: self.group0() * Simd32x4::from(other.group0()),
            },
        }
    }
}
